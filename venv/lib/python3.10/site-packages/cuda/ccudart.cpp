/* Generated by Cython 3.0.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/cuda.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/cudaProfiler.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/cuda_runtime_api.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/device_types.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/driver_types.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/library_types.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/surface_types.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/texture_types.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/vector_types.h",
            "cuda"
        ],
        "extra_compile_args": [
            "-std=c++14",
            "-fpermissive",
            "-Wno-deprecated-declarations",
            "-D _GLIBCXX_ASSERTIONS",
            "-fno-var-tracking-assignments",
            "-O3"
        ],
        "include_dirs": [
            "cuda",
            "/opt/python/cp310-cp310/include",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include"
        ],
        "language": "c++",
        "library_dirs": [
            "/opt/python/cp310-cp310/lib/python3.10/site-packages",
            "/opt/python/cp310-cp310/lib"
        ],
        "name": "cuda.ccudart",
        "sources": [
            "cuda/ccudart.pyx"
        ]
    },
    "module_name": "cuda.ccudart"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_3" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030003F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info; // borrowed
        #endif
        PyObject *py_minor_version = NULL;
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11; // we don't yet need to distinguish between versions > 11
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        Py_XDECREF(py_minor_version);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);  // we don't have access to __pyx_empty_bytes here
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__cuda__ccudart
#define __PYX_HAVE_API__cuda__ccudart
/* Early includes */
#include <stdint.h>
#include "vector_types.h"
#include "driver_types.h"
#include "surface_types.h"
#include "texture_types.h"
#include "library_types.h"
#include "cuda_runtime_api.h"
#include "device_types.h"
#include "cuda.h"
#include "cudaProfiler.h"
#include <string.h>
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else  // Py < 3.12
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "cuda/ccudart.pyx",
  "cuda/_lib/ccudart/utils.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */

/* "cuda/ccuda.pxd":2263
 * ctypedef CUGLmap_flags_enum CUGLmap_flags
 * 
 * ctypedef unsigned int GLenum             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLuint
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_GLenum;

/* "cuda/ccuda.pxd":2265
 * ctypedef unsigned int GLenum
 * 
 * ctypedef unsigned int GLuint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_GLuint;

/* "cuda/ccuda.pxd":2277
 * ctypedef void* EGLStreamKHR
 * 
 * ctypedef unsigned int EGLint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_EGLint;

/* "cuda/ccuda.pxd":2284
 * ctypedef void* EGLSyncKHR
 * 
 * ctypedef uint32_t VdpDevice             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long VdpGetProcAddress
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpDevice;

/* "cuda/ccuda.pxd":2286
 * ctypedef uint32_t VdpDevice
 * 
 * ctypedef unsigned long long VdpGetProcAddress             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpVideoSurface
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_5ccuda_VdpGetProcAddress;

/* "cuda/ccuda.pxd":2288
 * ctypedef unsigned long long VdpGetProcAddress
 * 
 * ctypedef uint32_t VdpVideoSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpOutputSurface
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpVideoSurface;

/* "cuda/ccuda.pxd":2290
 * ctypedef uint32_t VdpVideoSurface
 * 
 * ctypedef uint32_t VdpOutputSurface             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuGetErrorString(CUresult error, const char** pStr) except ?CUDA_ERROR_NOT_FOUND nogil
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpOutputSurface;

/* "cuda/ccudart.pxd":1376
 *         cudaRoundMinInf = 3
 * 
 * ctypedef unsigned int GLenum             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLuint
 */
typedef unsigned int __pyx_t_4cuda_7ccudart_GLenum;

/* "cuda/ccudart.pxd":1378
 * ctypedef unsigned int GLenum
 * 
 * ctypedef unsigned int GLuint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_7ccudart_GLuint;

/* "cuda/ccudart.pxd":1390
 * ctypedef void* EGLStreamKHR
 * 
 * ctypedef unsigned int EGLint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_7ccudart_EGLint;

/* "cuda/ccudart.pxd":1397
 * ctypedef void* EGLSyncKHR
 * 
 * ctypedef uint32_t VdpDevice             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long VdpGetProcAddress
 */
typedef uint32_t __pyx_t_4cuda_7ccudart_VdpDevice;

/* "cuda/ccudart.pxd":1399
 * ctypedef uint32_t VdpDevice
 * 
 * ctypedef unsigned long long VdpGetProcAddress             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpVideoSurface
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_7ccudart_VdpGetProcAddress;

/* "cuda/ccudart.pxd":1401
 * ctypedef unsigned long long VdpGetProcAddress
 * 
 * ctypedef uint32_t VdpVideoSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpOutputSurface
 */
typedef uint32_t __pyx_t_4cuda_7ccudart_VdpVideoSurface;

/* "cuda/ccudart.pxd":1403
 * ctypedef uint32_t VdpVideoSurface
 * 
 * ctypedef uint32_t VdpOutputSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeID cudaStreamAttrID
 */
typedef uint32_t __pyx_t_4cuda_7ccudart_VdpOutputSurface;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal;
union __pyx_t_4cuda_5ccuda_anon_union12;
struct __pyx_t_4cuda_5ccuda_CUeglFrame_st;

/* "cuda/ccuda.pxd":2093
 *     ctypedef CUoutput_mode_enum CUoutput_mode
 * 
 * cdef enum CUeglFrameType_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_FRAME_TYPE_ARRAY = 0
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglFrameType_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_FRAME_TYPE_ARRAY = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_FRAME_TYPE_PITCH = 1
};

/* "cuda/ccuda.pxd":2099
 * ctypedef CUeglFrameType_enum CUeglFrameType
 * 
 * cdef enum CUeglResourceLocationFlags_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_RESOURCE_LOCATION_SYSMEM = 0
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_RESOURCE_LOCATION_SYSMEM = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
};

/* "cuda/ccuda.pxd":2105
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags
 * 
 * cdef enum CUeglColorFormat_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0
 *     CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglColorFormat_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_PLANAR = 2,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR = 3,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RGB = 4,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BGR = 5,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_ARGB = 6,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RGBA = 7,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_L = 8,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_R = 9,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_PLANAR = 10,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR = 11,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUYV_422 = 12,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_UYVY_422 = 13,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_ABGR = 14,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BGRA = 15,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_A = 16,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RG = 17,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_AYUV = 18,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR = 19,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR = 20,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR = 21,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR = 22,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR = 23,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR = 24,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR = 25,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_VYUY_ER = 26,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_UYVY_ER = 27,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUYV_ER = 28,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVYU_ER = 29,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV_ER = 30,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUVA_ER = 31,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_AYUV_ER = 32,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_PLANAR_ER = 33,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_PLANAR_ER = 34,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_ER = 35,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR_ER = 36,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR_ER = 37,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_ER = 38,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_PLANAR_ER = 39,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_PLANAR_ER = 40,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_ER = 41,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR_ER = 42,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR_ER = 43,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_ER = 44,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_RGGB = 45,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_BGGR = 46,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_GRBG = 47,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_GBRG = 48,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_RGGB = 49,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_BGGR = 50,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_GRBG = 51,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_GBRG = 52,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_RGGB = 53,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_BGGR = 54,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_GRBG = 55,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_GBRG = 56,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_RGGB = 57,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_BGGR = 58,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_GRBG = 59,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_GBRG = 60,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_RGGB = 61,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_BGGR = 62,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_GRBG = 63,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_GBRG = 64,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_PLANAR = 65,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_PLANAR = 66,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR = 67,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_RGGB = 68,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_BGGR = 69,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_GRBG = 70,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_GBRG = 71,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_BCCR = 72,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_RCCB = 73,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_CRBC = 74,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_CBRC = 75,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_CCCC = 76,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_BCCR = 77,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_RCCB = 78,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CRBC = 79,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CBRC = 80,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CCCC = 81,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y = 82,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_2020 = 83,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_2020 = 84,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_2020 = 85,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_2020 = 86,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_709 = 87,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_709 = 88,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_709 = 89,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_709 = 90,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709 = 91,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_2020 = 92,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_2020 = 93,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR = 94,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_709 = 95,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y_ER = 96,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y_709_ER = 97,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10_ER = 98,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10_709_ER = 99,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12_ER = 0x64,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12_709_ER = 0x65,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUVA = 0x66,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV = 0x67,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVYU = 0x68,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_VYUY = 0x69,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_ER = 0x6A,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709_ER = 0x6B,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_ER = 0x6C,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_709_ER = 0x6D,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_ER = 0x6E,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_709_ER = 0x6F,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_ER = 0x70,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_709_ER = 0x71,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_MAX = 0x72
};

/* "cuda/ccuda.pxd":2249
 * ctypedef CUeglStreamConnection_st* CUeglStreamConnection
 * 
 * cdef enum CUGLDeviceList_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_DEVICE_LIST_ALL = 1
 *     CU_GL_DEVICE_LIST_CURRENT_FRAME = 2
 */
enum __pyx_t_4cuda_5ccuda_CUGLDeviceList_enum {
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_ALL = 1,
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_CURRENT_FRAME = 2,
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_NEXT_FRAME = 3
};

/* "cuda/ccuda.pxd":2256
 * ctypedef CUGLDeviceList_enum CUGLDeviceList
 * 
 * cdef enum CUGLmap_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_MAP_RESOURCE_FLAGS_NONE = 0
 *     CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUGLmap_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1,
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
};

/* "cuda/ccuda.pxd":3150
 * cdef CUresult cuGraphicsVDPAURegisterOutputSurface(CUgraphicsResource* pCudaResource, VdpOutputSurface vdpSurface, unsigned int flags) except ?CUDA_ERROR_NOT_FOUND nogil
 * 
 * cdef enum: CUDA_VERSION = 12030             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_VERSION = 0x2EFE
};

/* "cuda/ccuda.pxd":3152
 * cdef enum: CUDA_VERSION = 12030
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_LEGACY = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_IPC_HANDLE_SIZE = 64
};

/* "cuda/ccuda.pxd":3154
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 * 
 * cdef enum: CU_STREAM_LEGACY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_LEGACY = 1
};

/* "cuda/ccuda.pxd":3156
 * cdef enum: CU_STREAM_LEGACY = 1
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_PER_THREAD = 2
};

/* "cuda/ccuda.pxd":3158
 * cdef enum: CU_STREAM_PER_THREAD = 2
 * 
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_COMPUTE_ACCELERATED_TARGET_BASE = 0x10000
};

/* "cuda/ccuda.pxd":3160
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536
 * 
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_COND_ASSIGN_DEFAULT = 1
};

/* "cuda/ccuda.pxd":3162
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
};

/* "cuda/ccuda.pxd":3164
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
};

/* "cuda/ccuda.pxd":3166
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
};

/* "cuda/ccuda.pxd":3168
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
};

/* "cuda/ccuda.pxd":3170
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
};

/* "cuda/ccuda.pxd":3172
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
};

/* "cuda/ccuda.pxd":3174
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
};

/* "cuda/ccuda.pxd":3176
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
};

/* "cuda/ccuda.pxd":3178
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
};

/* "cuda/ccuda.pxd":3180
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
};

/* "cuda/ccuda.pxd":3182
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
};

/* "cuda/ccuda.pxd":3184
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
};

/* "cuda/ccuda.pxd":3186
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_PRIORITY = 8
};

/* "cuda/ccuda.pxd":3188
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
};

/* "cuda/ccuda.pxd":3190
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
};

/* "cuda/ccuda.pxd":3192
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_PORTABLE = 1
};

/* "cuda/ccuda.pxd":3194
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_DEVICEMAP = 2
};

/* "cuda/ccuda.pxd":3196
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_WRITECOMBINED = 4
};

/* "cuda/ccuda.pxd":3198
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_PORTABLE = 1
};

/* "cuda/ccuda.pxd":3200
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_DEVICEMAP = 2
};

/* "cuda/ccuda.pxd":3202
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_IOMEMORY = 4
};

/* "cuda/ccuda.pxd":3204
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_READ_ONLY = 8
};

/* "cuda/ccuda.pxd":3206
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
};

/* "cuda/ccuda.pxd":3208
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 * 
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TENSOR_MAP_NUM_QWORDS = 16
};

/* "cuda/ccuda.pxd":3210
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_DEDICATED = 1
};

/* "cuda/ccuda.pxd":3212
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
};

/* "cuda/ccuda.pxd":3214
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
};

/* "cuda/ccuda.pxd":3216
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_NVSCISYNC_ATTR_SIGNAL = 1
};

/* "cuda/ccuda.pxd":3218
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_NVSCISYNC_ATTR_WAIT = 2
};

/* "cuda/ccuda.pxd":3220
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEM_CREATE_USAGE_TILE_POOL = 1
};

/* "cuda/ccuda.pxd":3222
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
};

/* "cuda/ccuda.pxd":3224
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
};

/* "cuda/ccuda.pxd":3226
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_LAYERED = 1
};

/* "cuda/ccuda.pxd":3228
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_2DARRAY = 1
};

/* "cuda/ccuda.pxd":3230
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_SURFACE_LDST = 2
};

/* "cuda/ccuda.pxd":3232
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_CUBEMAP = 4
};

/* "cuda/ccuda.pxd":3234
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_TEXTURE_GATHER = 8
};

/* "cuda/ccuda.pxd":3236
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_DEPTH_TEXTURE = 16
};

/* "cuda/ccuda.pxd":3238
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
};

/* "cuda/ccuda.pxd":3240
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_SPARSE = 64
};

/* "cuda/ccuda.pxd":3242
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_DEFERRED_MAPPING = 0x80
};

/* "cuda/ccuda.pxd":3244
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSA_OVERRIDE_FORMAT = 1
};

/* "cuda/ccuda.pxd":3246
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_READ_AS_INTEGER = 1
};

/* "cuda/ccuda.pxd":3248
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SRGB = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_NORMALIZED_COORDINATES = 2
};

/* "cuda/ccuda.pxd":3250
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 * 
 * cdef enum: CU_TRSF_SRGB = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_SRGB = 16
};

/* "cuda/ccuda.pxd":3252
 * cdef enum: CU_TRSF_SRGB = 16
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
};

/* "cuda/ccuda.pxd":3254
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_SEAMLESS_CUBEMAP = 64
};

/* "cuda/ccuda.pxd":3256
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 * 
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_END_AS_INT = 0
};

/* "cuda/ccuda.pxd":3258
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_END = 0
};

/* "cuda/ccuda.pxd":3260
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
};

/* "cuda/ccuda.pxd":3262
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_POINTER = 1
};

/* "cuda/ccuda.pxd":3264
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
};

/* "cuda/ccuda.pxd":3266
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_SIZE = 2
};

/* "cuda/ccuda.pxd":3268
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_CPU = -1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_PARAM_TR_DEFAULT = -1L
};

/* "cuda/ccuda.pxd":3270
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 * 
 * cdef enum: CU_DEVICE_CPU = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_INVALID = -2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_CPU = -1L
};

/* "cuda/ccuda.pxd":3272
 * cdef enum: CU_DEVICE_CPU = -1
 * 
 * cdef enum: CU_DEVICE_INVALID = -2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: MAX_PLANES = 3
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_INVALID = -2L
};

/* "cuda/ccuda.pxd":3274
 * cdef enum: CU_DEVICE_INVALID = -2
 * 
 * cdef enum: MAX_PLANES = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295
 */
enum  {
  __pyx_e_4cuda_5ccuda_MAX_PLANES = 3
};

/* "cuda/ccuda.pxd":3276
 * cdef enum: MAX_PLANES = 3
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295             # <<<<<<<<<<<<<<
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EGL_INFINITE_TIMEOUT = 0xFFFFFFFF
};

/* "cuda/ccuda.pxd":2097
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 * 
 * ctypedef CUeglFrameType_enum CUeglFrameType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglResourceLocationFlags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglFrameType_enum __pyx_t_4cuda_5ccuda_CUeglFrameType;

/* "cuda/ccuda.pxd":2103
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 * 
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglColorFormat_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags_enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags;

/* "cuda/ccuda.pxd":2222
 *     CU_EGL_COLOR_FORMAT_MAX = 114
 * 
 * ctypedef CUeglColorFormat_enum CUeglColorFormat             # <<<<<<<<<<<<<<
 * 
 * cdef union anon_union12:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglColorFormat_enum __pyx_t_4cuda_5ccuda_CUeglColorFormat;

/* "cuda/ccuda.pxd":2224
 * ctypedef CUeglColorFormat_enum CUeglColorFormat
 * 
 * cdef union anon_union12:             # <<<<<<<<<<<<<<
 *     CUarray pArray[3]
 *     void* pPitch[3]
 */
union __pyx_t_4cuda_5ccuda_anon_union12 {
  CUarray pArray[3];
  void *pPitch[3];
};

/* "cuda/ccuda.pxd":2228
 *     void* pPitch[3]
 * 
 * cdef struct CUeglFrame_st:             # <<<<<<<<<<<<<<
 *     anon_union12 frame
 *     unsigned int width
 */
struct __pyx_t_4cuda_5ccuda_CUeglFrame_st {
  union __pyx_t_4cuda_5ccuda_anon_union12 frame;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int pitch;
  unsigned int planeCount;
  unsigned int numChannels;
  __pyx_t_4cuda_5ccuda_CUeglFrameType frameType;
  __pyx_t_4cuda_5ccuda_CUeglColorFormat eglColorFormat;
  CUarray_format cuFormat;
};

/* "cuda/ccuda.pxd":2240
 *     CUarray_format cuFormat
 * 
 * ctypedef CUeglFrame_st CUeglFrame_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame
 */
typedef struct __pyx_t_4cuda_5ccuda_CUeglFrame_st __pyx_t_4cuda_5ccuda_CUeglFrame_v1;

/* "cuda/ccuda.pxd":2242
 * ctypedef CUeglFrame_st CUeglFrame_v1
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef __pyx_t_4cuda_5ccuda_CUeglFrame_v1 __pyx_t_4cuda_5ccuda_CUeglFrame;

/* "cuda/ccuda.pxd":2247
 *     cdef struct CUeglStreamConnection_st:
 *         pass
 * ctypedef CUeglStreamConnection_st* CUeglStreamConnection             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUGLDeviceList_enum:
 */
typedef struct CUeglStreamConnection_st *__pyx_t_4cuda_5ccuda_CUeglStreamConnection;

/* "cuda/ccuda.pxd":2254
 *     CU_GL_DEVICE_LIST_NEXT_FRAME = 3
 * 
 * ctypedef CUGLDeviceList_enum CUGLDeviceList             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUGLmap_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUGLDeviceList_enum __pyx_t_4cuda_5ccuda_CUGLDeviceList;

/* "cuda/ccuda.pxd":2261
 *     CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
 * 
 * ctypedef CUGLmap_flags_enum CUGLmap_flags             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLenum
 */
typedef enum __pyx_t_4cuda_5ccuda_CUGLmap_flags_enum __pyx_t_4cuda_5ccuda_CUGLmap_flags;

/* "cuda/ccuda.pxd":2270
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLImageKHR             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLImageKHR;

/* "cuda/ccuda.pxd":2275
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLStreamKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int EGLint
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLStreamKHR;

/* "cuda/ccuda.pxd":2282
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLSyncKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpDevice
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLSyncKHR;
struct __pyx_t_4cuda_4_lib_7ccudart_5utils_cudaPythonDevice;

/* "cuda/_lib/ccudart/utils.pxd":14
 * cimport cuda._cuda.ccuda as ccuda
 * 
 * cdef struct cudaPythonDevice:             # <<<<<<<<<<<<<<
 *     ccuda.CUdevice driverDevice
 *     ccuda.CUcontext primaryContext
 */
struct __pyx_t_4cuda_4_lib_7ccudart_5utils_cudaPythonDevice {
  CUdevice driverDevice;
  CUcontext primaryContext;
  bool primaryContextRetained;
  int deviceOrdinal;
  struct cudaDeviceProp deviceProperties;
};
struct __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc_st;
union __pyx_t_4cuda_7ccudart_anon_union8;
struct __pyx_t_4cuda_7ccudart_cudaEglFrame_st;

/* "cuda/ccudart.pxd":1413
 * ctypedef cudaLaunchAttributeValue cudaKernelNodeAttrValue
 * 
 * cdef enum cudaEglFrameType_enum:             # <<<<<<<<<<<<<<
 *     cudaEglFrameTypeArray = 0
 *     cudaEglFrameTypePitch = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaEglFrameType_enum {
  __pyx_e_4cuda_7ccudart_cudaEglFrameTypeArray = 0,
  __pyx_e_4cuda_7ccudart_cudaEglFrameTypePitch = 1
};

/* "cuda/ccudart.pxd":1419
 * ctypedef cudaEglFrameType_enum cudaEglFrameType
 * 
 * cdef enum cudaEglResourceLocationFlags_enum:             # <<<<<<<<<<<<<<
 *     cudaEglResourceLocationSysmem = 0
 *     cudaEglResourceLocationVidmem = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaEglResourceLocationFlags_enum {
  __pyx_e_4cuda_7ccudart_cudaEglResourceLocationSysmem = 0,
  __pyx_e_4cuda_7ccudart_cudaEglResourceLocationVidmem = 1
};

/* "cuda/ccudart.pxd":1425
 * ctypedef cudaEglResourceLocationFlags_enum cudaEglResourceLocationFlags
 * 
 * cdef enum cudaEglColorFormat_enum:             # <<<<<<<<<<<<<<
 *     cudaEglColorFormatYUV420Planar = 0
 *     cudaEglColorFormatYUV420SemiPlanar = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaEglColorFormat_enum {
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar = 0,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar = 1,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422Planar = 2,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422SemiPlanar = 3,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatARGB = 6,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatRGBA = 7,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatL = 8,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatR = 9,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444Planar = 10,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444SemiPlanar = 11,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUYV422 = 12,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatUYVY422 = 13,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatABGR = 14,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBGRA = 15,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatA = 16,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatRG = 17,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatAYUV = 18,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444SemiPlanar = 19,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422SemiPlanar = 20,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar = 21,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_444SemiPlanar = 22,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar = 23,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_444SemiPlanar = 24,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_420SemiPlanar = 25,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatVYUY_ER = 26,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatUYVY_ER = 27,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUYV_ER = 28,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVYU_ER = 29,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUVA_ER = 31,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatAYUV_ER = 32,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444Planar_ER = 33,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422Planar_ER = 34,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar_ER = 35,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV444SemiPlanar_ER = 36,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV422SemiPlanar_ER = 37,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar_ER = 38,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444Planar_ER = 39,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422Planar_ER = 40,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar_ER = 41,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444SemiPlanar_ER = 42,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422SemiPlanar_ER = 43,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar_ER = 44,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerRGGB = 45,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerBGGR = 46,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerGRBG = 47,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerGBRG = 48,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10RGGB = 49,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10BGGR = 50,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10GRBG = 51,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10GBRG = 52,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12RGGB = 53,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12BGGR = 54,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12GRBG = 55,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12GBRG = 56,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14RGGB = 57,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14BGGR = 58,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14GRBG = 59,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer14GBRG = 60,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20RGGB = 61,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20BGGR = 62,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20GRBG = 63,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer20GBRG = 64,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU444Planar = 65,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU422Planar = 66,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar = 67,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspRGGB = 68,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspBGGR = 69,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspGRBG = 70,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerIspGBRG = 71,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerBCCR = 72,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerRCCB = 73,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerCRBC = 74,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayerCBRC = 75,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer10CCCC = 76,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12BCCR = 77,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12RCCB = 78,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12CRBC = 79,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12CBRC = 80,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatBayer12CCCC = 81,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY = 82,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar_2020 = 83,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar_2020 = 84,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar_2020 = 85,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar_2020 = 86,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420SemiPlanar_709 = 87,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420SemiPlanar_709 = 88,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUV420Planar_709 = 89,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVU420Planar_709 = 90,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_709 = 91,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_2020 = 92,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_422SemiPlanar_2020 = 93,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_422SemiPlanar = 94,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_422SemiPlanar_709 = 95,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY_ER = 96,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY_709_ER = 97,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10_ER = 98,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10_709_ER = 99,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12_ER = 0x64,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12_709_ER = 0x65,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYUVA = 0x66,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatYVYU = 0x68,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatVYUY = 0x69,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_ER = 0x6A,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_420SemiPlanar_709_ER = 0x6B,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_444SemiPlanar_ER = 0x6C,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY10V10U10_444SemiPlanar_709_ER = 0x6D,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_420SemiPlanar_ER = 0x6E,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_420SemiPlanar_709_ER = 0x6F,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_444SemiPlanar_ER = 0x70,
  __pyx_e_4cuda_7ccudart_cudaEglColorFormatY12V12U12_444SemiPlanar_709_ER = 0x71
};

/* "cuda/ccudart.pxd":1568
 * ctypedef CUeglStreamConnection_st* cudaEglStreamConnection
 * 
 * cdef enum cudaGLDeviceList:             # <<<<<<<<<<<<<<
 *     cudaGLDeviceListAll = 1
 *     cudaGLDeviceListCurrentFrame = 2
 */
enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList {
  __pyx_e_4cuda_7ccudart_cudaGLDeviceListAll = 1,
  __pyx_e_4cuda_7ccudart_cudaGLDeviceListCurrentFrame = 2,
  __pyx_e_4cuda_7ccudart_cudaGLDeviceListNextFrame = 3
};

/* "cuda/ccudart.pxd":1573
 *     cudaGLDeviceListNextFrame = 3
 * 
 * cdef enum cudaGLMapFlags:             # <<<<<<<<<<<<<<
 *     cudaGLMapFlagsNone = 0
 *     cudaGLMapFlagsReadOnly = 1
 */
enum __pyx_t_4cuda_7ccudart_cudaGLMapFlags {
  __pyx_e_4cuda_7ccudart_cudaGLMapFlagsNone = 0,
  __pyx_e_4cuda_7ccudart_cudaGLMapFlagsReadOnly = 1,
  __pyx_e_4cuda_7ccudart_cudaGLMapFlagsWriteDiscard = 2
};

/* "cuda/ccudart.pxd":2168
 * cdef cudaError_t getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil
 * 
 * cdef enum: cudaHostAllocDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocPortable = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocDefault = 0
};

/* "cuda/ccudart.pxd":2170
 * cdef enum: cudaHostAllocDefault = 0
 * 
 * cdef enum: cudaHostAllocPortable = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocMapped = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocPortable = 1
};

/* "cuda/ccudart.pxd":2172
 * cdef enum: cudaHostAllocPortable = 1
 * 
 * cdef enum: cudaHostAllocMapped = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocWriteCombined = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocMapped = 2
};

/* "cuda/ccudart.pxd":2174
 * cdef enum: cudaHostAllocMapped = 2
 * 
 * cdef enum: cudaHostAllocWriteCombined = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostAllocWriteCombined = 4
};

/* "cuda/ccudart.pxd":2176
 * cdef enum: cudaHostAllocWriteCombined = 4
 * 
 * cdef enum: cudaHostRegisterDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterPortable = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterDefault = 0
};

/* "cuda/ccudart.pxd":2178
 * cdef enum: cudaHostRegisterDefault = 0
 * 
 * cdef enum: cudaHostRegisterPortable = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterMapped = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterPortable = 1
};

/* "cuda/ccudart.pxd":2180
 * cdef enum: cudaHostRegisterPortable = 1
 * 
 * cdef enum: cudaHostRegisterMapped = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterIoMemory = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterMapped = 2
};

/* "cuda/ccudart.pxd":2182
 * cdef enum: cudaHostRegisterMapped = 2
 * 
 * cdef enum: cudaHostRegisterIoMemory = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterReadOnly = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterIoMemory = 4
};

/* "cuda/ccudart.pxd":2184
 * cdef enum: cudaHostRegisterIoMemory = 4
 * 
 * cdef enum: cudaHostRegisterReadOnly = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaPeerAccessDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaHostRegisterReadOnly = 8
};

/* "cuda/ccudart.pxd":2186
 * cdef enum: cudaHostRegisterReadOnly = 8
 * 
 * cdef enum: cudaPeerAccessDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaPeerAccessDefault = 0
};

/* "cuda/ccudart.pxd":2188
 * cdef enum: cudaPeerAccessDefault = 0
 * 
 * cdef enum: cudaStreamDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamNonBlocking = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamDefault = 0
};

/* "cuda/ccudart.pxd":2190
 * cdef enum: cudaStreamDefault = 0
 * 
 * cdef enum: cudaStreamNonBlocking = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamLegacy = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamNonBlocking = 1
};

/* "cuda/ccudart.pxd":2192
 * cdef enum: cudaStreamNonBlocking = 1
 * 
 * cdef enum: cudaStreamLegacy = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamPerThread = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamLegacy = 1
};

/* "cuda/ccudart.pxd":2194
 * cdef enum: cudaStreamLegacy = 1
 * 
 * cdef enum: cudaStreamPerThread = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamPerThread = 2
};

/* "cuda/ccudart.pxd":2196
 * cdef enum: cudaStreamPerThread = 2
 * 
 * cdef enum: cudaEventDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventBlockingSync = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventDefault = 0
};

/* "cuda/ccudart.pxd":2198
 * cdef enum: cudaEventDefault = 0
 * 
 * cdef enum: cudaEventBlockingSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventDisableTiming = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventBlockingSync = 1
};

/* "cuda/ccudart.pxd":2200
 * cdef enum: cudaEventBlockingSync = 1
 * 
 * cdef enum: cudaEventDisableTiming = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventInterprocess = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventDisableTiming = 2
};

/* "cuda/ccudart.pxd":2202
 * cdef enum: cudaEventDisableTiming = 2
 * 
 * cdef enum: cudaEventInterprocess = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventRecordDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventInterprocess = 4
};

/* "cuda/ccudart.pxd":2204
 * cdef enum: cudaEventInterprocess = 4
 * 
 * cdef enum: cudaEventRecordDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventRecordExternal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventRecordDefault = 0
};

/* "cuda/ccudart.pxd":2206
 * cdef enum: cudaEventRecordDefault = 0
 * 
 * cdef enum: cudaEventRecordExternal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventWaitDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventRecordExternal = 1
};

/* "cuda/ccudart.pxd":2208
 * cdef enum: cudaEventRecordExternal = 1
 * 
 * cdef enum: cudaEventWaitDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventWaitExternal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventWaitDefault = 0
};

/* "cuda/ccudart.pxd":2210
 * cdef enum: cudaEventWaitDefault = 0
 * 
 * cdef enum: cudaEventWaitExternal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleAuto = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaEventWaitExternal = 1
};

/* "cuda/ccudart.pxd":2212
 * cdef enum: cudaEventWaitExternal = 1
 * 
 * cdef enum: cudaDeviceScheduleAuto = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleSpin = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleAuto = 0
};

/* "cuda/ccudart.pxd":2214
 * cdef enum: cudaDeviceScheduleAuto = 0
 * 
 * cdef enum: cudaDeviceScheduleSpin = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleYield = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleSpin = 1
};

/* "cuda/ccudart.pxd":2216
 * cdef enum: cudaDeviceScheduleSpin = 1
 * 
 * cdef enum: cudaDeviceScheduleYield = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleBlockingSync = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleYield = 2
};

/* "cuda/ccudart.pxd":2218
 * cdef enum: cudaDeviceScheduleYield = 2
 * 
 * cdef enum: cudaDeviceScheduleBlockingSync = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceBlockingSync = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleBlockingSync = 4
};

/* "cuda/ccudart.pxd":2220
 * cdef enum: cudaDeviceScheduleBlockingSync = 4
 * 
 * cdef enum: cudaDeviceBlockingSync = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleMask = 7
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceBlockingSync = 4
};

/* "cuda/ccudart.pxd":2222
 * cdef enum: cudaDeviceBlockingSync = 4
 * 
 * cdef enum: cudaDeviceScheduleMask = 7             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceMapHost = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceScheduleMask = 7
};

/* "cuda/ccudart.pxd":2224
 * cdef enum: cudaDeviceScheduleMask = 7
 * 
 * cdef enum: cudaDeviceMapHost = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceLmemResizeToMax = 16
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceMapHost = 8
};

/* "cuda/ccudart.pxd":2226
 * cdef enum: cudaDeviceMapHost = 8
 * 
 * cdef enum: cudaDeviceLmemResizeToMax = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceSyncMemops = 128
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceLmemResizeToMax = 16
};

/* "cuda/ccudart.pxd":2228
 * cdef enum: cudaDeviceLmemResizeToMax = 16
 * 
 * cdef enum: cudaDeviceSyncMemops = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceMask = 255
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceSyncMemops = 0x80
};

/* "cuda/ccudart.pxd":2230
 * cdef enum: cudaDeviceSyncMemops = 128
 * 
 * cdef enum: cudaDeviceMask = 255             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaDeviceMask = 0xFF
};

/* "cuda/ccudart.pxd":2232
 * cdef enum: cudaDeviceMask = 255
 * 
 * cdef enum: cudaArrayDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayLayered = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayDefault = 0
};

/* "cuda/ccudart.pxd":2234
 * cdef enum: cudaArrayDefault = 0
 * 
 * cdef enum: cudaArrayLayered = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySurfaceLoadStore = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayLayered = 1
};

/* "cuda/ccudart.pxd":2236
 * cdef enum: cudaArrayLayered = 1
 * 
 * cdef enum: cudaArraySurfaceLoadStore = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayCubemap = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArraySurfaceLoadStore = 2
};

/* "cuda/ccudart.pxd":2238
 * cdef enum: cudaArraySurfaceLoadStore = 2
 * 
 * cdef enum: cudaArrayCubemap = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayTextureGather = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayCubemap = 4
};

/* "cuda/ccudart.pxd":2240
 * cdef enum: cudaArrayCubemap = 4
 * 
 * cdef enum: cudaArrayTextureGather = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayColorAttachment = 32
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayTextureGather = 8
};

/* "cuda/ccudart.pxd":2242
 * cdef enum: cudaArrayTextureGather = 8
 * 
 * cdef enum: cudaArrayColorAttachment = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySparse = 64
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayColorAttachment = 32
};

/* "cuda/ccudart.pxd":2244
 * cdef enum: cudaArrayColorAttachment = 32
 * 
 * cdef enum: cudaArraySparse = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayDeferredMapping = 128
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArraySparse = 64
};

/* "cuda/ccudart.pxd":2246
 * cdef enum: cudaArraySparse = 64
 * 
 * cdef enum: cudaArrayDeferredMapping = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArrayDeferredMapping = 0x80
};

/* "cuda/ccudart.pxd":2248
 * cdef enum: cudaArrayDeferredMapping = 128
 * 
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachGlobal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaIpcMemLazyEnablePeerAccess = 1
};

/* "cuda/ccudart.pxd":2250
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1
 * 
 * cdef enum: cudaMemAttachGlobal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachHost = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaMemAttachGlobal = 1
};

/* "cuda/ccudart.pxd":2252
 * cdef enum: cudaMemAttachGlobal = 1
 * 
 * cdef enum: cudaMemAttachHost = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachSingle = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaMemAttachHost = 2
};

/* "cuda/ccudart.pxd":2254
 * cdef enum: cudaMemAttachHost = 2
 * 
 * cdef enum: cudaMemAttachSingle = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaOccupancyDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaMemAttachSingle = 4
};

/* "cuda/ccudart.pxd":2256
 * cdef enum: cudaMemAttachSingle = 4
 * 
 * cdef enum: cudaOccupancyDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaOccupancyDisableCachingOverride = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaOccupancyDefault = 0
};

/* "cuda/ccudart.pxd":2258
 * cdef enum: cudaOccupancyDefault = 0
 * 
 * cdef enum: cudaOccupancyDisableCachingOverride = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCpuDeviceId = -1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaOccupancyDisableCachingOverride = 1
};

/* "cuda/ccudart.pxd":2260
 * cdef enum: cudaOccupancyDisableCachingOverride = 1
 * 
 * cdef enum: cudaCpuDeviceId = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaInvalidDeviceId = -2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaCpuDeviceId = -1L
};

/* "cuda/ccudart.pxd":2262
 * cdef enum: cudaCpuDeviceId = -1
 * 
 * cdef enum: cudaInvalidDeviceId = -2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaInitDeviceFlagsAreValid = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaInvalidDeviceId = -2L
};

/* "cuda/ccudart.pxd":2264
 * cdef enum: cudaInvalidDeviceId = -2
 * 
 * cdef enum: cudaInitDeviceFlagsAreValid = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaInitDeviceFlagsAreValid = 1
};

/* "cuda/ccudart.pxd":2266
 * cdef enum: cudaInitDeviceFlagsAreValid = 1
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaCooperativeLaunchMultiDeviceNoPreSync = 1
};

/* "cuda/ccudart.pxd":2268
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaCooperativeLaunchMultiDeviceNoPostSync = 2
};

/* "cuda/ccudart.pxd":2270
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2
 * 
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaArraySparsePropertiesSingleMipTail = 1
};

/* "cuda/ccudart.pxd":2272
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1
 * 
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalMemoryDedicated = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_CUDA_IPC_HANDLE_SIZE = 64
};

/* "cuda/ccudart.pxd":2274
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64
 * 
 * cdef enum: cudaExternalMemoryDedicated = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaExternalMemoryDedicated = 1
};

/* "cuda/ccudart.pxd":2276
 * cdef enum: cudaExternalMemoryDedicated = 1
 * 
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
};

/* "cuda/ccudart.pxd":2278
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
 * 
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaNvSciSyncAttrSignal = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
};

/* "cuda/ccudart.pxd":2280
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
 * 
 * cdef enum: cudaNvSciSyncAttrSignal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaNvSciSyncAttrWait = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaNvSciSyncAttrSignal = 1
};

/* "cuda/ccudart.pxd":2282
 * cdef enum: cudaNvSciSyncAttrSignal = 1
 * 
 * cdef enum: cudaNvSciSyncAttrWait = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaGraphKernelNodePortDefault = 0
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaNvSciSyncAttrWait = 2
};

/* "cuda/ccudart.pxd":2284
 * cdef enum: cudaNvSciSyncAttrWait = 2
 * 
 * cdef enum: cudaGraphKernelNodePortDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaGraphKernelNodePortProgrammatic = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaGraphKernelNodePortDefault = 0
};

/* "cuda/ccudart.pxd":2286
 * cdef enum: cudaGraphKernelNodePortDefault = 0
 * 
 * cdef enum: cudaGraphKernelNodePortProgrammatic = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaGraphKernelNodePortLaunchCompletion = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaGraphKernelNodePortProgrammatic = 1
};

/* "cuda/ccudart.pxd":2288
 * cdef enum: cudaGraphKernelNodePortProgrammatic = 1
 * 
 * cdef enum: cudaGraphKernelNodePortLaunchCompletion = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeAccessPolicyWindow = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaGraphKernelNodePortLaunchCompletion = 2
};

/* "cuda/ccudart.pxd":2290
 * cdef enum: cudaGraphKernelNodePortLaunchCompletion = 2
 * 
 * cdef enum: cudaStreamAttributeAccessPolicyWindow = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeSynchronizationPolicy = 3
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamAttributeAccessPolicyWindow = 1
};

/* "cuda/ccudart.pxd":2292
 * cdef enum: cudaStreamAttributeAccessPolicyWindow = 1
 * 
 * cdef enum: cudaStreamAttributeSynchronizationPolicy = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomainMap = 9
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamAttributeSynchronizationPolicy = 3
};

/* "cuda/ccudart.pxd":2294
 * cdef enum: cudaStreamAttributeSynchronizationPolicy = 3
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomainMap = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomain = 10
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamAttributeMemSyncDomainMap = 9
};

/* "cuda/ccudart.pxd":2296
 * cdef enum: cudaStreamAttributeMemSyncDomainMap = 9
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomain = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributePriority = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamAttributeMemSyncDomain = 10
};

/* "cuda/ccudart.pxd":2298
 * cdef enum: cudaStreamAttributeMemSyncDomain = 10
 * 
 * cdef enum: cudaStreamAttributePriority = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeAccessPolicyWindow = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaStreamAttributePriority = 8
};

/* "cuda/ccudart.pxd":2300
 * cdef enum: cudaStreamAttributePriority = 8
 * 
 * cdef enum: cudaKernelNodeAttributeAccessPolicyWindow = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeCooperative = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeAccessPolicyWindow = 1
};

/* "cuda/ccudart.pxd":2302
 * cdef enum: cudaKernelNodeAttributeAccessPolicyWindow = 1
 * 
 * cdef enum: cudaKernelNodeAttributeCooperative = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributePriority = 8
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeCooperative = 2
};

/* "cuda/ccudart.pxd":2304
 * cdef enum: cudaKernelNodeAttributeCooperative = 2
 * 
 * cdef enum: cudaKernelNodeAttributePriority = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeClusterDimension = 4
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributePriority = 8
};

/* "cuda/ccudart.pxd":2306
 * cdef enum: cudaKernelNodeAttributePriority = 8
 * 
 * cdef enum: cudaKernelNodeAttributeClusterDimension = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeClusterDimension = 4
};

/* "cuda/ccudart.pxd":2308
 * cdef enum: cudaKernelNodeAttributeClusterDimension = 4
 * 
 * cdef enum: cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomainMap = 9
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5
};

/* "cuda/ccudart.pxd":2310
 * cdef enum: cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomainMap = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomain = 10
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeMemSyncDomainMap = 9
};

/* "cuda/ccudart.pxd":2312
 * cdef enum: cudaKernelNodeAttributeMemSyncDomainMap = 9
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomain = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType1D = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaKernelNodeAttributeMemSyncDomain = 10
};

/* "cuda/ccudart.pxd":2314
 * cdef enum: cudaKernelNodeAttributeMemSyncDomain = 10
 * 
 * cdef enum: cudaSurfaceType1D = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType2D = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType1D = 1
};

/* "cuda/ccudart.pxd":2316
 * cdef enum: cudaSurfaceType1D = 1
 * 
 * cdef enum: cudaSurfaceType2D = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType3D = 3
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType2D = 2
};

/* "cuda/ccudart.pxd":2318
 * cdef enum: cudaSurfaceType2D = 2
 * 
 * cdef enum: cudaSurfaceType3D = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceTypeCubemap = 12
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType3D = 3
};

/* "cuda/ccudart.pxd":2320
 * cdef enum: cudaSurfaceType3D = 3
 * 
 * cdef enum: cudaSurfaceTypeCubemap = 12             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType1DLayered = 241
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceTypeCubemap = 12
};

/* "cuda/ccudart.pxd":2322
 * cdef enum: cudaSurfaceTypeCubemap = 12
 * 
 * cdef enum: cudaSurfaceType1DLayered = 241             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType2DLayered = 242
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType1DLayered = 0xF1
};

/* "cuda/ccudart.pxd":2324
 * cdef enum: cudaSurfaceType1DLayered = 241
 * 
 * cdef enum: cudaSurfaceType2DLayered = 242             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceType2DLayered = 0xF2
};

/* "cuda/ccudart.pxd":2326
 * cdef enum: cudaSurfaceType2DLayered = 242
 * 
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType1D = 1
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaSurfaceTypeCubemapLayered = 0xFC
};

/* "cuda/ccudart.pxd":2328
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252
 * 
 * cdef enum: cudaTextureType1D = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType2D = 2
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType1D = 1
};

/* "cuda/ccudart.pxd":2330
 * cdef enum: cudaTextureType1D = 1
 * 
 * cdef enum: cudaTextureType2D = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType3D = 3
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType2D = 2
};

/* "cuda/ccudart.pxd":2332
 * cdef enum: cudaTextureType2D = 2
 * 
 * cdef enum: cudaTextureType3D = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureTypeCubemap = 12
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType3D = 3
};

/* "cuda/ccudart.pxd":2334
 * cdef enum: cudaTextureType3D = 3
 * 
 * cdef enum: cudaTextureTypeCubemap = 12             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType1DLayered = 241
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureTypeCubemap = 12
};

/* "cuda/ccudart.pxd":2336
 * cdef enum: cudaTextureTypeCubemap = 12
 * 
 * cdef enum: cudaTextureType1DLayered = 241             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType2DLayered = 242
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType1DLayered = 0xF1
};

/* "cuda/ccudart.pxd":2338
 * cdef enum: cudaTextureType1DLayered = 241
 * 
 * cdef enum: cudaTextureType2DLayered = 242             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureTypeCubemapLayered = 252
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureType2DLayered = 0xF2
};

/* "cuda/ccudart.pxd":2340
 * cdef enum: cudaTextureType2DLayered = 242
 * 
 * cdef enum: cudaTextureTypeCubemapLayered = 252             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDART_VERSION = 12030
 */
enum  {
  __pyx_e_4cuda_7ccudart_cudaTextureTypeCubemapLayered = 0xFC
};

/* "cuda/ccudart.pxd":2342
 * cdef enum: cudaTextureTypeCubemapLayered = 252
 * 
 * cdef enum: CUDART_VERSION = 12030             # <<<<<<<<<<<<<<
 * 
 * cdef enum: __CUDART_API_VERSION = 12030
 */
enum  {
  __pyx_e_4cuda_7ccudart_CUDART_VERSION = 0x2EFE
};

/* "cuda/ccudart.pxd":2344
 * cdef enum: CUDART_VERSION = 12030
 * 
 * cdef enum: __CUDART_API_VERSION = 12030             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EGL_MAX_PLANES = 3
 */
enum  {
  __pyx_e_4cuda_7ccudart___CUDART_API_VERSION = 0x2EFE
};

/* "cuda/ccudart.pxd":2346
 * cdef enum: __CUDART_API_VERSION = 12030
 * 
 * cdef enum: CUDA_EGL_MAX_PLANES = 3             # <<<<<<<<<<<<<<
 */
enum  {
  __pyx_e_4cuda_7ccudart_CUDA_EGL_MAX_PLANES = 3
};

/* "cuda/ccudart.pxd":1383
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLImageKHR             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef void *__pyx_t_4cuda_7ccudart_EGLImageKHR;

/* "cuda/ccudart.pxd":1388
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLStreamKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int EGLint
 */
typedef void *__pyx_t_4cuda_7ccudart_EGLStreamKHR;

/* "cuda/ccudart.pxd":1395
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLSyncKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpDevice
 */
typedef void *__pyx_t_4cuda_7ccudart_EGLSyncKHR;

/* "cuda/ccudart.pxd":1405
 * ctypedef uint32_t VdpOutputSurface
 * 
 * ctypedef cudaLaunchAttributeID cudaStreamAttrID             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeID cudaKernelNodeAttrID
 */
typedef enum cudaLaunchAttributeID __pyx_t_4cuda_7ccudart_cudaStreamAttrID;

/* "cuda/ccudart.pxd":1407
 * ctypedef cudaLaunchAttributeID cudaStreamAttrID
 * 
 * ctypedef cudaLaunchAttributeID cudaKernelNodeAttrID             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeValue cudaStreamAttrValue
 */
typedef enum cudaLaunchAttributeID __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID;

/* "cuda/ccudart.pxd":1409
 * ctypedef cudaLaunchAttributeID cudaKernelNodeAttrID
 * 
 * ctypedef cudaLaunchAttributeValue cudaStreamAttrValue             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeValue cudaKernelNodeAttrValue
 */
typedef union cudaLaunchAttributeValue __pyx_t_4cuda_7ccudart_cudaStreamAttrValue;

/* "cuda/ccudart.pxd":1411
 * ctypedef cudaLaunchAttributeValue cudaStreamAttrValue
 * 
 * ctypedef cudaLaunchAttributeValue cudaKernelNodeAttrValue             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglFrameType_enum:
 */
typedef union cudaLaunchAttributeValue __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue;

/* "cuda/ccudart.pxd":1417
 *     cudaEglFrameTypePitch = 1
 * 
 * ctypedef cudaEglFrameType_enum cudaEglFrameType             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglResourceLocationFlags_enum:
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaEglFrameType_enum __pyx_t_4cuda_7ccudart_cudaEglFrameType;

/* "cuda/ccudart.pxd":1423
 *     cudaEglResourceLocationVidmem = 1
 * 
 * ctypedef cudaEglResourceLocationFlags_enum cudaEglResourceLocationFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglColorFormat_enum:
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaEglResourceLocationFlags_enum __pyx_t_4cuda_7ccudart_cudaEglResourceLocationFlags;

/* "cuda/ccudart.pxd":1537
 *     cudaEglColorFormatY12V12U12_444SemiPlanar_709_ER = 113
 * 
 * ctypedef cudaEglColorFormat_enum cudaEglColorFormat             # <<<<<<<<<<<<<<
 * 
 * cdef struct cudaEglPlaneDesc_st:
 */
typedef enum __pyx_t_4cuda_7ccudart_cudaEglColorFormat_enum __pyx_t_4cuda_7ccudart_cudaEglColorFormat;

/* "cuda/ccudart.pxd":1539
 * ctypedef cudaEglColorFormat_enum cudaEglColorFormat
 * 
 * cdef struct cudaEglPlaneDesc_st:             # <<<<<<<<<<<<<<
 *     unsigned int width
 *     unsigned int height
 */
struct __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc_st {
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int pitch;
  unsigned int numChannels;
  struct cudaChannelFormatDesc channelDesc;
  unsigned int reserved[4];
};

/* "cuda/ccudart.pxd":1548
 *     unsigned int reserved[4]
 * 
 * ctypedef cudaEglPlaneDesc_st cudaEglPlaneDesc             # <<<<<<<<<<<<<<
 * 
 * cdef union anon_union8:
 */
typedef struct __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc_st __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc;

/* "cuda/ccudart.pxd":1550
 * ctypedef cudaEglPlaneDesc_st cudaEglPlaneDesc
 * 
 * cdef union anon_union8:             # <<<<<<<<<<<<<<
 *     cudaArray_t pArray[3]
 *     cudaPitchedPtr pPitch[3]
 */
union __pyx_t_4cuda_7ccudart_anon_union8 {
  cudaArray_t pArray[3];
  struct cudaPitchedPtr pPitch[3];
};

/* "cuda/ccudart.pxd":1554
 *     cudaPitchedPtr pPitch[3]
 * 
 * cdef struct cudaEglFrame_st:             # <<<<<<<<<<<<<<
 *     anon_union8 frame
 *     cudaEglPlaneDesc planeDesc[3]
 */
struct __pyx_t_4cuda_7ccudart_cudaEglFrame_st {
  union __pyx_t_4cuda_7ccudart_anon_union8 frame;
  __pyx_t_4cuda_7ccudart_cudaEglPlaneDesc planeDesc[3];
  unsigned int planeCount;
  __pyx_t_4cuda_7ccudart_cudaEglFrameType frameType;
  __pyx_t_4cuda_7ccudart_cudaEglColorFormat eglColorFormat;
};

/* "cuda/ccudart.pxd":1561
 *     cudaEglColorFormat eglColorFormat
 * 
 * ctypedef cudaEglFrame_st cudaEglFrame             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct __pyx_t_4cuda_7ccudart_cudaEglFrame_st __pyx_t_4cuda_7ccudart_cudaEglFrame;

/* "cuda/ccudart.pxd":1566
 *     cdef struct CUeglStreamConnection_st:
 *         pass
 * ctypedef CUeglStreamConnection_st* cudaEglStreamConnection             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaGLDeviceList:
 */
typedef struct CUeglStreamConnection_st *__pyx_t_4cuda_7ccudart_cudaEglStreamConnection;

/* "cuda/_lib/ccudart/utils.pxd":21
 *     cudaDeviceProp deviceProperties
 * 
 * cdef class cudaPythonGlobal:             # <<<<<<<<<<<<<<
 *     cdef bint _lazyInitDriver
 *     cdef int _numDevices
 */
struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *__pyx_vtab;
  int _lazyInitDriver;
  int _numDevices;
  struct __pyx_t_4cuda_4_lib_7ccudart_5utils_cudaPythonDevice *_deviceList;
  cudaError_t _lastError;
  int _CUDART_VERSION;
};



struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal {
  cudaError_t (*lazyInitDriver)(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *);
  cudaError_t (*lazyInitContextState)(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *);
  struct __pyx_t_4cuda_4_lib_7ccudart_5utils_cudaPythonDevice *(*getDevice)(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *, int);
  struct __pyx_t_4cuda_4_lib_7ccudart_5utils_cudaPythonDevice *(*getDeviceFromDriver)(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *, CUdevice);
  struct __pyx_t_4cuda_4_lib_7ccudart_5utils_cudaPythonDevice *(*getDeviceFromPrimaryCtx)(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *, CUcontext);
};
static struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *__pyx_vtabptr_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #if PY_VERSION_HEX >= 0x030C00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     ((!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #endif
  #define __Pyx_EnterTracing(tstate)  PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate)  PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = __Pyx_PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              __Pyx_PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* ErrOccurredWithGIL.proto */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_3
#define __PYX_HAVE_RT_ImportType_proto_3_0_3
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_3(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_3(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_3 {
   __Pyx_ImportType_CheckSize_Error_3_0_3 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_3 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_3 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_3(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_3 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version();
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_3(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.stdint" */

/* Module declarations from "cuda.ccuda" */

/* Module declarations from "cuda._cuda.ccuda" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libcpp" */

/* Module declarations from "cuda._lib.ccudart.ccudart" */
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy)(void *, void const *, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreate)(cudaStream_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreate)(cudaEvent_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventQuery)(cudaEvent_t); /*proto*/
static struct cudaChannelFormatDesc (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateChannelDesc)(int, int, int, int, enum cudaChannelFormatKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDriverGetVersion)(int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaRuntimeGetVersion)(int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetTexture1DLinearMaxWidth)(size_t *, struct cudaChannelFormatDesc const *, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocHost)(void **, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocPitch)(void **, size_t *, size_t, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocMipmappedArray)(cudaMipmappedArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2D)(void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DAsync)(void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyAsync)(void *, void const *, size_t, enum cudaMemcpyKind, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemcpy3DParms const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode1D)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *, void const *, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams1D)(cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, struct cudaMemcpy3DParms const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams1D)(cudaGraphExec_t, cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDriverEntryPoint)(char const *, void **, unsigned PY_LONG_LONG, enum cudaDriverEntryPointQueryResult *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemsetNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemsetParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemsetNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, struct cudaMemsetParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams)(cudaGraphNode_t, struct cudaMemcpy3DParms const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeGetParams)(cudaGraphNode_t, struct cudaMemcpy3DParms *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncGetAttributes)(struct cudaFuncAttributes *, void const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocArray)(cudaArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3D)(struct cudaPitchedPtr *, struct cudaExtent); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3DArray)(cudaArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int); /*proto*/
static char const *(*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetErrorString)(cudaError_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAddCallback)(cudaStream_t, cudaStreamCallback_t, void *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v2)(cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalSemaphore)(cudaExternalSemaphore_t *, struct cudaExternalSemaphoreHandleDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSignalExternalSemaphoresAsync_v2)(cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreSignalParams const *, unsigned int, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaWaitExternalSemaphoresAsync_v2)(cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreWaitParams const *, unsigned int, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetInfo)(struct cudaChannelFormatDesc *, struct cudaExtent *, unsigned int *, cudaArray_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArray)(cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArray)(void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DArrayToArray)(cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArrayAsync)(cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArrayAsync)(void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3D)(struct cudaPitchedPtr, int, struct cudaExtent); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3DAsync)(struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArray)(cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArray)(void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArrayAsync)(cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArrayAsync)(void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPointerGetAttributes)(struct cudaPointerAttributes *, void const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceFlags)(unsigned int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3D)(struct cudaMemcpy3DParms const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DAsync)(struct cudaMemcpy3DParms const *, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAccess)(cudaMemPool_t, struct cudaMemAccessDesc const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceReset)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetLastError)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPeekAtLastError)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDevice)(int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDevice)(int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceProperties_v2)(struct cudaDeviceProp *, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaChooseDevice)(int *, struct cudaDeviceProp const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyArrayToArray)(cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetChannelDesc)(struct cudaChannelFormatDesc *, cudaArray_const_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateTextureObject)(cudaTextureObject_t *, struct cudaResourceDesc const *, struct cudaTextureDesc const *, struct cudaResourceViewDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectTextureDesc)(struct cudaTextureDesc *, cudaTextureObject_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceViewDesc)(struct cudaResourceViewDesc *, cudaTextureObject_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetExportTable)(void const **, cudaUUID_t const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeer)(struct cudaMemcpy3DPeerParms const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeerAsync)(struct cudaMemcpy3DPeerParms const *, cudaStream_t); /*proto*/
static struct cudaPitchedPtr (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPitchedPtr)(void *, size_t, size_t, size_t); /*proto*/
static struct cudaPos (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPos)(size_t, size_t, size_t); /*proto*/
static struct cudaExtent (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaExtent)(size_t, size_t, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDeviceFlags)(unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemAllocNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemAllocNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemAllocNodeGetParams)(cudaGraphNode_t, struct cudaMemAllocNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemFreeNodeGetParams)(cudaGraphNode_t, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise)(void const *, size_t, enum cudaMemoryAdvise, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttribute)(void *, size_t, enum cudaMemRangeAttribute, void const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttributes)(void **, size_t *, enum cudaMemRangeAttribute *, size_t, void const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceCount)(int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetAttribute)(int *, enum cudaDeviceAttr, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetSharedMemConfig)(enum cudaSharedMemConfig); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetByPCIBusId)(int *, char const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetPCIBusId)(char *, int, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetP2PAttribute)(int *, enum cudaDeviceP2PAttr, int, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetSparseProperties)(struct cudaArraySparseProperties *, cudaArray_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetSparseProperties)(struct cudaArraySparseProperties *, cudaMipmappedArray_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceCanAccessPeer)(int *, int, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeer)(void *, int, void const *, int, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeerAsync)(void *, int, void const *, int, size_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceEnablePeerAccess)(int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceDisablePeerAccess)(int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedMipmappedArray)(cudaMipmappedArray_t *, cudaExternalMemory_t, struct cudaExternalMemoryMipmappedArrayDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetSurfaceObjectResourceDesc)(struct cudaResourceDesc *, cudaSurfaceObject_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetParams)(cudaGraphNode_t, struct cudaKernelNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedBuffer)(void **, cudaExternalMemory_t, struct cudaExternalMemoryBufferDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalMemory)(cudaExternalMemory_t *, struct cudaExternalMemoryHandleDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateSurfaceObject)(cudaSurfaceObject_t *, struct cudaResourceDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceDesc)(struct cudaResourceDesc *, cudaTextureObject_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsEGLRegisterImage)(cudaGraphicsResource_t *, __pyx_t_4cuda_7ccudart_EGLImageKHR, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerPresentFrame)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame, cudaStream_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerReturnFrame)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame *, cudaStream_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedEglFrame)(__pyx_t_4cuda_7ccudart_cudaEglFrame *, cudaGraphicsResource_t, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUSetVDPAUDevice)(int, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetMemoryRequirements)(struct cudaArrayMemoryRequirements *, cudaArray_t, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetMemoryRequirements)(struct cudaArrayMemoryRequirements *, cudaMipmappedArray_t, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetAttribute)(cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamAttrID, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamSetAttribute)(cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamAttrID, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetAttribute)(cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeSetAttribute)(cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUGetDevice)(int *, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsVDPAURegisterVideoSurface)(struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpVideoSurface, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsVDPAURegisterOutputSurface)(struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpOutputSurface, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGLGetDevices)(unsigned int *, int *, unsigned int, enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsGLRegisterImage)(struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, __pyx_t_4cuda_7ccudart_GLenum, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsGLRegisterBuffer)(struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSynchronize)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetLimit)(enum cudaLimit, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetLimit)(size_t *, enum cudaLimit); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetCacheConfig)(enum cudaFuncCache *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetStreamPriorityRange)(int *, int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetCacheConfig)(enum cudaFuncCache); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetSharedMemConfig)(enum cudaSharedMemConfig *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcGetEventHandle)(cudaIpcEventHandle_t *, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcOpenEventHandle)(cudaEvent_t *, cudaIpcEventHandle_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcGetMemHandle)(cudaIpcMemHandle_t *, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcOpenMemHandle)(void **, cudaIpcMemHandle_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcCloseMemHandle)(void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceFlushGPUDirectRDMAWrites)(enum cudaFlushGPUDirectRDMAWritesTarget, enum cudaFlushGPUDirectRDMAWritesScope); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetDefaultMemPool)(cudaMemPool_t *, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetMemPool)(int, cudaMemPool_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetMemPool)(cudaMemPool_t *, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetNvSciSyncAttributes)(void *, int, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreateWithFlags)(cudaStream_t *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreateWithPriority)(cudaStream_t *, unsigned int, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetPriority)(cudaStream_t, int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetFlags)(cudaStream_t, unsigned int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCtxResetPersistingL2Cache)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCopyAttributes)(cudaStream_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamDestroy)(cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamWaitEvent)(cudaStream_t, cudaEvent_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamSynchronize)(cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamQuery)(cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAttachMemAsync)(cudaStream_t, void *, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamBeginCapture)(cudaStream_t, enum cudaStreamCaptureMode); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamBeginCaptureToGraph)(cudaStream_t, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, enum cudaStreamCaptureMode); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaThreadExchangeStreamCaptureMode)(enum cudaStreamCaptureMode *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamEndCapture)(cudaStream_t, cudaGraph_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamIsCapturing)(cudaStream_t, enum cudaStreamCaptureStatus *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamUpdateCaptureDependencies)(cudaStream_t, cudaGraphNode_t *, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreateWithFlags)(cudaEvent_t *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventRecord)(cudaEvent_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventRecordWithFlags)(cudaEvent_t, cudaStream_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventSynchronize)(cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventDestroy)(cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventElapsedTime)(float *, cudaEvent_t, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyExternalMemory)(cudaExternalMemory_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyExternalSemaphore)(cudaExternalSemaphore_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetCacheConfig)(void const *, enum cudaFuncCache); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetSharedMemConfig)(void const *, enum cudaSharedMemConfig); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetAttribute)(void const *, enum cudaFuncAttribute, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaLaunchHostFunc)(cudaStream_t, cudaHostFn_t, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyMaxActiveBlocksPerMultiprocessor)(int *, void const *, int, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyAvailableDynamicSMemPerBlock)(size_t *, void const *, int, int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags)(int *, void const *, int, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocManaged)(void **, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc)(void **, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFree)(void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeHost)(void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeArray)(cudaArray_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeMipmappedArray)(cudaMipmappedArray_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostAlloc)(void **, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostRegister)(void *, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostUnregister)(void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostGetDevicePointer)(void **, void *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostGetFlags)(unsigned int *, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetMipmappedArrayLevel)(cudaArray_t *, cudaMipmappedArray_const_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemGetInfo)(size_t *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetPlane)(cudaArray_t *, cudaArray_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset)(void *, int, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset2D)(void *, size_t, int, size_t, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemsetAsync)(void *, int, size_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset2DAsync)(void *, size_t, int, size_t, size_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPrefetchAsync)(void const *, size_t, int, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocAsync)(void **, size_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeAsync)(void *, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolTrimTo)(cudaMemPool_t, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAttribute)(cudaMemPool_t, enum cudaMemPoolAttr, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolGetAttribute)(cudaMemPool_t, enum cudaMemPoolAttr, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolGetAccess)(enum cudaMemAccessFlags *, cudaMemPool_t, struct cudaMemLocation *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolCreate)(cudaMemPool_t *, struct cudaMemPoolProps const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolDestroy)(cudaMemPool_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocFromPoolAsync)(void **, size_t, cudaMemPool_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolExportToShareableHandle)(void *, cudaMemPool_t, enum cudaMemAllocationHandleType, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolImportFromShareableHandle)(cudaMemPool_t *, void *, enum cudaMemAllocationHandleType, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolExportPointer)(struct cudaMemPoolPtrExportData *, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolImportPointer)(void **, cudaMemPool_t, struct cudaMemPoolPtrExportData *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsUnregisterResource)(cudaGraphicsResource_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceSetMapFlags)(cudaGraphicsResource_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsMapResources)(int, cudaGraphicsResource_t *, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsUnmapResources)(int, cudaGraphicsResource_t *, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedPointer)(void **, size_t *, cudaGraphicsResource_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsSubResourceGetMappedArray)(cudaArray_t *, cudaGraphicsResource_t, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedMipmappedArray)(cudaMipmappedArray_t *, cudaGraphicsResource_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyTextureObject)(cudaTextureObject_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroySurfaceObject)(cudaSurfaceObject_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphCreate)(cudaGraph_t *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddKernelNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaKernelNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeSetParams)(cudaGraphNode_t, struct cudaKernelNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeCopyAttributes)(cudaGraphNode_t, cudaGraphNode_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemsetNodeGetParams)(cudaGraphNode_t, struct cudaMemsetParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemsetNodeSetParams)(cudaGraphNode_t, struct cudaMemsetParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddHostNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaHostNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphHostNodeGetParams)(cudaGraphNode_t, struct cudaHostNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphHostNodeSetParams)(cudaGraphNode_t, struct cudaHostNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddChildGraphNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaGraph_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphChildGraphNodeGetGraph)(cudaGraphNode_t, cudaGraph_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEmptyNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEventRecordNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventRecordNodeGetEvent)(cudaGraphNode_t, cudaEvent_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventRecordNodeSetEvent)(cudaGraphNode_t, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEventWaitNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventWaitNodeGetEvent)(cudaGraphNode_t, cudaEvent_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventWaitNodeSetEvent)(cudaGraphNode_t, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddExternalSemaphoresSignalNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreSignalNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresSignalNodeGetParams)(cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresSignalNodeSetParams)(cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddExternalSemaphoresWaitNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreWaitNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresWaitNodeGetParams)(cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresWaitNodeSetParams)(cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemFreeNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGraphMemTrim)(int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetGraphMemAttribute)(int, enum cudaGraphMemAttributeType, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetGraphMemAttribute)(int, enum cudaGraphMemAttributeType, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphClone)(cudaGraph_t *, cudaGraph_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeFindInClone)(cudaGraphNode_t *, cudaGraphNode_t, cudaGraph_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetType)(cudaGraphNode_t, enum cudaGraphNodeType *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetNodes)(cudaGraph_t, cudaGraphNode_t *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetRootNodes)(cudaGraph_t, cudaGraphNode_t *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetEdges)(cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependencies)(cudaGraphNode_t, cudaGraphNode_t *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependentNodes)(cudaGraphNode_t, cudaGraphNode_t *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddDependencies)(cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRemoveDependencies)(cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDestroyNode)(cudaGraphNode_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiate)(cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiateWithFlags)(cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecKernelNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, struct cudaKernelNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecHostNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, struct cudaHostNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecChildGraphNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, cudaGraph_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecEventRecordNodeSetEvent)(cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecEventWaitNodeSetEvent)(cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecExternalSemaphoresSignalNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecExternalSemaphoresWaitNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeSetEnabled)(cudaGraphExec_t, cudaGraphNode_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetEnabled)(cudaGraphExec_t, cudaGraphNode_t, unsigned int *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecUpdate)(cudaGraphExec_t, cudaGraph_t, cudaGraphExecUpdateResultInfo *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphUpload)(cudaGraphExec_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphLaunch)(cudaGraphExec_t, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecDestroy)(cudaGraphExec_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDestroy)(cudaGraph_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDebugDotPrint)(cudaGraph_t, char const *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectCreate)(cudaUserObject_t *, void *, cudaHostFn_t, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectRetain)(cudaUserObject_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectRelease)(cudaUserObject_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRetainUserObject)(cudaGraph_t, cudaUserObject_t, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphReleaseUserObject)(cudaGraph_t, cudaUserObject_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerStart)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerStop)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerConnect)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerConnectWithFlags)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerDisconnect)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerAcquireFrame)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, cudaGraphicsResource_t *, cudaStream_t *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerReleaseFrame)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, cudaGraphicsResource_t, cudaStream_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerConnect)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, __pyx_t_4cuda_7ccudart_EGLint, __pyx_t_4cuda_7ccudart_EGLint); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerDisconnect)(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreateFromEGLSync)(cudaEvent_t *, __pyx_t_4cuda_7ccudart_EGLSyncKHR, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaInitDevice)(int, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetId)(cudaStream_t, unsigned PY_LONG_LONG *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiateWithParams)(cudaGraphExec_t *, cudaGraph_t, cudaGraphInstantiateParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecGetFlags)(cudaGraphExec_t, unsigned PY_LONG_LONG *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetKernel)(cudaKernel_t *, void const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddNode)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaGraphNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeSetParams)(cudaGraphNode_t, struct cudaGraphNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecNodeSetParams)(cudaGraphExec_t, cudaGraphNode_t, struct cudaGraphNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPrefetchAsync_v2)(void const *, size_t, struct cudaMemLocation, unsigned int, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise_v2)(void const *, size_t, enum cudaMemoryAdvise, struct cudaMemLocation); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphConditionalHandleCreate)(cudaGraphConditionalHandle *, cudaGraph_t, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v3)(cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, cudaGraphEdgeData const **, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamUpdateCaptureDependencies_v2)(cudaStream_t, cudaGraphNode_t *, cudaGraphEdgeData const *, size_t, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetEdges_v2)(cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependencies_v2)(cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependentNodes_v2)(cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddDependencies_v2)(cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRemoveDependencies_v2)(cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddNode_v2)(cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, struct cudaGraphNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_4_lib_7ccudart_7ccudart__getLocalRuntimeVersion)(int *); /*proto*/

/* Module declarations from "cuda._lib.ccudart.utils" */
static struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *(*__pyx_f_4cuda_4_lib_7ccudart_5utils_globalGetInstance)(void); /*proto*/

/* Module declarations from "libc" */

/* Module declarations from "cuda.ccudart" */
static struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *__pyx_v_4cuda_7ccudart_m_global = 0;
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "cuda.ccudart"
extern int __pyx_module_is_main_cuda__ccudart;
int __pyx_module_is_main_cuda__ccudart = 0;

/* Implementation of "cuda.ccudart" */
/* #### Code section: global_var ### */
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "?";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
/* #### Code section: decls ### */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_n_s_;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_test;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal);
  Py_CLEAR(clear_module_state->__pyx_n_s_);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal);
  Py_VISIT(traverse_module_state->__pyx_n_s_);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_n_s_ __pyx_mstate_global->__pyx_n_s_
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
/* #### Code section: module_code ### */

/* "cuda/ccudart.pyx":17
 * cdef cudaPythonGlobal m_global = globalGetInstance()
 * 
 * cdef cudaError_t cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceReset()
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceReset(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceReset", __pyx_f[0], 17, 1, __PYX_ERR(0, 17, __pyx_L1_error));

  /* "cuda/ccudart.pyx":18
 * 
 * cdef cudaError_t cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceReset()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceReset(); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":17
 * cdef cudaPythonGlobal m_global = globalGetInstance()
 * 
 * cdef cudaError_t cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceReset()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceReset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":20
 *     return _cudaDeviceReset()
 * 
 * cdef cudaError_t cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSynchronize()
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSynchronize(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceSynchronize", __pyx_f[0], 20, 1, __PYX_ERR(0, 20, __pyx_L1_error));

  /* "cuda/ccudart.pyx":21
 * 
 * cdef cudaError_t cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceSynchronize()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSynchronize(); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":20
 *     return _cudaDeviceReset()
 * 
 * cdef cudaError_t cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSynchronize()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":23
 *     return _cudaDeviceSynchronize()
 * 
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetLimit(limit, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetLimit(enum cudaLimit __pyx_v_limit, size_t __pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceSetLimit", __pyx_f[0], 23, 1, __PYX_ERR(0, 23, __pyx_L1_error));

  /* "cuda/ccudart.pyx":24
 * 
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceSetLimit(limit, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetLimit(__pyx_v_limit, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":23
 *     return _cudaDeviceSynchronize()
 * 
 * cdef cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetLimit(limit, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":26
 *     return _cudaDeviceSetLimit(limit, value)
 * 
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetLimit(pValue, limit)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetLimit(size_t *__pyx_v_pValue, enum cudaLimit __pyx_v_limit) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetLimit", __pyx_f[0], 26, 1, __PYX_ERR(0, 26, __pyx_L1_error));

  /* "cuda/ccudart.pyx":27
 * 
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetLimit(pValue, limit)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetLimit(__pyx_v_pValue, __pyx_v_limit); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 27, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":26
 *     return _cudaDeviceSetLimit(limit, value)
 * 
 * cdef cudaError_t cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetLimit(pValue, limit)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":29
 *     return _cudaDeviceGetLimit(pValue, limit)
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetTexture1DLinearMaxWidth(size_t *__pyx_v_maxWidthInElements, struct cudaChannelFormatDesc const *__pyx_v_fmtDesc, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetTexture1DLinearMaxWidth", __pyx_f[0], 29, 1, __PYX_ERR(0, 29, __pyx_L1_error));

  /* "cuda/ccudart.pyx":30
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetTexture1DLinearMaxWidth(__pyx_v_maxWidthInElements, __pyx_v_fmtDesc, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 30, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":29
 *     return _cudaDeviceGetLimit(pValue, limit)
 * 
 * cdef cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetTexture1DLinearMaxWidth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":32
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetCacheConfig(pCacheConfig)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetCacheConfig(enum cudaFuncCache *__pyx_v_pCacheConfig) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetCacheConfig", __pyx_f[0], 32, 1, __PYX_ERR(0, 32, __pyx_L1_error));

  /* "cuda/ccudart.pyx":33
 * 
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetCacheConfig(pCacheConfig)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetCacheConfig(__pyx_v_pCacheConfig); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 33, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":32
 *     return _cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmtDesc, device)
 * 
 * cdef cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetCacheConfig(pCacheConfig)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":35
 *     return _cudaDeviceGetCacheConfig(pCacheConfig)
 * 
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetStreamPriorityRange(leastPriority, greatestPriority)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetStreamPriorityRange(int *__pyx_v_leastPriority, int *__pyx_v_greatestPriority) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetStreamPriorityRange", __pyx_f[0], 35, 1, __PYX_ERR(0, 35, __pyx_L1_error));

  /* "cuda/ccudart.pyx":36
 * 
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetStreamPriorityRange(leastPriority, greatestPriority)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetStreamPriorityRange(__pyx_v_leastPriority, __pyx_v_greatestPriority); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":35
 *     return _cudaDeviceGetCacheConfig(pCacheConfig)
 * 
 * cdef cudaError_t cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetStreamPriorityRange(leastPriority, greatestPriority)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetStreamPriorityRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":38
 *     return _cudaDeviceGetStreamPriorityRange(leastPriority, greatestPriority)
 * 
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetCacheConfig(cacheConfig)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetCacheConfig(enum cudaFuncCache __pyx_v_cacheConfig) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceSetCacheConfig", __pyx_f[0], 38, 1, __PYX_ERR(0, 38, __pyx_L1_error));

  /* "cuda/ccudart.pyx":39
 * 
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceSetCacheConfig(cacheConfig)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetCacheConfig(__pyx_v_cacheConfig); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":38
 *     return _cudaDeviceGetStreamPriorityRange(leastPriority, greatestPriority)
 * 
 * cdef cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetCacheConfig(cacheConfig)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":41
 *     return _cudaDeviceSetCacheConfig(cacheConfig)
 * 
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetSharedMemConfig(pConfig)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *__pyx_v_pConfig) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetSharedMemConfig", __pyx_f[0], 41, 1, __PYX_ERR(0, 41, __pyx_L1_error));

  /* "cuda/ccudart.pyx":42
 * 
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetSharedMemConfig(pConfig)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetSharedMemConfig(__pyx_v_pConfig); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":41
 *     return _cudaDeviceSetCacheConfig(cacheConfig)
 * 
 * cdef cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetSharedMemConfig(pConfig)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":44
 *     return _cudaDeviceGetSharedMemConfig(pConfig)
 * 
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetSharedMemConfig(config)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig __pyx_v_config) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceSetSharedMemConfig", __pyx_f[0], 44, 1, __PYX_ERR(0, 44, __pyx_L1_error));

  /* "cuda/ccudart.pyx":45
 * 
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceSetSharedMemConfig(config)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetSharedMemConfig(__pyx_v_config); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":44
 *     return _cudaDeviceGetSharedMemConfig(pConfig)
 * 
 * cdef cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetSharedMemConfig(config)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":47
 *     return _cudaDeviceSetSharedMemConfig(config)
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetByPCIBusId(int *__pyx_v_device, char const *__pyx_v_pciBusId) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetByPCIBusId", __pyx_f[0], 47, 1, __PYX_ERR(0, 47, __pyx_L1_error));

  /* "cuda/ccudart.pyx":48
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetByPCIBusId(__pyx_v_device, __pyx_v_pciBusId); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":47
 *     return _cudaDeviceSetSharedMemConfig(config)
 * 
 * cdef cudaError_t cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetByPCIBusId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":50
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetPCIBusId(char *__pyx_v_pciBusId, int __pyx_v_length, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetPCIBusId", __pyx_f[0], 50, 1, __PYX_ERR(0, 50, __pyx_L1_error));

  /* "cuda/ccudart.pyx":51
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetPCIBusId(__pyx_v_pciBusId, __pyx_v_length, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":50
 *     return _cudaDeviceGetByPCIBusId(device, pciBusId)
 * 
 * cdef cudaError_t cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetPCIBusId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":53
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcGetEventHandle(handle, event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcGetEventHandle(cudaIpcEventHandle_t *__pyx_v_handle, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaIpcGetEventHandle", __pyx_f[0], 53, 1, __PYX_ERR(0, 53, __pyx_L1_error));

  /* "cuda/ccudart.pyx":54
 * 
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaIpcGetEventHandle(handle, event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcGetEventHandle(__pyx_v_handle, __pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":53
 *     return _cudaDeviceGetPCIBusId(pciBusId, length, device)
 * 
 * cdef cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcGetEventHandle(handle, event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaIpcGetEventHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":56
 *     return _cudaIpcGetEventHandle(handle, event)
 * 
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcOpenEventHandle(event, handle)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcOpenEventHandle(cudaEvent_t *__pyx_v_event, cudaIpcEventHandle_t __pyx_v_handle) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaIpcOpenEventHandle", __pyx_f[0], 56, 1, __PYX_ERR(0, 56, __pyx_L1_error));

  /* "cuda/ccudart.pyx":57
 * 
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaIpcOpenEventHandle(event, handle)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcOpenEventHandle(__pyx_v_event, __pyx_v_handle); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":56
 *     return _cudaIpcGetEventHandle(handle, event)
 * 
 * cdef cudaError_t cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcOpenEventHandle(event, handle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaIpcOpenEventHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":59
 *     return _cudaIpcOpenEventHandle(event, handle)
 * 
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcGetMemHandle(handle, devPtr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcGetMemHandle(cudaIpcMemHandle_t *__pyx_v_handle, void *__pyx_v_devPtr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaIpcGetMemHandle", __pyx_f[0], 59, 1, __PYX_ERR(0, 59, __pyx_L1_error));

  /* "cuda/ccudart.pyx":60
 * 
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaIpcGetMemHandle(handle, devPtr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcGetMemHandle(__pyx_v_handle, __pyx_v_devPtr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 60, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":59
 *     return _cudaIpcOpenEventHandle(event, handle)
 * 
 * cdef cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcGetMemHandle(handle, devPtr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaIpcGetMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":62
 *     return _cudaIpcGetMemHandle(handle, devPtr)
 * 
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcOpenMemHandle(devPtr, handle, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcOpenMemHandle(void **__pyx_v_devPtr, cudaIpcMemHandle_t __pyx_v_handle, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaIpcOpenMemHandle", __pyx_f[0], 62, 1, __PYX_ERR(0, 62, __pyx_L1_error));

  /* "cuda/ccudart.pyx":63
 * 
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaIpcOpenMemHandle(devPtr, handle, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcOpenMemHandle(__pyx_v_devPtr, __pyx_v_handle, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":62
 *     return _cudaIpcGetMemHandle(handle, devPtr)
 * 
 * cdef cudaError_t cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcOpenMemHandle(devPtr, handle, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaIpcOpenMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":65
 *     return _cudaIpcOpenMemHandle(devPtr, handle, flags)
 * 
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcCloseMemHandle(devPtr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaIpcCloseMemHandle(void *__pyx_v_devPtr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaIpcCloseMemHandle", __pyx_f[0], 65, 1, __PYX_ERR(0, 65, __pyx_L1_error));

  /* "cuda/ccudart.pyx":66
 * 
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaIpcCloseMemHandle(devPtr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcCloseMemHandle(__pyx_v_devPtr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":65
 *     return _cudaIpcOpenMemHandle(devPtr, handle, flags)
 * 
 * cdef cudaError_t cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaIpcCloseMemHandle(devPtr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaIpcCloseMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":68
 *     return _cudaIpcCloseMemHandle(devPtr)
 * 
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceFlushGPUDirectRDMAWrites(target, scope)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget __pyx_v_target, enum cudaFlushGPUDirectRDMAWritesScope __pyx_v_scope) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceFlushGPUDirectRDMAWrites", __pyx_f[0], 68, 1, __PYX_ERR(0, 68, __pyx_L1_error));

  /* "cuda/ccudart.pyx":69
 * 
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceFlushGPUDirectRDMAWrites(target, scope)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceFlushGPUDirectRDMAWrites(__pyx_v_target, __pyx_v_scope); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":68
 *     return _cudaIpcCloseMemHandle(devPtr)
 * 
 * cdef cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceFlushGPUDirectRDMAWrites(target, scope)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceFlushGPUDirectRDMAWrites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":71
 *     return _cudaDeviceFlushGPUDirectRDMAWrites(target, scope)
 * 
 * cdef cudaError_t cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetLastError()
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetLastError(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetLastError", __pyx_f[0], 71, 1, __PYX_ERR(0, 71, __pyx_L1_error));

  /* "cuda/ccudart.pyx":72
 * 
 * cdef cudaError_t cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetLastError()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaPeekAtLastError() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetLastError(); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":71
 *     return _cudaDeviceFlushGPUDirectRDMAWrites(target, scope)
 * 
 * cdef cudaError_t cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetLastError()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetLastError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":74
 *     return _cudaGetLastError()
 * 
 * cdef cudaError_t cudaPeekAtLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaPeekAtLastError()
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaPeekAtLastError(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaPeekAtLastError", __pyx_f[0], 74, 1, __PYX_ERR(0, 74, __pyx_L1_error));

  /* "cuda/ccudart.pyx":75
 * 
 * cdef cudaError_t cudaPeekAtLastError() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaPeekAtLastError()             # <<<<<<<<<<<<<<
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) except ?NULL nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPeekAtLastError(); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":74
 *     return _cudaGetLastError()
 * 
 * cdef cudaError_t cudaPeekAtLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaPeekAtLastError()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaPeekAtLastError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":77
 *     return _cudaPeekAtLastError()
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) except ?NULL nogil:             # <<<<<<<<<<<<<<
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:
 */

static char const *__pyx_f_4cuda_7ccudart_cudaGetErrorName(cudaError_t __pyx_v_error) {
  char const *__pyx_v_pStr;
  char const *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetErrorName", __pyx_f[0], 77, 1, __PYX_ERR(0, 77, __pyx_L1_error));

  /* "cuda/ccudart.pyx":78
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) except ?NULL nogil:
 *     cdef const char* pStr = "unrecognized error code"             # <<<<<<<<<<<<<<
 *     if error == cudaSuccess:
 *         return "cudaSuccess"
 */
  __pyx_v_pStr = ((char const *)"unrecognized error code");

  /* "cuda/ccudart.pyx":79
 * cdef const char* cudaGetErrorName(cudaError_t error) except ?NULL nogil:
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:             # <<<<<<<<<<<<<<
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:
 */
  __pyx_t_1 = (__pyx_v_error == cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":80
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:
 *         return "cudaSuccess"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"
 */
    __pyx_r = ((char const *)"cudaSuccess");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":79
 * cdef const char* cudaGetErrorName(cudaError_t error) except ?NULL nogil:
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:             # <<<<<<<<<<<<<<
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:
 */
  }

  /* "cuda/ccudart.pyx":81
 *     if error == cudaSuccess:
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidValue);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":82
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidValue");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":81
 *     if error == cudaSuccess:
 *         return "cudaSuccess"
 *     if error == cudaErrorInvalidValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:
 */
  }

  /* "cuda/ccudart.pyx":83
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMemoryAllocation);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":84
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"
 */
    __pyx_r = ((char const *)"cudaErrorMemoryAllocation");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":83
 *     if error == cudaErrorInvalidValue:
 *         return "cudaErrorInvalidValue"
 *     if error == cudaErrorMemoryAllocation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:
 */
  }

  /* "cuda/ccudart.pyx":85
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInitializationError);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":86
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"
 */
    __pyx_r = ((char const *)"cudaErrorInitializationError");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":85
 *     if error == cudaErrorMemoryAllocation:
 *         return "cudaErrorMemoryAllocation"
 *     if error == cudaErrorInitializationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:
 */
  }

  /* "cuda/ccudart.pyx":87
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorCudartUnloading);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":88
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"
 */
    __pyx_r = ((char const *)"cudaErrorCudartUnloading");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":87
 *     if error == cudaErrorInitializationError:
 *         return "cudaErrorInitializationError"
 *     if error == cudaErrorCudartUnloading:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:
 */
  }

  /* "cuda/ccudart.pyx":89
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorProfilerDisabled);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":90
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerDisabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":89
 *     if error == cudaErrorCudartUnloading:
 *         return "cudaErrorCudartUnloading"
 *     if error == cudaErrorProfilerDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:
 */
  }

  /* "cuda/ccudart.pyx":91
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorProfilerNotInitialized);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":92
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerNotInitialized");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":91
 *     if error == cudaErrorProfilerDisabled:
 *         return "cudaErrorProfilerDisabled"
 *     if error == cudaErrorProfilerNotInitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:
 */
  }

  /* "cuda/ccudart.pyx":93
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorProfilerAlreadyStarted);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":94
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerAlreadyStarted");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":93
 *     if error == cudaErrorProfilerNotInitialized:
 *         return "cudaErrorProfilerNotInitialized"
 *     if error == cudaErrorProfilerAlreadyStarted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:
 */
  }

  /* "cuda/ccudart.pyx":95
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorProfilerAlreadyStopped);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":96
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"
 */
    __pyx_r = ((char const *)"cudaErrorProfilerAlreadyStopped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":95
 *     if error == cudaErrorProfilerAlreadyStarted:
 *         return "cudaErrorProfilerAlreadyStarted"
 *     if error == cudaErrorProfilerAlreadyStopped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:
 */
  }

  /* "cuda/ccudart.pyx":97
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidConfiguration);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":98
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidConfiguration");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":97
 *     if error == cudaErrorProfilerAlreadyStopped:
 *         return "cudaErrorProfilerAlreadyStopped"
 *     if error == cudaErrorInvalidConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:
 */
  }

  /* "cuda/ccudart.pyx":99
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidPitchValue);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":100
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidPitchValue");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":99
 *     if error == cudaErrorInvalidConfiguration:
 *         return "cudaErrorInvalidConfiguration"
 *     if error == cudaErrorInvalidPitchValue:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:
 */
  }

  /* "cuda/ccudart.pyx":101
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidSymbol);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":102
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidSymbol");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":101
 *     if error == cudaErrorInvalidPitchValue:
 *         return "cudaErrorInvalidPitchValue"
 *     if error == cudaErrorInvalidSymbol:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:
 */
  }

  /* "cuda/ccudart.pyx":103
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidHostPointer);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":104
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidHostPointer");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":103
 *     if error == cudaErrorInvalidSymbol:
 *         return "cudaErrorInvalidSymbol"
 *     if error == cudaErrorInvalidHostPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:
 */
  }

  /* "cuda/ccudart.pyx":105
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidDevicePointer);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":106
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidDevicePointer");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":105
 *     if error == cudaErrorInvalidHostPointer:
 *         return "cudaErrorInvalidHostPointer"
 *     if error == cudaErrorInvalidDevicePointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:
 */
  }

  /* "cuda/ccudart.pyx":107
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidTexture);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":108
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidTexture");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":107
 *     if error == cudaErrorInvalidDevicePointer:
 *         return "cudaErrorInvalidDevicePointer"
 *     if error == cudaErrorInvalidTexture:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:
 */
  }

  /* "cuda/ccudart.pyx":109
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidTextureBinding);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":110
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidTextureBinding");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":109
 *     if error == cudaErrorInvalidTexture:
 *         return "cudaErrorInvalidTexture"
 *     if error == cudaErrorInvalidTextureBinding:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:
 */
  }

  /* "cuda/ccudart.pyx":111
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidChannelDescriptor);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":112
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidChannelDescriptor");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":111
 *     if error == cudaErrorInvalidTextureBinding:
 *         return "cudaErrorInvalidTextureBinding"
 *     if error == cudaErrorInvalidChannelDescriptor:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:
 */
  }

  /* "cuda/ccudart.pyx":113
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidMemcpyDirection);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":114
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidMemcpyDirection");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":113
 *     if error == cudaErrorInvalidChannelDescriptor:
 *         return "cudaErrorInvalidChannelDescriptor"
 *     if error == cudaErrorInvalidMemcpyDirection:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:
 */
  }

  /* "cuda/ccudart.pyx":115
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorAddressOfConstant);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":116
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"
 */
    __pyx_r = ((char const *)"cudaErrorAddressOfConstant");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":115
 *     if error == cudaErrorInvalidMemcpyDirection:
 *         return "cudaErrorInvalidMemcpyDirection"
 *     if error == cudaErrorAddressOfConstant:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:
 */
  }

  /* "cuda/ccudart.pyx":117
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorTextureFetchFailed);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":118
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"
 */
    __pyx_r = ((char const *)"cudaErrorTextureFetchFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":117
 *     if error == cudaErrorAddressOfConstant:
 *         return "cudaErrorAddressOfConstant"
 *     if error == cudaErrorTextureFetchFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:
 */
  }

  /* "cuda/ccudart.pyx":119
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorTextureNotBound);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":120
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"
 */
    __pyx_r = ((char const *)"cudaErrorTextureNotBound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":119
 *     if error == cudaErrorTextureFetchFailed:
 *         return "cudaErrorTextureFetchFailed"
 *     if error == cudaErrorTextureNotBound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:
 */
  }

  /* "cuda/ccudart.pyx":121
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSynchronizationError);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":122
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"
 */
    __pyx_r = ((char const *)"cudaErrorSynchronizationError");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":121
 *     if error == cudaErrorTextureNotBound:
 *         return "cudaErrorTextureNotBound"
 *     if error == cudaErrorSynchronizationError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:
 */
  }

  /* "cuda/ccudart.pyx":123
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidFilterSetting);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":124
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidFilterSetting");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":123
 *     if error == cudaErrorSynchronizationError:
 *         return "cudaErrorSynchronizationError"
 *     if error == cudaErrorInvalidFilterSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:
 */
  }

  /* "cuda/ccudart.pyx":125
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidNormSetting);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":126
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidNormSetting");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":125
 *     if error == cudaErrorInvalidFilterSetting:
 *         return "cudaErrorInvalidFilterSetting"
 *     if error == cudaErrorInvalidNormSetting:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:
 */
  }

  /* "cuda/ccudart.pyx":127
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMixedDeviceExecution);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":128
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"
 */
    __pyx_r = ((char const *)"cudaErrorMixedDeviceExecution");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":127
 *     if error == cudaErrorInvalidNormSetting:
 *         return "cudaErrorInvalidNormSetting"
 *     if error == cudaErrorMixedDeviceExecution:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:
 */
  }

  /* "cuda/ccudart.pyx":129
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNotYetImplemented);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":130
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"
 */
    __pyx_r = ((char const *)"cudaErrorNotYetImplemented");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":129
 *     if error == cudaErrorMixedDeviceExecution:
 *         return "cudaErrorMixedDeviceExecution"
 *     if error == cudaErrorNotYetImplemented:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:
 */
  }

  /* "cuda/ccudart.pyx":131
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMemoryValueTooLarge);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":132
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"
 */
    __pyx_r = ((char const *)"cudaErrorMemoryValueTooLarge");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":131
 *     if error == cudaErrorNotYetImplemented:
 *         return "cudaErrorNotYetImplemented"
 *     if error == cudaErrorMemoryValueTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:
 */
  }

  /* "cuda/ccudart.pyx":133
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStubLibrary);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":134
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"
 */
    __pyx_r = ((char const *)"cudaErrorStubLibrary");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":133
 *     if error == cudaErrorMemoryValueTooLarge:
 *         return "cudaErrorMemoryValueTooLarge"
 *     if error == cudaErrorStubLibrary:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:
 */
  }

  /* "cuda/ccudart.pyx":135
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInsufficientDriver);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":136
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"
 */
    __pyx_r = ((char const *)"cudaErrorInsufficientDriver");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":135
 *     if error == cudaErrorStubLibrary:
 *         return "cudaErrorStubLibrary"
 *     if error == cudaErrorInsufficientDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:
 */
  }

  /* "cuda/ccudart.pyx":137
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorCallRequiresNewerDriver);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":138
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"
 */
    __pyx_r = ((char const *)"cudaErrorCallRequiresNewerDriver");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":137
 *     if error == cudaErrorInsufficientDriver:
 *         return "cudaErrorInsufficientDriver"
 *     if error == cudaErrorCallRequiresNewerDriver:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:
 */
  }

  /* "cuda/ccudart.pyx":139
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidSurface);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":140
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidSurface");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":139
 *     if error == cudaErrorCallRequiresNewerDriver:
 *         return "cudaErrorCallRequiresNewerDriver"
 *     if error == cudaErrorInvalidSurface:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:
 */
  }

  /* "cuda/ccudart.pyx":141
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorDuplicateVariableName);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":142
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"
 */
    __pyx_r = ((char const *)"cudaErrorDuplicateVariableName");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":141
 *     if error == cudaErrorInvalidSurface:
 *         return "cudaErrorInvalidSurface"
 *     if error == cudaErrorDuplicateVariableName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:
 */
  }

  /* "cuda/ccudart.pyx":143
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorDuplicateTextureName);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":144
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"
 */
    __pyx_r = ((char const *)"cudaErrorDuplicateTextureName");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":143
 *     if error == cudaErrorDuplicateVariableName:
 *         return "cudaErrorDuplicateVariableName"
 *     if error == cudaErrorDuplicateTextureName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:
 */
  }

  /* "cuda/ccudart.pyx":145
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorDuplicateSurfaceName);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":146
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"
 */
    __pyx_r = ((char const *)"cudaErrorDuplicateSurfaceName");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":145
 *     if error == cudaErrorDuplicateTextureName:
 *         return "cudaErrorDuplicateTextureName"
 *     if error == cudaErrorDuplicateSurfaceName:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:
 */
  }

  /* "cuda/ccudart.pyx":147
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorDevicesUnavailable);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":148
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"
 */
    __pyx_r = ((char const *)"cudaErrorDevicesUnavailable");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":147
 *     if error == cudaErrorDuplicateSurfaceName:
 *         return "cudaErrorDuplicateSurfaceName"
 *     if error == cudaErrorDevicesUnavailable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:
 */
  }

  /* "cuda/ccudart.pyx":149
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorIncompatibleDriverContext);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":150
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"
 */
    __pyx_r = ((char const *)"cudaErrorIncompatibleDriverContext");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":149
 *     if error == cudaErrorDevicesUnavailable:
 *         return "cudaErrorDevicesUnavailable"
 *     if error == cudaErrorIncompatibleDriverContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:
 */
  }

  /* "cuda/ccudart.pyx":151
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMissingConfiguration);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":152
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"
 */
    __pyx_r = ((char const *)"cudaErrorMissingConfiguration");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":151
 *     if error == cudaErrorIncompatibleDriverContext:
 *         return "cudaErrorIncompatibleDriverContext"
 *     if error == cudaErrorMissingConfiguration:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:
 */
  }

  /* "cuda/ccudart.pyx":153
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorPriorLaunchFailure);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":154
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"
 */
    __pyx_r = ((char const *)"cudaErrorPriorLaunchFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":153
 *     if error == cudaErrorMissingConfiguration:
 *         return "cudaErrorMissingConfiguration"
 *     if error == cudaErrorPriorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 */
  }

  /* "cuda/ccudart.pyx":155
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchMaxDepthExceeded);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":156
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchMaxDepthExceeded");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":155
 *     if error == cudaErrorPriorLaunchFailure:
 *         return "cudaErrorPriorLaunchFailure"
 *     if error == cudaErrorLaunchMaxDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:
 */
  }

  /* "cuda/ccudart.pyx":157
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchFileScopedTex);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":158
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchFileScopedTex");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":157
 *     if error == cudaErrorLaunchMaxDepthExceeded:
 *         return "cudaErrorLaunchMaxDepthExceeded"
 *     if error == cudaErrorLaunchFileScopedTex:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:
 */
  }

  /* "cuda/ccudart.pyx":159
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchFileScopedSurf);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":160
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchFileScopedSurf");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":159
 *     if error == cudaErrorLaunchFileScopedTex:
 *         return "cudaErrorLaunchFileScopedTex"
 *     if error == cudaErrorLaunchFileScopedSurf:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:
 */
  }

  /* "cuda/ccudart.pyx":161
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSyncDepthExceeded);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":162
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"
 */
    __pyx_r = ((char const *)"cudaErrorSyncDepthExceeded");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":161
 *     if error == cudaErrorLaunchFileScopedSurf:
 *         return "cudaErrorLaunchFileScopedSurf"
 *     if error == cudaErrorSyncDepthExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:
 */
  }

  /* "cuda/ccudart.pyx":163
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchPendingCountExceeded);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":164
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchPendingCountExceeded");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":163
 *     if error == cudaErrorSyncDepthExceeded:
 *         return "cudaErrorSyncDepthExceeded"
 *     if error == cudaErrorLaunchPendingCountExceeded:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:
 */
  }

  /* "cuda/ccudart.pyx":165
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidDeviceFunction);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":166
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidDeviceFunction");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":165
 *     if error == cudaErrorLaunchPendingCountExceeded:
 *         return "cudaErrorLaunchPendingCountExceeded"
 *     if error == cudaErrorInvalidDeviceFunction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:
 */
  }

  /* "cuda/ccudart.pyx":167
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNoDevice);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":168
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"
 */
    __pyx_r = ((char const *)"cudaErrorNoDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":167
 *     if error == cudaErrorInvalidDeviceFunction:
 *         return "cudaErrorInvalidDeviceFunction"
 *     if error == cudaErrorNoDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:
 */
  }

  /* "cuda/ccudart.pyx":169
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidDevice);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":170
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":169
 *     if error == cudaErrorNoDevice:
 *         return "cudaErrorNoDevice"
 *     if error == cudaErrorInvalidDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:
 */
  }

  /* "cuda/ccudart.pyx":171
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorDeviceNotLicensed);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":172
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"
 */
    __pyx_r = ((char const *)"cudaErrorDeviceNotLicensed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":171
 *     if error == cudaErrorInvalidDevice:
 *         return "cudaErrorInvalidDevice"
 *     if error == cudaErrorDeviceNotLicensed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 */
  }

  /* "cuda/ccudart.pyx":173
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSoftwareValidityNotEstablished);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":174
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"
 */
    __pyx_r = ((char const *)"cudaErrorSoftwareValidityNotEstablished");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":173
 *     if error == cudaErrorDeviceNotLicensed:
 *         return "cudaErrorDeviceNotLicensed"
 *     if error == cudaErrorSoftwareValidityNotEstablished:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:
 */
  }

  /* "cuda/ccudart.pyx":175
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStartupFailure);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":176
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"
 */
    __pyx_r = ((char const *)"cudaErrorStartupFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":175
 *     if error == cudaErrorSoftwareValidityNotEstablished:
 *         return "cudaErrorSoftwareValidityNotEstablished"
 *     if error == cudaErrorStartupFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:
 */
  }

  /* "cuda/ccudart.pyx":177
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidKernelImage);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":178
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidKernelImage");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":177
 *     if error == cudaErrorStartupFailure:
 *         return "cudaErrorStartupFailure"
 *     if error == cudaErrorInvalidKernelImage:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:
 */
  }

  /* "cuda/ccudart.pyx":179
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorDeviceUninitialized);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":180
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"
 */
    __pyx_r = ((char const *)"cudaErrorDeviceUninitialized");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":179
 *     if error == cudaErrorInvalidKernelImage:
 *         return "cudaErrorInvalidKernelImage"
 *     if error == cudaErrorDeviceUninitialized:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:
 */
  }

  /* "cuda/ccudart.pyx":181
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMapBufferObjectFailed);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":182
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"
 */
    __pyx_r = ((char const *)"cudaErrorMapBufferObjectFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":181
 *     if error == cudaErrorDeviceUninitialized:
 *         return "cudaErrorDeviceUninitialized"
 *     if error == cudaErrorMapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:
 */
  }

  /* "cuda/ccudart.pyx":183
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorUnmapBufferObjectFailed);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":184
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"
 */
    __pyx_r = ((char const *)"cudaErrorUnmapBufferObjectFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":183
 *     if error == cudaErrorMapBufferObjectFailed:
 *         return "cudaErrorMapBufferObjectFailed"
 *     if error == cudaErrorUnmapBufferObjectFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:
 */
  }

  /* "cuda/ccudart.pyx":185
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorArrayIsMapped);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":186
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"
 */
    __pyx_r = ((char const *)"cudaErrorArrayIsMapped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":185
 *     if error == cudaErrorUnmapBufferObjectFailed:
 *         return "cudaErrorUnmapBufferObjectFailed"
 *     if error == cudaErrorArrayIsMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:
 */
  }

  /* "cuda/ccudart.pyx":187
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorAlreadyMapped);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":188
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"
 */
    __pyx_r = ((char const *)"cudaErrorAlreadyMapped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":187
 *     if error == cudaErrorArrayIsMapped:
 *         return "cudaErrorArrayIsMapped"
 *     if error == cudaErrorAlreadyMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:
 */
  }

  /* "cuda/ccudart.pyx":189
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNoKernelImageForDevice);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":190
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"
 */
    __pyx_r = ((char const *)"cudaErrorNoKernelImageForDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":189
 *     if error == cudaErrorAlreadyMapped:
 *         return "cudaErrorAlreadyMapped"
 *     if error == cudaErrorNoKernelImageForDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:
 */
  }

  /* "cuda/ccudart.pyx":191
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorAlreadyAcquired);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":192
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"
 */
    __pyx_r = ((char const *)"cudaErrorAlreadyAcquired");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":191
 *     if error == cudaErrorNoKernelImageForDevice:
 *         return "cudaErrorNoKernelImageForDevice"
 *     if error == cudaErrorAlreadyAcquired:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:
 */
  }

  /* "cuda/ccudart.pyx":193
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNotMapped);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":194
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"
 */
    __pyx_r = ((char const *)"cudaErrorNotMapped");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":193
 *     if error == cudaErrorAlreadyAcquired:
 *         return "cudaErrorAlreadyAcquired"
 *     if error == cudaErrorNotMapped:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:
 */
  }

  /* "cuda/ccudart.pyx":195
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNotMappedAsArray);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":196
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"
 */
    __pyx_r = ((char const *)"cudaErrorNotMappedAsArray");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":195
 *     if error == cudaErrorNotMapped:
 *         return "cudaErrorNotMapped"
 *     if error == cudaErrorNotMappedAsArray:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:
 */
  }

  /* "cuda/ccudart.pyx":197
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNotMappedAsPointer);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":198
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"
 */
    __pyx_r = ((char const *)"cudaErrorNotMappedAsPointer");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":197
 *     if error == cudaErrorNotMappedAsArray:
 *         return "cudaErrorNotMappedAsArray"
 *     if error == cudaErrorNotMappedAsPointer:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:
 */
  }

  /* "cuda/ccudart.pyx":199
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorECCUncorrectable);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":200
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"
 */
    __pyx_r = ((char const *)"cudaErrorECCUncorrectable");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":199
 *     if error == cudaErrorNotMappedAsPointer:
 *         return "cudaErrorNotMappedAsPointer"
 *     if error == cudaErrorECCUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:
 */
  }

  /* "cuda/ccudart.pyx":201
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorUnsupportedLimit);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":202
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"
 */
    __pyx_r = ((char const *)"cudaErrorUnsupportedLimit");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":201
 *     if error == cudaErrorECCUncorrectable:
 *         return "cudaErrorECCUncorrectable"
 *     if error == cudaErrorUnsupportedLimit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:
 */
  }

  /* "cuda/ccudart.pyx":203
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorDeviceAlreadyInUse);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":204
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"
 */
    __pyx_r = ((char const *)"cudaErrorDeviceAlreadyInUse");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":203
 *     if error == cudaErrorUnsupportedLimit:
 *         return "cudaErrorUnsupportedLimit"
 *     if error == cudaErrorDeviceAlreadyInUse:             # <<<<<<<<<<<<<<
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:
 */
  }

  /* "cuda/ccudart.pyx":205
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorPeerAccessUnsupported);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":206
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"
 */
    __pyx_r = ((char const *)"cudaErrorPeerAccessUnsupported");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":205
 *     if error == cudaErrorDeviceAlreadyInUse:
 *         return "cudaErrorDeviceAlreadyInUse"
 *     if error == cudaErrorPeerAccessUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:
 */
  }

  /* "cuda/ccudart.pyx":207
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidPtx);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":208
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidPtx");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":207
 *     if error == cudaErrorPeerAccessUnsupported:
 *         return "cudaErrorPeerAccessUnsupported"
 *     if error == cudaErrorInvalidPtx:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:
 */
  }

  /* "cuda/ccudart.pyx":209
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidGraphicsContext);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":210
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidGraphicsContext");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":209
 *     if error == cudaErrorInvalidPtx:
 *         return "cudaErrorInvalidPtx"
 *     if error == cudaErrorInvalidGraphicsContext:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:
 */
  }

  /* "cuda/ccudart.pyx":211
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNvlinkUncorrectable);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":212
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorNvlinkUncorrectable");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":211
 *     if error == cudaErrorInvalidGraphicsContext:
 *         return "cudaErrorInvalidGraphicsContext"
 *     if error == cudaErrorNvlinkUncorrectable:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:
 */
  }

  /* "cuda/ccudart.pyx":213
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorJitCompilerNotFound);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":214
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"
 */
    __pyx_r = ((char const *)"cudaErrorJitCompilerNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":213
 *     if error == cudaErrorNvlinkUncorrectable:
 *         return "cudaErrorNvlinkUncorrectable"
 *     if error == cudaErrorJitCompilerNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:
 */
  }

  /* "cuda/ccudart.pyx":215
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorUnsupportedPtxVersion);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":216
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"
 */
    __pyx_r = ((char const *)"cudaErrorUnsupportedPtxVersion");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":215
 *     if error == cudaErrorJitCompilerNotFound:
 *         return "cudaErrorJitCompilerNotFound"
 *     if error == cudaErrorUnsupportedPtxVersion:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:
 */
  }

  /* "cuda/ccudart.pyx":217
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorJitCompilationDisabled);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":218
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"
 */
    __pyx_r = ((char const *)"cudaErrorJitCompilationDisabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":217
 *     if error == cudaErrorUnsupportedPtxVersion:
 *         return "cudaErrorUnsupportedPtxVersion"
 *     if error == cudaErrorJitCompilationDisabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:
 */
  }

  /* "cuda/ccudart.pyx":219
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorUnsupportedDevSideSync:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorUnsupportedExecAffinity);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":220
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnsupportedDevSideSync:
 *         return "cudaErrorUnsupportedDevSideSync"
 */
    __pyx_r = ((char const *)"cudaErrorUnsupportedExecAffinity");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":219
 *     if error == cudaErrorJitCompilationDisabled:
 *         return "cudaErrorJitCompilationDisabled"
 *     if error == cudaErrorUnsupportedExecAffinity:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorUnsupportedDevSideSync:
 */
  }

  /* "cuda/ccudart.pyx":221
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorUnsupportedDevSideSync:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedDevSideSync"
 *     if error == cudaErrorInvalidSource:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorUnsupportedDevSideSync);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":222
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorUnsupportedDevSideSync:
 *         return "cudaErrorUnsupportedDevSideSync"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"
 */
    __pyx_r = ((char const *)"cudaErrorUnsupportedDevSideSync");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":221
 *     if error == cudaErrorUnsupportedExecAffinity:
 *         return "cudaErrorUnsupportedExecAffinity"
 *     if error == cudaErrorUnsupportedDevSideSync:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnsupportedDevSideSync"
 *     if error == cudaErrorInvalidSource:
 */
  }

  /* "cuda/ccudart.pyx":223
 *     if error == cudaErrorUnsupportedDevSideSync:
 *         return "cudaErrorUnsupportedDevSideSync"
 *     if error == cudaErrorInvalidSource:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidSource);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":224
 *         return "cudaErrorUnsupportedDevSideSync"
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidSource");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":223
 *     if error == cudaErrorUnsupportedDevSideSync:
 *         return "cudaErrorUnsupportedDevSideSync"
 *     if error == cudaErrorInvalidSource:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:
 */
  }

  /* "cuda/ccudart.pyx":225
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorFileNotFound);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":226
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorFileNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":225
 *     if error == cudaErrorInvalidSource:
 *         return "cudaErrorInvalidSource"
 *     if error == cudaErrorFileNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 */
  }

  /* "cuda/ccudart.pyx":227
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSharedObjectSymbolNotFound);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":228
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"
 */
    __pyx_r = ((char const *)"cudaErrorSharedObjectSymbolNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":227
 *     if error == cudaErrorFileNotFound:
 *         return "cudaErrorFileNotFound"
 *     if error == cudaErrorSharedObjectSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:
 */
  }

  /* "cuda/ccudart.pyx":229
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSharedObjectInitFailed);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":230
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"
 */
    __pyx_r = ((char const *)"cudaErrorSharedObjectInitFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":229
 *     if error == cudaErrorSharedObjectSymbolNotFound:
 *         return "cudaErrorSharedObjectSymbolNotFound"
 *     if error == cudaErrorSharedObjectInitFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:
 */
  }

  /* "cuda/ccudart.pyx":231
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:             # <<<<<<<<<<<<<<
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorOperatingSystem);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":232
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"
 */
    __pyx_r = ((char const *)"cudaErrorOperatingSystem");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":231
 *     if error == cudaErrorSharedObjectInitFailed:
 *         return "cudaErrorSharedObjectInitFailed"
 *     if error == cudaErrorOperatingSystem:             # <<<<<<<<<<<<<<
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:
 */
  }

  /* "cuda/ccudart.pyx":233
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidResourceHandle);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":234
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidResourceHandle");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":233
 *     if error == cudaErrorOperatingSystem:
 *         return "cudaErrorOperatingSystem"
 *     if error == cudaErrorInvalidResourceHandle:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:
 */
  }

  /* "cuda/ccudart.pyx":235
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorLossyQuery:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorIllegalState);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":236
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLossyQuery:
 *         return "cudaErrorLossyQuery"
 */
    __pyx_r = ((char const *)"cudaErrorIllegalState");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":235
 *     if error == cudaErrorInvalidResourceHandle:
 *         return "cudaErrorInvalidResourceHandle"
 *     if error == cudaErrorIllegalState:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorLossyQuery:
 */
  }

  /* "cuda/ccudart.pyx":237
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorLossyQuery:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLossyQuery"
 *     if error == cudaErrorSymbolNotFound:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLossyQuery);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":238
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorLossyQuery:
 *         return "cudaErrorLossyQuery"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"
 */
    __pyx_r = ((char const *)"cudaErrorLossyQuery");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":237
 *     if error == cudaErrorIllegalState:
 *         return "cudaErrorIllegalState"
 *     if error == cudaErrorLossyQuery:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLossyQuery"
 *     if error == cudaErrorSymbolNotFound:
 */
  }

  /* "cuda/ccudart.pyx":239
 *     if error == cudaErrorLossyQuery:
 *         return "cudaErrorLossyQuery"
 *     if error == cudaErrorSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSymbolNotFound);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":240
 *         return "cudaErrorLossyQuery"
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"
 */
    __pyx_r = ((char const *)"cudaErrorSymbolNotFound");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":239
 *     if error == cudaErrorLossyQuery:
 *         return "cudaErrorLossyQuery"
 *     if error == cudaErrorSymbolNotFound:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:
 */
  }

  /* "cuda/ccudart.pyx":241
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNotReady);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":242
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"
 */
    __pyx_r = ((char const *)"cudaErrorNotReady");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":241
 *     if error == cudaErrorSymbolNotFound:
 *         return "cudaErrorSymbolNotFound"
 *     if error == cudaErrorNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:
 */
  }

  /* "cuda/ccudart.pyx":243
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorIllegalAddress);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":244
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"
 */
    __pyx_r = ((char const *)"cudaErrorIllegalAddress");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":243
 *     if error == cudaErrorNotReady:
 *         return "cudaErrorNotReady"
 *     if error == cudaErrorIllegalAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:
 */
  }

  /* "cuda/ccudart.pyx":245
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchOutOfResources);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":246
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchOutOfResources");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":245
 *     if error == cudaErrorIllegalAddress:
 *         return "cudaErrorIllegalAddress"
 *     if error == cudaErrorLaunchOutOfResources:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:
 */
  }

  /* "cuda/ccudart.pyx":247
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchTimeout);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":248
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchTimeout");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":247
 *     if error == cudaErrorLaunchOutOfResources:
 *         return "cudaErrorLaunchOutOfResources"
 *     if error == cudaErrorLaunchTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 */
  }

  /* "cuda/ccudart.pyx":249
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchIncompatibleTexturing);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":250
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchIncompatibleTexturing");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":249
 *     if error == cudaErrorLaunchTimeout:
 *         return "cudaErrorLaunchTimeout"
 *     if error == cudaErrorLaunchIncompatibleTexturing:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 */
  }

  /* "cuda/ccudart.pyx":251
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorPeerAccessAlreadyEnabled);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":252
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"
 */
    __pyx_r = ((char const *)"cudaErrorPeerAccessAlreadyEnabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":251
 *     if error == cudaErrorLaunchIncompatibleTexturing:
 *         return "cudaErrorLaunchIncompatibleTexturing"
 *     if error == cudaErrorPeerAccessAlreadyEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:
 */
  }

  /* "cuda/ccudart.pyx":253
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorPeerAccessNotEnabled);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":254
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"
 */
    __pyx_r = ((char const *)"cudaErrorPeerAccessNotEnabled");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":253
 *     if error == cudaErrorPeerAccessAlreadyEnabled:
 *         return "cudaErrorPeerAccessAlreadyEnabled"
 *     if error == cudaErrorPeerAccessNotEnabled:             # <<<<<<<<<<<<<<
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:
 */
  }

  /* "cuda/ccudart.pyx":255
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSetOnActiveProcess);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":256
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"
 */
    __pyx_r = ((char const *)"cudaErrorSetOnActiveProcess");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":255
 *     if error == cudaErrorPeerAccessNotEnabled:
 *         return "cudaErrorPeerAccessNotEnabled"
 *     if error == cudaErrorSetOnActiveProcess:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:
 */
  }

  /* "cuda/ccudart.pyx":257
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorContextIsDestroyed);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":258
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"
 */
    __pyx_r = ((char const *)"cudaErrorContextIsDestroyed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":257
 *     if error == cudaErrorSetOnActiveProcess:
 *         return "cudaErrorSetOnActiveProcess"
 *     if error == cudaErrorContextIsDestroyed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:
 */
  }

  /* "cuda/ccudart.pyx":259
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorAssert);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":260
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"
 */
    __pyx_r = ((char const *)"cudaErrorAssert");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":259
 *     if error == cudaErrorContextIsDestroyed:
 *         return "cudaErrorContextIsDestroyed"
 *     if error == cudaErrorAssert:             # <<<<<<<<<<<<<<
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:
 */
  }

  /* "cuda/ccudart.pyx":261
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorTooManyPeers);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":262
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 */
    __pyx_r = ((char const *)"cudaErrorTooManyPeers");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":261
 *     if error == cudaErrorAssert:
 *         return "cudaErrorAssert"
 *     if error == cudaErrorTooManyPeers:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 */
  }

  /* "cuda/ccudart.pyx":263
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorHostMemoryAlreadyRegistered);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":264
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"
 */
    __pyx_r = ((char const *)"cudaErrorHostMemoryAlreadyRegistered");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":263
 *     if error == cudaErrorTooManyPeers:
 *         return "cudaErrorTooManyPeers"
 *     if error == cudaErrorHostMemoryAlreadyRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:
 */
  }

  /* "cuda/ccudart.pyx":265
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorHostMemoryNotRegistered);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":266
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"
 */
    __pyx_r = ((char const *)"cudaErrorHostMemoryNotRegistered");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":265
 *     if error == cudaErrorHostMemoryAlreadyRegistered:
 *         return "cudaErrorHostMemoryAlreadyRegistered"
 *     if error == cudaErrorHostMemoryNotRegistered:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:
 */
  }

  /* "cuda/ccudart.pyx":267
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorHardwareStackError);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":268
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"
 */
    __pyx_r = ((char const *)"cudaErrorHardwareStackError");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":267
 *     if error == cudaErrorHostMemoryNotRegistered:
 *         return "cudaErrorHostMemoryNotRegistered"
 *     if error == cudaErrorHardwareStackError:             # <<<<<<<<<<<<<<
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:
 */
  }

  /* "cuda/ccudart.pyx":269
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorIllegalInstruction);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":270
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"
 */
    __pyx_r = ((char const *)"cudaErrorIllegalInstruction");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":269
 *     if error == cudaErrorHardwareStackError:
 *         return "cudaErrorHardwareStackError"
 *     if error == cudaErrorIllegalInstruction:             # <<<<<<<<<<<<<<
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:
 */
  }

  /* "cuda/ccudart.pyx":271
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMisalignedAddress);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":272
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"
 */
    __pyx_r = ((char const *)"cudaErrorMisalignedAddress");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":271
 *     if error == cudaErrorIllegalInstruction:
 *         return "cudaErrorIllegalInstruction"
 *     if error == cudaErrorMisalignedAddress:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:
 */
  }

  /* "cuda/ccudart.pyx":273
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidAddressSpace);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":274
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidAddressSpace");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":273
 *     if error == cudaErrorMisalignedAddress:
 *         return "cudaErrorMisalignedAddress"
 *     if error == cudaErrorInvalidAddressSpace:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:
 */
  }

  /* "cuda/ccudart.pyx":275
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidPc);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":276
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidPc");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":275
 *     if error == cudaErrorInvalidAddressSpace:
 *         return "cudaErrorInvalidAddressSpace"
 *     if error == cudaErrorInvalidPc:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:
 */
  }

  /* "cuda/ccudart.pyx":277
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorLaunchFailure);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":278
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"
 */
    __pyx_r = ((char const *)"cudaErrorLaunchFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":277
 *     if error == cudaErrorInvalidPc:
 *         return "cudaErrorInvalidPc"
 *     if error == cudaErrorLaunchFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 */
  }

  /* "cuda/ccudart.pyx":279
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorCooperativeLaunchTooLarge);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":280
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"
 */
    __pyx_r = ((char const *)"cudaErrorCooperativeLaunchTooLarge");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":279
 *     if error == cudaErrorLaunchFailure:
 *         return "cudaErrorLaunchFailure"
 *     if error == cudaErrorCooperativeLaunchTooLarge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:
 */
  }

  /* "cuda/ccudart.pyx":281
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNotPermitted);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":282
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"
 */
    __pyx_r = ((char const *)"cudaErrorNotPermitted");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":281
 *     if error == cudaErrorCooperativeLaunchTooLarge:
 *         return "cudaErrorCooperativeLaunchTooLarge"
 *     if error == cudaErrorNotPermitted:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:
 */
  }

  /* "cuda/ccudart.pyx":283
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorNotSupported);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":284
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"
 */
    __pyx_r = ((char const *)"cudaErrorNotSupported");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":283
 *     if error == cudaErrorNotPermitted:
 *         return "cudaErrorNotPermitted"
 *     if error == cudaErrorNotSupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:
 */
  }

  /* "cuda/ccudart.pyx":285
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSystemNotReady);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":286
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"
 */
    __pyx_r = ((char const *)"cudaErrorSystemNotReady");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":285
 *     if error == cudaErrorNotSupported:
 *         return "cudaErrorNotSupported"
 *     if error == cudaErrorSystemNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:
 */
  }

  /* "cuda/ccudart.pyx":287
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorSystemDriverMismatch);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":288
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"
 */
    __pyx_r = ((char const *)"cudaErrorSystemDriverMismatch");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":287
 *     if error == cudaErrorSystemNotReady:
 *         return "cudaErrorSystemNotReady"
 *     if error == cudaErrorSystemDriverMismatch:             # <<<<<<<<<<<<<<
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 */
  }

  /* "cuda/ccudart.pyx":289
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorCompatNotSupportedOnDevice);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":290
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"
 */
    __pyx_r = ((char const *)"cudaErrorCompatNotSupportedOnDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":289
 *     if error == cudaErrorSystemDriverMismatch:
 *         return "cudaErrorSystemDriverMismatch"
 *     if error == cudaErrorCompatNotSupportedOnDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:
 */
  }

  /* "cuda/ccudart.pyx":291
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMpsConnectionFailed);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":292
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"
 */
    __pyx_r = ((char const *)"cudaErrorMpsConnectionFailed");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":291
 *     if error == cudaErrorCompatNotSupportedOnDevice:
 *         return "cudaErrorCompatNotSupportedOnDevice"
 *     if error == cudaErrorMpsConnectionFailed:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:
 */
  }

  /* "cuda/ccudart.pyx":293
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMpsRpcFailure);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":294
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"
 */
    __pyx_r = ((char const *)"cudaErrorMpsRpcFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":293
 *     if error == cudaErrorMpsConnectionFailed:
 *         return "cudaErrorMpsConnectionFailed"
 *     if error == cudaErrorMpsRpcFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:
 */
  }

  /* "cuda/ccudart.pyx":295
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMpsServerNotReady);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":296
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"
 */
    __pyx_r = ((char const *)"cudaErrorMpsServerNotReady");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":295
 *     if error == cudaErrorMpsRpcFailure:
 *         return "cudaErrorMpsRpcFailure"
 *     if error == cudaErrorMpsServerNotReady:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:
 */
  }

  /* "cuda/ccudart.pyx":297
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMpsMaxClientsReached);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":298
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"
 */
    __pyx_r = ((char const *)"cudaErrorMpsMaxClientsReached");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":297
 *     if error == cudaErrorMpsServerNotReady:
 *         return "cudaErrorMpsServerNotReady"
 *     if error == cudaErrorMpsMaxClientsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:
 */
  }

  /* "cuda/ccudart.pyx":299
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorMpsClientTerminated:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMpsMaxConnectionsReached);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":300
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorMpsClientTerminated:
 *         return "cudaErrorMpsClientTerminated"
 */
    __pyx_r = ((char const *)"cudaErrorMpsMaxConnectionsReached");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":299
 *     if error == cudaErrorMpsMaxClientsReached:
 *         return "cudaErrorMpsMaxClientsReached"
 *     if error == cudaErrorMpsMaxConnectionsReached:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorMpsClientTerminated:
 */
  }

  /* "cuda/ccudart.pyx":301
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorMpsClientTerminated:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsClientTerminated"
 *     if error == cudaErrorCdpNotSupported:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorMpsClientTerminated);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":302
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorMpsClientTerminated:
 *         return "cudaErrorMpsClientTerminated"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCdpNotSupported:
 *         return "cudaErrorCdpNotSupported"
 */
    __pyx_r = ((char const *)"cudaErrorMpsClientTerminated");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":301
 *     if error == cudaErrorMpsMaxConnectionsReached:
 *         return "cudaErrorMpsMaxConnectionsReached"
 *     if error == cudaErrorMpsClientTerminated:             # <<<<<<<<<<<<<<
 *         return "cudaErrorMpsClientTerminated"
 *     if error == cudaErrorCdpNotSupported:
 */
  }

  /* "cuda/ccudart.pyx":303
 *     if error == cudaErrorMpsClientTerminated:
 *         return "cudaErrorMpsClientTerminated"
 *     if error == cudaErrorCdpNotSupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCdpNotSupported"
 *     if error == cudaErrorCdpVersionMismatch:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorCdpNotSupported);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":304
 *         return "cudaErrorMpsClientTerminated"
 *     if error == cudaErrorCdpNotSupported:
 *         return "cudaErrorCdpNotSupported"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCdpVersionMismatch:
 *         return "cudaErrorCdpVersionMismatch"
 */
    __pyx_r = ((char const *)"cudaErrorCdpNotSupported");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":303
 *     if error == cudaErrorMpsClientTerminated:
 *         return "cudaErrorMpsClientTerminated"
 *     if error == cudaErrorCdpNotSupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCdpNotSupported"
 *     if error == cudaErrorCdpVersionMismatch:
 */
  }

  /* "cuda/ccudart.pyx":305
 *     if error == cudaErrorCdpNotSupported:
 *         return "cudaErrorCdpNotSupported"
 *     if error == cudaErrorCdpVersionMismatch:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCdpVersionMismatch"
 *     if error == cudaErrorStreamCaptureUnsupported:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorCdpVersionMismatch);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":306
 *         return "cudaErrorCdpNotSupported"
 *     if error == cudaErrorCdpVersionMismatch:
 *         return "cudaErrorCdpVersionMismatch"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"
 */
    __pyx_r = ((char const *)"cudaErrorCdpVersionMismatch");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":305
 *     if error == cudaErrorCdpNotSupported:
 *         return "cudaErrorCdpNotSupported"
 *     if error == cudaErrorCdpVersionMismatch:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCdpVersionMismatch"
 *     if error == cudaErrorStreamCaptureUnsupported:
 */
  }

  /* "cuda/ccudart.pyx":307
 *     if error == cudaErrorCdpVersionMismatch:
 *         return "cudaErrorCdpVersionMismatch"
 *     if error == cudaErrorStreamCaptureUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureUnsupported);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":308
 *         return "cudaErrorCdpVersionMismatch"
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureUnsupported");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":307
 *     if error == cudaErrorCdpVersionMismatch:
 *         return "cudaErrorCdpVersionMismatch"
 *     if error == cudaErrorStreamCaptureUnsupported:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:
 */
  }

  /* "cuda/ccudart.pyx":309
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureInvalidated);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":310
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureInvalidated");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":309
 *     if error == cudaErrorStreamCaptureUnsupported:
 *         return "cudaErrorStreamCaptureUnsupported"
 *     if error == cudaErrorStreamCaptureInvalidated:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:
 */
  }

  /* "cuda/ccudart.pyx":311
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureMerge);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":312
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureMerge");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":311
 *     if error == cudaErrorStreamCaptureInvalidated:
 *         return "cudaErrorStreamCaptureInvalidated"
 *     if error == cudaErrorStreamCaptureMerge:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:
 */
  }

  /* "cuda/ccudart.pyx":313
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureUnmatched);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":314
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureUnmatched");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":313
 *     if error == cudaErrorStreamCaptureMerge:
 *         return "cudaErrorStreamCaptureMerge"
 *     if error == cudaErrorStreamCaptureUnmatched:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:
 */
  }

  /* "cuda/ccudart.pyx":315
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureUnjoined);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":316
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureUnjoined");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":315
 *     if error == cudaErrorStreamCaptureUnmatched:
 *         return "cudaErrorStreamCaptureUnmatched"
 *     if error == cudaErrorStreamCaptureUnjoined:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:
 */
  }

  /* "cuda/ccudart.pyx":317
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureIsolation);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":318
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureIsolation");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":317
 *     if error == cudaErrorStreamCaptureUnjoined:
 *         return "cudaErrorStreamCaptureUnjoined"
 *     if error == cudaErrorStreamCaptureIsolation:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:
 */
  }

  /* "cuda/ccudart.pyx":319
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureImplicit);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":320
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureImplicit");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":319
 *     if error == cudaErrorStreamCaptureIsolation:
 *         return "cudaErrorStreamCaptureIsolation"
 *     if error == cudaErrorStreamCaptureImplicit:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:
 */
  }

  /* "cuda/ccudart.pyx":321
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorCapturedEvent);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":322
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"
 */
    __pyx_r = ((char const *)"cudaErrorCapturedEvent");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":321
 *     if error == cudaErrorStreamCaptureImplicit:
 *         return "cudaErrorStreamCaptureImplicit"
 *     if error == cudaErrorCapturedEvent:             # <<<<<<<<<<<<<<
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:
 */
  }

  /* "cuda/ccudart.pyx":323
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorStreamCaptureWrongThread);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":324
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"
 */
    __pyx_r = ((char const *)"cudaErrorStreamCaptureWrongThread");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":323
 *     if error == cudaErrorCapturedEvent:
 *         return "cudaErrorCapturedEvent"
 *     if error == cudaErrorStreamCaptureWrongThread:             # <<<<<<<<<<<<<<
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:
 */
  }

  /* "cuda/ccudart.pyx":325
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorTimeout);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":326
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"
 */
    __pyx_r = ((char const *)"cudaErrorTimeout");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":325
 *     if error == cudaErrorStreamCaptureWrongThread:
 *         return "cudaErrorStreamCaptureWrongThread"
 *     if error == cudaErrorTimeout:             # <<<<<<<<<<<<<<
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:
 */
  }

  /* "cuda/ccudart.pyx":327
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorGraphExecUpdateFailure);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":328
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"
 */
    __pyx_r = ((char const *)"cudaErrorGraphExecUpdateFailure");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":327
 *     if error == cudaErrorTimeout:
 *         return "cudaErrorTimeout"
 *     if error == cudaErrorGraphExecUpdateFailure:             # <<<<<<<<<<<<<<
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:
 */
  }

  /* "cuda/ccudart.pyx":329
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorInvalidClusterSize:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorExternalDevice);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":330
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorInvalidClusterSize:
 *         return "cudaErrorInvalidClusterSize"
 */
    __pyx_r = ((char const *)"cudaErrorExternalDevice");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":329
 *     if error == cudaErrorGraphExecUpdateFailure:
 *         return "cudaErrorGraphExecUpdateFailure"
 *     if error == cudaErrorExternalDevice:             # <<<<<<<<<<<<<<
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorInvalidClusterSize:
 */
  }

  /* "cuda/ccudart.pyx":331
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorInvalidClusterSize:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidClusterSize"
 *     if error == cudaErrorUnknown:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorInvalidClusterSize);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":332
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorInvalidClusterSize:
 *         return "cudaErrorInvalidClusterSize"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"
 */
    __pyx_r = ((char const *)"cudaErrorInvalidClusterSize");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":331
 *     if error == cudaErrorExternalDevice:
 *         return "cudaErrorExternalDevice"
 *     if error == cudaErrorInvalidClusterSize:             # <<<<<<<<<<<<<<
 *         return "cudaErrorInvalidClusterSize"
 *     if error == cudaErrorUnknown:
 */
  }

  /* "cuda/ccudart.pyx":333
 *     if error == cudaErrorInvalidClusterSize:
 *         return "cudaErrorInvalidClusterSize"
 *     if error == cudaErrorUnknown:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorUnknown);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":334
 *         return "cudaErrorInvalidClusterSize"
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"             # <<<<<<<<<<<<<<
 *     if error == cudaErrorApiFailureBase:
 *         return "cudaErrorApiFailureBase"
 */
    __pyx_r = ((char const *)"cudaErrorUnknown");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":333
 *     if error == cudaErrorInvalidClusterSize:
 *         return "cudaErrorInvalidClusterSize"
 *     if error == cudaErrorUnknown:             # <<<<<<<<<<<<<<
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:
 */
  }

  /* "cuda/ccudart.pyx":335
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:             # <<<<<<<<<<<<<<
 *         return "cudaErrorApiFailureBase"
 *     return pStr
 */
  __pyx_t_1 = (__pyx_v_error == cudaErrorApiFailureBase);
  if (__pyx_t_1) {

    /* "cuda/ccudart.pyx":336
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:
 *         return "cudaErrorApiFailureBase"             # <<<<<<<<<<<<<<
 *     return pStr
 * 
 */
    __pyx_r = ((char const *)"cudaErrorApiFailureBase");
    goto __pyx_L0;

    /* "cuda/ccudart.pyx":335
 *     if error == cudaErrorUnknown:
 *         return "cudaErrorUnknown"
 *     if error == cudaErrorApiFailureBase:             # <<<<<<<<<<<<<<
 *         return "cudaErrorApiFailureBase"
 *     return pStr
 */
  }

  /* "cuda/ccudart.pyx":337
 *     if error == cudaErrorApiFailureBase:
 *         return "cudaErrorApiFailureBase"
 *     return pStr             # <<<<<<<<<<<<<<
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) except ?NULL nogil:
 */
  __pyx_r = __pyx_v_pStr;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":77
 *     return _cudaPeekAtLastError()
 * 
 * cdef const char* cudaGetErrorName(cudaError_t error) except ?NULL nogil:             # <<<<<<<<<<<<<<
 *     cdef const char* pStr = "unrecognized error code"
 *     if error == cudaSuccess:
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetErrorName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":339
 *     return pStr
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) except ?NULL nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetErrorString(error)
 * 
 */

static char const *__pyx_f_4cuda_7ccudart_cudaGetErrorString(cudaError_t __pyx_v_error) {
  char const *__pyx_r;
  __Pyx_TraceDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetErrorString", __pyx_f[0], 339, 1, __PYX_ERR(0, 339, __pyx_L1_error));

  /* "cuda/ccudart.pyx":340
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) except ?NULL nogil:
 *     return _cudaGetErrorString(error)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetErrorString(__pyx_v_error); if (unlikely(__pyx_t_1 == ((char const *)NULL) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 340, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":339
 *     return pStr
 * 
 * cdef const char* cudaGetErrorString(cudaError_t error) except ?NULL nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetErrorString(error)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetErrorString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":342
 *     return _cudaGetErrorString(error)
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceCount(count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDeviceCount(int *__pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetDeviceCount", __pyx_f[0], 342, 1, __PYX_ERR(0, 342, __pyx_L1_error));

  /* "cuda/ccudart.pyx":343
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetDeviceCount(count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceCount(__pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":342
 *     return _cudaGetErrorString(error)
 * 
 * cdef cudaError_t cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceCount(count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetDeviceCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":345
 *     return _cudaGetDeviceCount(count)
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceProperties_v2(prop, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDeviceProperties(struct cudaDeviceProp *__pyx_v_prop, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetDeviceProperties", __pyx_f[0], 345, 1, __PYX_ERR(0, 345, __pyx_L1_error));

  /* "cuda/ccudart.pyx":346
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetDeviceProperties_v2(prop, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceProperties_v2(__pyx_v_prop, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":345
 *     return _cudaGetDeviceCount(count)
 * 
 * cdef cudaError_t cudaGetDeviceProperties(cudaDeviceProp* prop, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceProperties_v2(prop, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetDeviceProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":348
 *     return _cudaGetDeviceProperties_v2(prop, device)
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetAttribute(int *__pyx_v_value, enum cudaDeviceAttr __pyx_v_attr, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetAttribute", __pyx_f[0], 348, 1, __PYX_ERR(0, 348, __pyx_L1_error));

  /* "cuda/ccudart.pyx":349
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetAttribute(value, attr, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetAttribute(__pyx_v_value, __pyx_v_attr, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":348
 *     return _cudaGetDeviceProperties_v2(prop, device)
 * 
 * cdef cudaError_t cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":351
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetDefaultMemPool(memPool, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetDefaultMemPool(cudaMemPool_t *__pyx_v_memPool, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetDefaultMemPool", __pyx_f[0], 351, 1, __PYX_ERR(0, 351, __pyx_L1_error));

  /* "cuda/ccudart.pyx":352
 * 
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetDefaultMemPool(memPool, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetDefaultMemPool(__pyx_v_memPool, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":351
 *     return _cudaDeviceGetAttribute(value, attr, device)
 * 
 * cdef cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetDefaultMemPool(memPool, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetDefaultMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":354
 *     return _cudaDeviceGetDefaultMemPool(memPool, device)
 * 
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetMemPool(device, memPool)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetMemPool(int __pyx_v_device, cudaMemPool_t __pyx_v_memPool) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceSetMemPool", __pyx_f[0], 354, 1, __PYX_ERR(0, 354, __pyx_L1_error));

  /* "cuda/ccudart.pyx":355
 * 
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceSetMemPool(device, memPool)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetMemPool(__pyx_v_device, __pyx_v_memPool); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 355, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":354
 *     return _cudaDeviceGetDefaultMemPool(memPool, device)
 * 
 * cdef cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetMemPool(device, memPool)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":357
 *     return _cudaDeviceSetMemPool(device, memPool)
 * 
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetMemPool(memPool, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetMemPool(cudaMemPool_t *__pyx_v_memPool, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetMemPool", __pyx_f[0], 357, 1, __PYX_ERR(0, 357, __pyx_L1_error));

  /* "cuda/ccudart.pyx":358
 * 
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetMemPool(memPool, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetMemPool(__pyx_v_memPool, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 358, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":357
 *     return _cudaDeviceSetMemPool(device, memPool)
 * 
 * cdef cudaError_t cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetMemPool(memPool, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":360
 *     return _cudaDeviceGetMemPool(memPool, device)
 * 
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, device, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetNvSciSyncAttributes(void *__pyx_v_nvSciSyncAttrList, int __pyx_v_device, int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetNvSciSyncAttributes", __pyx_f[0], 360, 1, __PYX_ERR(0, 360, __pyx_L1_error));

  /* "cuda/ccudart.pyx":361
 * 
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, device, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetNvSciSyncAttributes(__pyx_v_nvSciSyncAttrList, __pyx_v_device, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":360
 *     return _cudaDeviceGetMemPool(memPool, device)
 * 
 * cdef cudaError_t cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, device, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetNvSciSyncAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":363
 *     return _cudaDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, device, flags)
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetP2PAttribute(int *__pyx_v_value, enum cudaDeviceP2PAttr __pyx_v_attr, int __pyx_v_srcDevice, int __pyx_v_dstDevice) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetP2PAttribute", __pyx_f[0], 363, 1, __PYX_ERR(0, 363, __pyx_L1_error));

  /* "cuda/ccudart.pyx":364
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetP2PAttribute(__pyx_v_value, __pyx_v_attr, __pyx_v_srcDevice, __pyx_v_dstDevice); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":363
 *     return _cudaDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, device, flags)
 * 
 * cdef cudaError_t cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetP2PAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":366
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaChooseDevice(device, prop)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaChooseDevice(int *__pyx_v_device, struct cudaDeviceProp const *__pyx_v_prop) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaChooseDevice", __pyx_f[0], 366, 1, __PYX_ERR(0, 366, __pyx_L1_error));

  /* "cuda/ccudart.pyx":367
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaChooseDevice(device, prop)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaChooseDevice(__pyx_v_device, __pyx_v_prop); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 367, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":366
 *     return _cudaDeviceGetP2PAttribute(value, attr, srcDevice, dstDevice)
 * 
 * cdef cudaError_t cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaChooseDevice(device, prop)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaChooseDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":369
 *     return _cudaChooseDevice(device, prop)
 * 
 * cdef cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaInitDevice(device, deviceFlags, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaInitDevice(int __pyx_v_device, unsigned int __pyx_v_deviceFlags, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaInitDevice", __pyx_f[0], 369, 1, __PYX_ERR(0, 369, __pyx_L1_error));

  /* "cuda/ccudart.pyx":370
 * 
 * cdef cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaInitDevice(device, deviceFlags, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSetDevice(int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaInitDevice(__pyx_v_device, __pyx_v_deviceFlags, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 370, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":369
 *     return _cudaChooseDevice(device, prop)
 * 
 * cdef cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaInitDevice(device, deviceFlags, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaInitDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":372
 *     return _cudaInitDevice(device, deviceFlags, flags)
 * 
 * cdef cudaError_t cudaSetDevice(int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaSetDevice(device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaSetDevice(int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaSetDevice", __pyx_f[0], 372, 1, __PYX_ERR(0, 372, __pyx_L1_error));

  /* "cuda/ccudart.pyx":373
 * 
 * cdef cudaError_t cudaSetDevice(int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaSetDevice(device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDevice(int* device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDevice(__pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":372
 *     return _cudaInitDevice(device, deviceFlags, flags)
 * 
 * cdef cudaError_t cudaSetDevice(int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaSetDevice(device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaSetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":375
 *     return _cudaSetDevice(device)
 * 
 * cdef cudaError_t cudaGetDevice(int* device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDevice(device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDevice(int *__pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetDevice", __pyx_f[0], 375, 1, __PYX_ERR(0, 375, __pyx_L1_error));

  /* "cuda/ccudart.pyx":376
 * 
 * cdef cudaError_t cudaGetDevice(int* device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetDevice(device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDevice(__pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":375
 *     return _cudaSetDevice(device)
 * 
 * cdef cudaError_t cudaGetDevice(int* device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDevice(device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":378
 *     return _cudaGetDevice(device)
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaSetDeviceFlags(flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaSetDeviceFlags(unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaSetDeviceFlags", __pyx_f[0], 378, 1, __PYX_ERR(0, 378, __pyx_L1_error));

  /* "cuda/ccudart.pyx":379
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaSetDeviceFlags(flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDeviceFlags(__pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 379, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":378
 *     return _cudaGetDevice(device)
 * 
 * cdef cudaError_t cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaSetDeviceFlags(flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaSetDeviceFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":381
 *     return _cudaSetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceFlags(flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDeviceFlags(unsigned int *__pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetDeviceFlags", __pyx_f[0], 381, 1, __PYX_ERR(0, 381, __pyx_L1_error));

  /* "cuda/ccudart.pyx":382
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetDeviceFlags(flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceFlags(__pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":381
 *     return _cudaSetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDeviceFlags(flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetDeviceFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":384
 *     return _cudaGetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreate(pStream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCreate(cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamCreate", __pyx_f[0], 384, 1, __PYX_ERR(0, 384, __pyx_L1_error));

  /* "cuda/ccudart.pyx":385
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamCreate(pStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreate(__pyx_v_pStream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 385, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":384
 *     return _cudaGetDeviceFlags(flags)
 * 
 * cdef cudaError_t cudaStreamCreate(cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreate(pStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":387
 *     return _cudaStreamCreate(pStream)
 * 
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreateWithFlags(pStream, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCreateWithFlags(cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamCreateWithFlags", __pyx_f[0], 387, 1, __PYX_ERR(0, 387, __pyx_L1_error));

  /* "cuda/ccudart.pyx":388
 * 
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamCreateWithFlags(pStream, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreateWithFlags(__pyx_v_pStream, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":387
 *     return _cudaStreamCreate(pStream)
 * 
 * cdef cudaError_t cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreateWithFlags(pStream, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamCreateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":390
 *     return _cudaStreamCreateWithFlags(pStream, flags)
 * 
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreateWithPriority(pStream, flags, priority)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCreateWithPriority(cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_flags, int __pyx_v_priority) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamCreateWithPriority", __pyx_f[0], 390, 1, __PYX_ERR(0, 390, __pyx_L1_error));

  /* "cuda/ccudart.pyx":391
 * 
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamCreateWithPriority(pStream, flags, priority)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreateWithPriority(__pyx_v_pStream, __pyx_v_flags, __pyx_v_priority); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":390
 *     return _cudaStreamCreateWithFlags(pStream, flags)
 * 
 * cdef cudaError_t cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCreateWithPriority(pStream, flags, priority)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamCreateWithPriority", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":393
 *     return _cudaStreamCreateWithPriority(pStream, flags, priority)
 * 
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetPriority(hStream, priority)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetPriority(cudaStream_t __pyx_v_hStream, int *__pyx_v_priority) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamGetPriority", __pyx_f[0], 393, 1, __PYX_ERR(0, 393, __pyx_L1_error));

  /* "cuda/ccudart.pyx":394
 * 
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamGetPriority(hStream, priority)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetPriority(__pyx_v_hStream, __pyx_v_priority); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 394, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":393
 *     return _cudaStreamCreateWithPriority(pStream, flags, priority)
 * 
 * cdef cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetPriority(hStream, priority)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetPriority", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":396
 *     return _cudaStreamGetPriority(hStream, priority)
 * 
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetFlags(hStream, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetFlags(cudaStream_t __pyx_v_hStream, unsigned int *__pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamGetFlags", __pyx_f[0], 396, 1, __PYX_ERR(0, 396, __pyx_L1_error));

  /* "cuda/ccudart.pyx":397
 * 
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamGetFlags(hStream, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetFlags(__pyx_v_hStream, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":396
 *     return _cudaStreamGetPriority(hStream, priority)
 * 
 * cdef cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetFlags(hStream, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":399
 *     return _cudaStreamGetFlags(hStream, flags)
 * 
 * cdef cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetId(hStream, streamId)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetId(cudaStream_t __pyx_v_hStream, unsigned PY_LONG_LONG *__pyx_v_streamId) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamGetId", __pyx_f[0], 399, 1, __PYX_ERR(0, 399, __pyx_L1_error));

  /* "cuda/ccudart.pyx":400
 * 
 * cdef cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamGetId(hStream, streamId)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetId(__pyx_v_hStream, __pyx_v_streamId); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":399
 *     return _cudaStreamGetFlags(hStream, flags)
 * 
 * cdef cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetId(hStream, streamId)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":402
 *     return _cudaStreamGetId(hStream, streamId)
 * 
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCtxResetPersistingL2Cache()
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaCtxResetPersistingL2Cache(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaCtxResetPersistingL2Cache", __pyx_f[0], 402, 1, __PYX_ERR(0, 402, __pyx_L1_error));

  /* "cuda/ccudart.pyx":403
 * 
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaCtxResetPersistingL2Cache()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCtxResetPersistingL2Cache(); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":402
 *     return _cudaStreamGetId(hStream, streamId)
 * 
 * cdef cudaError_t cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCtxResetPersistingL2Cache()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaCtxResetPersistingL2Cache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":405
 *     return _cudaCtxResetPersistingL2Cache()
 * 
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCopyAttributes(dst, src)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamCopyAttributes(cudaStream_t __pyx_v_dst, cudaStream_t __pyx_v_src) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamCopyAttributes", __pyx_f[0], 405, 1, __PYX_ERR(0, 405, __pyx_L1_error));

  /* "cuda/ccudart.pyx":406
 * 
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamCopyAttributes(dst, src)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCopyAttributes(__pyx_v_dst, __pyx_v_src); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 406, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":405
 *     return _cudaCtxResetPersistingL2Cache()
 * 
 * cdef cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamCopyAttributes(dst, src)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamCopyAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":408
 *     return _cudaStreamCopyAttributes(dst, src)
 * 
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetAttribute(hStream, attr, value_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetAttribute(cudaStream_t __pyx_v_hStream, __pyx_t_4cuda_7ccudart_cudaStreamAttrID __pyx_v_attr, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue *__pyx_v_value_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamGetAttribute", __pyx_f[0], 408, 1, __PYX_ERR(0, 408, __pyx_L1_error));

  /* "cuda/ccudart.pyx":409
 * 
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamGetAttribute(hStream, attr, value_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetAttribute(__pyx_v_hStream, __pyx_v_attr, __pyx_v_value_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 409, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":408
 *     return _cudaStreamCopyAttributes(dst, src)
 * 
 * cdef cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetAttribute(hStream, attr, value_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":411
 *     return _cudaStreamGetAttribute(hStream, attr, value_out)
 * 
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamSetAttribute(hStream, attr, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamSetAttribute(cudaStream_t __pyx_v_hStream, __pyx_t_4cuda_7ccudart_cudaStreamAttrID __pyx_v_attr, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue const *__pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamSetAttribute", __pyx_f[0], 411, 1, __PYX_ERR(0, 411, __pyx_L1_error));

  /* "cuda/ccudart.pyx":412
 * 
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamSetAttribute(hStream, attr, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamSetAttribute(__pyx_v_hStream, __pyx_v_attr, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 412, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":411
 *     return _cudaStreamGetAttribute(hStream, attr, value_out)
 * 
 * cdef cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamSetAttribute(hStream, attr, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":414
 *     return _cudaStreamSetAttribute(hStream, attr, value)
 * 
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamDestroy(stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamDestroy(cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamDestroy", __pyx_f[0], 414, 1, __PYX_ERR(0, 414, __pyx_L1_error));

  /* "cuda/ccudart.pyx":415
 * 
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamDestroy(stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamDestroy(__pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 415, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":414
 *     return _cudaStreamSetAttribute(hStream, attr, value)
 * 
 * cdef cudaError_t cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamDestroy(stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":417
 *     return _cudaStreamDestroy(stream)
 * 
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamWaitEvent(stream, event, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamWaitEvent(cudaStream_t __pyx_v_stream, cudaEvent_t __pyx_v_event, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamWaitEvent", __pyx_f[0], 417, 1, __PYX_ERR(0, 417, __pyx_L1_error));

  /* "cuda/ccudart.pyx":418
 * 
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamWaitEvent(stream, event, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamWaitEvent(__pyx_v_stream, __pyx_v_event, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":417
 *     return _cudaStreamDestroy(stream)
 * 
 * cdef cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamWaitEvent(stream, event, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamWaitEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":420
 *     return _cudaStreamWaitEvent(stream, event, flags)
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamAddCallback(cudaStream_t __pyx_v_stream, cudaStreamCallback_t __pyx_v_callback, void *__pyx_v_userData, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamAddCallback", __pyx_f[0], 420, 1, __PYX_ERR(0, 420, __pyx_L1_error));

  /* "cuda/ccudart.pyx":421
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAddCallback(__pyx_v_stream, __pyx_v_callback, __pyx_v_userData, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 421, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":420
 *     return _cudaStreamWaitEvent(stream, event, flags)
 * 
 * cdef cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamAddCallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":423
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamSynchronize(stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamSynchronize(cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamSynchronize", __pyx_f[0], 423, 1, __PYX_ERR(0, 423, __pyx_L1_error));

  /* "cuda/ccudart.pyx":424
 * 
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamSynchronize(stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamSynchronize(__pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":423
 *     return _cudaStreamAddCallback(stream, callback, userData, flags)
 * 
 * cdef cudaError_t cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamSynchronize(stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":426
 *     return _cudaStreamSynchronize(stream)
 * 
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamQuery(stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamQuery(cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamQuery", __pyx_f[0], 426, 1, __PYX_ERR(0, 426, __pyx_L1_error));

  /* "cuda/ccudart.pyx":427
 * 
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamQuery(stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamQuery(__pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":426
 *     return _cudaStreamSynchronize(stream)
 * 
 * cdef cudaError_t cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamQuery(stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamQuery", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":429
 *     return _cudaStreamQuery(stream)
 * 
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamAttachMemAsync(stream, devPtr, length, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamAttachMemAsync(cudaStream_t __pyx_v_stream, void *__pyx_v_devPtr, size_t __pyx_v_length, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamAttachMemAsync", __pyx_f[0], 429, 1, __PYX_ERR(0, 429, __pyx_L1_error));

  /* "cuda/ccudart.pyx":430
 * 
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamAttachMemAsync(stream, devPtr, length, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAttachMemAsync(__pyx_v_stream, __pyx_v_devPtr, __pyx_v_length, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 430, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":429
 *     return _cudaStreamQuery(stream)
 * 
 * cdef cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamAttachMemAsync(stream, devPtr, length, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamAttachMemAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":432
 *     return _cudaStreamAttachMemAsync(stream, devPtr, length, flags)
 * 
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamBeginCapture(stream, mode)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamBeginCapture(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureMode __pyx_v_mode) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamBeginCapture", __pyx_f[0], 432, 1, __PYX_ERR(0, 432, __pyx_L1_error));

  /* "cuda/ccudart.pyx":433
 * 
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamBeginCapture(stream, mode)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamBeginCapture(__pyx_v_stream, __pyx_v_mode); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 433, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":432
 *     return _cudaStreamAttachMemAsync(stream, devPtr, length, flags)
 * 
 * cdef cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamBeginCapture(stream, mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamBeginCapture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":435
 *     return _cudaStreamBeginCapture(stream, mode)
 * 
 * cdef cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamBeginCaptureToGraph(stream, graph, dependencies, dependencyData, numDependencies, mode)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamBeginCaptureToGraph(cudaStream_t __pyx_v_stream, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_dependencies, cudaGraphEdgeData const *__pyx_v_dependencyData, size_t __pyx_v_numDependencies, enum cudaStreamCaptureMode __pyx_v_mode) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamBeginCaptureToGraph", __pyx_f[0], 435, 1, __PYX_ERR(0, 435, __pyx_L1_error));

  /* "cuda/ccudart.pyx":436
 * 
 * cdef cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamBeginCaptureToGraph(stream, graph, dependencies, dependencyData, numDependencies, mode)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamBeginCaptureToGraph(__pyx_v_stream, __pyx_v_graph, __pyx_v_dependencies, __pyx_v_dependencyData, __pyx_v_numDependencies, __pyx_v_mode); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 436, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":435
 *     return _cudaStreamBeginCapture(stream, mode)
 * 
 * cdef cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamBeginCaptureToGraph(stream, graph, dependencies, dependencyData, numDependencies, mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamBeginCaptureToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":438
 *     return _cudaStreamBeginCaptureToGraph(stream, graph, dependencies, dependencyData, numDependencies, mode)
 * 
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaThreadExchangeStreamCaptureMode(mode)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *__pyx_v_mode) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaThreadExchangeStreamCaptureMode", __pyx_f[0], 438, 1, __PYX_ERR(0, 438, __pyx_L1_error));

  /* "cuda/ccudart.pyx":439
 * 
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaThreadExchangeStreamCaptureMode(mode)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaThreadExchangeStreamCaptureMode(__pyx_v_mode); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 439, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":438
 *     return _cudaStreamBeginCaptureToGraph(stream, graph, dependencies, dependencyData, numDependencies, mode)
 * 
 * cdef cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaThreadExchangeStreamCaptureMode(mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaThreadExchangeStreamCaptureMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":441
 *     return _cudaThreadExchangeStreamCaptureMode(mode)
 * 
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamEndCapture(stream, pGraph)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamEndCapture(cudaStream_t __pyx_v_stream, cudaGraph_t *__pyx_v_pGraph) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamEndCapture", __pyx_f[0], 441, 1, __PYX_ERR(0, 441, __pyx_L1_error));

  /* "cuda/ccudart.pyx":442
 * 
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamEndCapture(stream, pGraph)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamEndCapture(__pyx_v_stream, __pyx_v_pGraph); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 442, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":441
 *     return _cudaThreadExchangeStreamCaptureMode(mode)
 * 
 * cdef cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamEndCapture(stream, pGraph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamEndCapture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":444
 *     return _cudaStreamEndCapture(stream, pGraph)
 * 
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamIsCapturing(stream, pCaptureStatus)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamIsCapturing(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureStatus *__pyx_v_pCaptureStatus) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamIsCapturing", __pyx_f[0], 444, 1, __PYX_ERR(0, 444, __pyx_L1_error));

  /* "cuda/ccudart.pyx":445
 * 
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamIsCapturing(stream, pCaptureStatus)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamIsCapturing(__pyx_v_stream, __pyx_v_pCaptureStatus); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 445, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":444
 *     return _cudaStreamEndCapture(stream, pGraph)
 * 
 * cdef cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamIsCapturing(stream, pCaptureStatus)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamIsCapturing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":447
 *     return _cudaStreamIsCapturing(stream, pCaptureStatus)
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureStatus *__pyx_v_captureStatus_out, unsigned PY_LONG_LONG *__pyx_v_id_out, cudaGraph_t *__pyx_v_graph_out, cudaGraphNode_t const **__pyx_v_dependencies_out, size_t *__pyx_v_numDependencies_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamGetCaptureInfo", __pyx_f[0], 447, 1, __PYX_ERR(0, 447, __pyx_L1_error));

  /* "cuda/ccudart.pyx":448
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v2(__pyx_v_stream, __pyx_v_captureStatus_out, __pyx_v_id_out, __pyx_v_graph_out, __pyx_v_dependencies_out, __pyx_v_numDependencies_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":447
 *     return _cudaStreamIsCapturing(stream, pCaptureStatus)
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetCaptureInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":450
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo_v3(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureStatus *__pyx_v_captureStatus_out, unsigned PY_LONG_LONG *__pyx_v_id_out, cudaGraph_t *__pyx_v_graph_out, cudaGraphNode_t const **__pyx_v_dependencies_out, cudaGraphEdgeData const **__pyx_v_edgeData_out, size_t *__pyx_v_numDependencies_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamGetCaptureInfo_v3", __pyx_f[0], 450, 1, __PYX_ERR(0, 450, __pyx_L1_error));

  /* "cuda/ccudart.pyx":451
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamGetCaptureInfo_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v3(__pyx_v_stream, __pyx_v_captureStatus_out, __pyx_v_id_out, __pyx_v_graph_out, __pyx_v_dependencies_out, __pyx_v_edgeData_out, __pyx_v_numDependencies_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 451, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":450
 *     return _cudaStreamGetCaptureInfo_v2(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 * 
 * cdef cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamGetCaptureInfo_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamGetCaptureInfo_v3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":453
 *     return _cudaStreamGetCaptureInfo_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamUpdateCaptureDependencies(stream, dependencies, numDependencies, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamUpdateCaptureDependencies(cudaStream_t __pyx_v_stream, cudaGraphNode_t *__pyx_v_dependencies, size_t __pyx_v_numDependencies, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamUpdateCaptureDependencies", __pyx_f[0], 453, 1, __PYX_ERR(0, 453, __pyx_L1_error));

  /* "cuda/ccudart.pyx":454
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamUpdateCaptureDependencies(stream, dependencies, numDependencies, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamUpdateCaptureDependencies(__pyx_v_stream, __pyx_v_dependencies, __pyx_v_numDependencies, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":453
 *     return _cudaStreamGetCaptureInfo_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamUpdateCaptureDependencies(stream, dependencies, numDependencies, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamUpdateCaptureDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":456
 *     return _cudaStreamUpdateCaptureDependencies(stream, dependencies, numDependencies, flags)
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamUpdateCaptureDependencies_v2(stream, dependencies, dependencyData, numDependencies, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaStreamUpdateCaptureDependencies_v2(cudaStream_t __pyx_v_stream, cudaGraphNode_t *__pyx_v_dependencies, cudaGraphEdgeData const *__pyx_v_dependencyData, size_t __pyx_v_numDependencies, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaStreamUpdateCaptureDependencies_v2", __pyx_f[0], 456, 1, __PYX_ERR(0, 456, __pyx_L1_error));

  /* "cuda/ccudart.pyx":457
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaStreamUpdateCaptureDependencies_v2(stream, dependencies, dependencyData, numDependencies, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamUpdateCaptureDependencies_v2(__pyx_v_stream, __pyx_v_dependencies, __pyx_v_dependencyData, __pyx_v_numDependencies, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 457, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":456
 *     return _cudaStreamUpdateCaptureDependencies(stream, dependencies, numDependencies, flags)
 * 
 * cdef cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaStreamUpdateCaptureDependencies_v2(stream, dependencies, dependencyData, numDependencies, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaStreamUpdateCaptureDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":459
 *     return _cudaStreamUpdateCaptureDependencies_v2(stream, dependencies, dependencyData, numDependencies, flags)
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreate(event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventCreate(cudaEvent_t *__pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventCreate", __pyx_f[0], 459, 1, __PYX_ERR(0, 459, __pyx_L1_error));

  /* "cuda/ccudart.pyx":460
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventCreate(event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreate(__pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":459
 *     return _cudaStreamUpdateCaptureDependencies_v2(stream, dependencies, dependencyData, numDependencies, flags)
 * 
 * cdef cudaError_t cudaEventCreate(cudaEvent_t* event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreate(event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":462
 *     return _cudaEventCreate(event)
 * 
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreateWithFlags(event, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventCreateWithFlags(cudaEvent_t *__pyx_v_event, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventCreateWithFlags", __pyx_f[0], 462, 1, __PYX_ERR(0, 462, __pyx_L1_error));

  /* "cuda/ccudart.pyx":463
 * 
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventCreateWithFlags(event, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreateWithFlags(__pyx_v_event, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 463, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":462
 *     return _cudaEventCreate(event)
 * 
 * cdef cudaError_t cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreateWithFlags(event, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventCreateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":465
 *     return _cudaEventCreateWithFlags(event, flags)
 * 
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventRecord(event, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventRecord(cudaEvent_t __pyx_v_event, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventRecord", __pyx_f[0], 465, 1, __PYX_ERR(0, 465, __pyx_L1_error));

  /* "cuda/ccudart.pyx":466
 * 
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventRecord(event, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventRecord(__pyx_v_event, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":465
 *     return _cudaEventCreateWithFlags(event, flags)
 * 
 * cdef cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventRecord(event, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventRecord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":468
 *     return _cudaEventRecord(event, stream)
 * 
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventRecordWithFlags(event, stream, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventRecordWithFlags(cudaEvent_t __pyx_v_event, cudaStream_t __pyx_v_stream, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventRecordWithFlags", __pyx_f[0], 468, 1, __PYX_ERR(0, 468, __pyx_L1_error));

  /* "cuda/ccudart.pyx":469
 * 
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventRecordWithFlags(event, stream, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventRecordWithFlags(__pyx_v_event, __pyx_v_stream, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":468
 *     return _cudaEventRecord(event, stream)
 * 
 * cdef cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventRecordWithFlags(event, stream, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventRecordWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":471
 *     return _cudaEventRecordWithFlags(event, stream, flags)
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventQuery(event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventQuery(cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventQuery", __pyx_f[0], 471, 1, __PYX_ERR(0, 471, __pyx_L1_error));

  /* "cuda/ccudart.pyx":472
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventQuery(event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventQuery(__pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":471
 *     return _cudaEventRecordWithFlags(event, stream, flags)
 * 
 * cdef cudaError_t cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventQuery(event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventQuery", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":474
 *     return _cudaEventQuery(event)
 * 
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventSynchronize(event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventSynchronize(cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventSynchronize", __pyx_f[0], 474, 1, __PYX_ERR(0, 474, __pyx_L1_error));

  /* "cuda/ccudart.pyx":475
 * 
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventSynchronize(event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventSynchronize(__pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":474
 *     return _cudaEventQuery(event)
 * 
 * cdef cudaError_t cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventSynchronize(event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":477
 *     return _cudaEventSynchronize(event)
 * 
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventDestroy(event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventDestroy(cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventDestroy", __pyx_f[0], 477, 1, __PYX_ERR(0, 477, __pyx_L1_error));

  /* "cuda/ccudart.pyx":478
 * 
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventDestroy(event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventDestroy(__pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 478, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":477
 *     return _cudaEventSynchronize(event)
 * 
 * cdef cudaError_t cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventDestroy(event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":480
 *     return _cudaEventDestroy(event)
 * 
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventElapsedTime(ms, start, end)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventElapsedTime(float *__pyx_v_ms, cudaEvent_t __pyx_v_start, cudaEvent_t __pyx_v_end) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventElapsedTime", __pyx_f[0], 480, 1, __PYX_ERR(0, 480, __pyx_L1_error));

  /* "cuda/ccudart.pyx":481
 * 
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventElapsedTime(ms, start, end)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventElapsedTime(__pyx_v_ms, __pyx_v_start, __pyx_v_end); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 481, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":480
 *     return _cudaEventDestroy(event)
 * 
 * cdef cudaError_t cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventElapsedTime(ms, start, end)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventElapsedTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":483
 *     return _cudaEventElapsedTime(ms, start, end)
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaImportExternalMemory(cudaExternalMemory_t *__pyx_v_extMem_out, struct cudaExternalMemoryHandleDesc const *__pyx_v_memHandleDesc) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaImportExternalMemory", __pyx_f[0], 483, 1, __PYX_ERR(0, 483, __pyx_L1_error));

  /* "cuda/ccudart.pyx":484
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalMemory(__pyx_v_extMem_out, __pyx_v_memHandleDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 484, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":483
 *     return _cudaEventElapsedTime(ms, start, end)
 * 
 * cdef cudaError_t cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaImportExternalMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":486
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedBuffer(void **__pyx_v_devPtr, cudaExternalMemory_t __pyx_v_extMem, struct cudaExternalMemoryBufferDesc const *__pyx_v_bufferDesc) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaExternalMemoryGetMappedBuffer", __pyx_f[0], 486, 1, __PYX_ERR(0, 486, __pyx_L1_error));

  /* "cuda/ccudart.pyx":487
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedBuffer(__pyx_v_devPtr, __pyx_v_extMem, __pyx_v_bufferDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":486
 *     return _cudaImportExternalMemory(extMem_out, memHandleDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaExternalMemoryGetMappedBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":489
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *__pyx_v_mipmap, cudaExternalMemory_t __pyx_v_extMem, struct cudaExternalMemoryMipmappedArrayDesc const *__pyx_v_mipmapDesc) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaExternalMemoryGetMappedMipmappedArray", __pyx_f[0], 489, 1, __PYX_ERR(0, 489, __pyx_L1_error));

  /* "cuda/ccudart.pyx":490
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedMipmappedArray(__pyx_v_mipmap, __pyx_v_extMem, __pyx_v_mipmapDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":489
 *     return _cudaExternalMemoryGetMappedBuffer(devPtr, extMem, bufferDesc)
 * 
 * cdef cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaExternalMemoryGetMappedMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":492
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroyExternalMemory(extMem)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroyExternalMemory(cudaExternalMemory_t __pyx_v_extMem) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDestroyExternalMemory", __pyx_f[0], 492, 1, __PYX_ERR(0, 492, __pyx_L1_error));

  /* "cuda/ccudart.pyx":493
 * 
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDestroyExternalMemory(extMem)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyExternalMemory(__pyx_v_extMem); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 493, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":492
 *     return _cudaExternalMemoryGetMappedMipmappedArray(mipmap, extMem, mipmapDesc)
 * 
 * cdef cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroyExternalMemory(extMem)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDestroyExternalMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":495
 *     return _cudaDestroyExternalMemory(extMem)
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaImportExternalSemaphore(cudaExternalSemaphore_t *__pyx_v_extSem_out, struct cudaExternalSemaphoreHandleDesc const *__pyx_v_semHandleDesc) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaImportExternalSemaphore", __pyx_f[0], 495, 1, __PYX_ERR(0, 495, __pyx_L1_error));

  /* "cuda/ccudart.pyx":496
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalSemaphore(__pyx_v_extSem_out, __pyx_v_semHandleDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":495
 *     return _cudaDestroyExternalMemory(extMem)
 * 
 * cdef cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaImportExternalSemaphore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":498
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaSignalExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaSignalExternalSemaphoresAsync(cudaExternalSemaphore_t const *__pyx_v_extSemArray, struct cudaExternalSemaphoreSignalParams const *__pyx_v_paramsArray, unsigned int __pyx_v_numExtSems, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaSignalExternalSemaphoresAsync", __pyx_f[0], 498, 1, __PYX_ERR(0, 498, __pyx_L1_error));

  /* "cuda/ccudart.pyx":499
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaSignalExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSignalExternalSemaphoresAsync_v2(__pyx_v_extSemArray, __pyx_v_paramsArray, __pyx_v_numExtSems, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":498
 *     return _cudaImportExternalSemaphore(extSem_out, semHandleDesc)
 * 
 * cdef cudaError_t cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaSignalExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaSignalExternalSemaphoresAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":501
 *     return _cudaSignalExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaWaitExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaWaitExternalSemaphoresAsync(cudaExternalSemaphore_t const *__pyx_v_extSemArray, struct cudaExternalSemaphoreWaitParams const *__pyx_v_paramsArray, unsigned int __pyx_v_numExtSems, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaWaitExternalSemaphoresAsync", __pyx_f[0], 501, 1, __PYX_ERR(0, 501, __pyx_L1_error));

  /* "cuda/ccudart.pyx":502
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaWaitExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaWaitExternalSemaphoresAsync_v2(__pyx_v_extSemArray, __pyx_v_paramsArray, __pyx_v_numExtSems, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 502, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":501
 *     return _cudaSignalExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaWaitExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaWaitExternalSemaphoresAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":504
 *     return _cudaWaitExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroyExternalSemaphore(extSem)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroyExternalSemaphore(cudaExternalSemaphore_t __pyx_v_extSem) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDestroyExternalSemaphore", __pyx_f[0], 504, 1, __PYX_ERR(0, 504, __pyx_L1_error));

  /* "cuda/ccudart.pyx":505
 * 
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDestroyExternalSemaphore(extSem)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyExternalSemaphore(__pyx_v_extSem); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":504
 *     return _cudaWaitExternalSemaphoresAsync_v2(extSemArray, paramsArray, numExtSems, stream)
 * 
 * cdef cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroyExternalSemaphore(extSem)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDestroyExternalSemaphore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":507
 *     return _cudaDestroyExternalSemaphore(extSem)
 * 
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncSetCacheConfig(func, cacheConfig)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncSetCacheConfig(void const *__pyx_v_func, enum cudaFuncCache __pyx_v_cacheConfig) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFuncSetCacheConfig", __pyx_f[0], 507, 1, __PYX_ERR(0, 507, __pyx_L1_error));

  /* "cuda/ccudart.pyx":508
 * 
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFuncSetCacheConfig(func, cacheConfig)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetCacheConfig(__pyx_v_func, __pyx_v_cacheConfig); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 508, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":507
 *     return _cudaDestroyExternalSemaphore(extSem)
 * 
 * cdef cudaError_t cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncSetCacheConfig(func, cacheConfig)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFuncSetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":510
 *     return _cudaFuncSetCacheConfig(func, cacheConfig)
 * 
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncSetSharedMemConfig(func, config)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncSetSharedMemConfig(void const *__pyx_v_func, enum cudaSharedMemConfig __pyx_v_config) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFuncSetSharedMemConfig", __pyx_f[0], 510, 1, __PYX_ERR(0, 510, __pyx_L1_error));

  /* "cuda/ccudart.pyx":511
 * 
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFuncSetSharedMemConfig(func, config)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetSharedMemConfig(__pyx_v_func, __pyx_v_config); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 511, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":510
 *     return _cudaFuncSetCacheConfig(func, cacheConfig)
 * 
 * cdef cudaError_t cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncSetSharedMemConfig(func, config)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFuncSetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":513
 *     return _cudaFuncSetSharedMemConfig(func, config)
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncGetAttributes(struct cudaFuncAttributes *__pyx_v_attr, void const *__pyx_v_func) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFuncGetAttributes", __pyx_f[0], 513, 1, __PYX_ERR(0, 513, __pyx_L1_error));

  /* "cuda/ccudart.pyx":514
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFuncGetAttributes(attr, func)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncGetAttributes(__pyx_v_attr, __pyx_v_func); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 514, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":513
 *     return _cudaFuncSetSharedMemConfig(func, config)
 * 
 * cdef cudaError_t cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFuncGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":516
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncSetAttribute(func, attr, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFuncSetAttribute(void const *__pyx_v_func, enum cudaFuncAttribute __pyx_v_attr, int __pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFuncSetAttribute", __pyx_f[0], 516, 1, __PYX_ERR(0, 516, __pyx_L1_error));

  /* "cuda/ccudart.pyx":517
 * 
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFuncSetAttribute(func, attr, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetAttribute(__pyx_v_func, __pyx_v_attr, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 517, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":516
 *     return _cudaFuncGetAttributes(attr, func)
 * 
 * cdef cudaError_t cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFuncSetAttribute(func, attr, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFuncSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":519
 *     return _cudaFuncSetAttribute(func, attr, value)
 * 
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaLaunchHostFunc(stream, fn, userData)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaLaunchHostFunc(cudaStream_t __pyx_v_stream, cudaHostFn_t __pyx_v_fn, void *__pyx_v_userData) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaLaunchHostFunc", __pyx_f[0], 519, 1, __PYX_ERR(0, 519, __pyx_L1_error));

  /* "cuda/ccudart.pyx":520
 * 
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaLaunchHostFunc(stream, fn, userData)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaLaunchHostFunc(__pyx_v_stream, __pyx_v_fn, __pyx_v_userData); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":519
 *     return _cudaFuncSetAttribute(func, attr, value)
 * 
 * cdef cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaLaunchHostFunc(stream, fn, userData)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaLaunchHostFunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":522
 *     return _cudaLaunchHostFunc(stream, fn, userData)
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, func, blockSize, dynamicSMemSize)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *__pyx_v_numBlocks, void const *__pyx_v_func, int __pyx_v_blockSize, size_t __pyx_v_dynamicSMemSize) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaOccupancyMaxActiveBlocksPerMultiprocessor", __pyx_f[0], 522, 1, __PYX_ERR(0, 522, __pyx_L1_error));

  /* "cuda/ccudart.pyx":523
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, func, blockSize, dynamicSMemSize)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyMaxActiveBlocksPerMultiprocessor(__pyx_v_numBlocks, __pyx_v_func, __pyx_v_blockSize, __pyx_v_dynamicSMemSize); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":522
 *     return _cudaLaunchHostFunc(stream, fn, userData)
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, func, blockSize, dynamicSMemSize)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaOccupancyMaxActiveBlocksPerMultiprocessor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":525
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, func, blockSize, dynamicSMemSize)
 * 
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, func, numBlocks, blockSize)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaOccupancyAvailableDynamicSMemPerBlock(size_t *__pyx_v_dynamicSmemSize, void const *__pyx_v_func, int __pyx_v_numBlocks, int __pyx_v_blockSize) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaOccupancyAvailableDynamicSMemPerBlock", __pyx_f[0], 525, 1, __PYX_ERR(0, 525, __pyx_L1_error));

  /* "cuda/ccudart.pyx":526
 * 
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, func, numBlocks, blockSize)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyAvailableDynamicSMemPerBlock(__pyx_v_dynamicSmemSize, __pyx_v_func, __pyx_v_numBlocks, __pyx_v_blockSize); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":525
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, func, blockSize, dynamicSMemSize)
 * 
 * cdef cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, func, numBlocks, blockSize)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaOccupancyAvailableDynamicSMemPerBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":528
 *     return _cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, func, numBlocks, blockSize)
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, func, blockSize, dynamicSMemSize, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *__pyx_v_numBlocks, void const *__pyx_v_func, int __pyx_v_blockSize, size_t __pyx_v_dynamicSMemSize, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", __pyx_f[0], 528, 1, __PYX_ERR(0, 528, __pyx_L1_error));

  /* "cuda/ccudart.pyx":529
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, func, blockSize, dynamicSMemSize, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(__pyx_v_numBlocks, __pyx_v_func, __pyx_v_blockSize, __pyx_v_dynamicSMemSize, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 529, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":528
 *     return _cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, func, numBlocks, blockSize)
 * 
 * cdef cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, func, blockSize, dynamicSMemSize, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":531
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, func, blockSize, dynamicSMemSize, flags)
 * 
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocManaged(devPtr, size, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocManaged(void **__pyx_v_devPtr, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMallocManaged", __pyx_f[0], 531, 1, __PYX_ERR(0, 531, __pyx_L1_error));

  /* "cuda/ccudart.pyx":532
 * 
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMallocManaged(devPtr, size, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocManaged(__pyx_v_devPtr, __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 532, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":531
 *     return _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, func, blockSize, dynamicSMemSize, flags)
 * 
 * cdef cudaError_t cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocManaged(devPtr, size, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMallocManaged", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":534
 *     return _cudaMallocManaged(devPtr, size, flags)
 * 
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc(devPtr, size)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMalloc(void **__pyx_v_devPtr, size_t __pyx_v_size) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMalloc", __pyx_f[0], 534, 1, __PYX_ERR(0, 534, __pyx_L1_error));

  /* "cuda/ccudart.pyx":535
 * 
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMalloc(devPtr, size)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc(__pyx_v_devPtr, __pyx_v_size); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":534
 *     return _cudaMallocManaged(devPtr, size, flags)
 * 
 * cdef cudaError_t cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc(devPtr, size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMalloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":537
 *     return _cudaMalloc(devPtr, size)
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocHost(ptr, size)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocHost(void **__pyx_v_ptr, size_t __pyx_v_size) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMallocHost", __pyx_f[0], 537, 1, __PYX_ERR(0, 537, __pyx_L1_error));

  /* "cuda/ccudart.pyx":538
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMallocHost(ptr, size)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocHost(__pyx_v_ptr, __pyx_v_size); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 538, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":537
 *     return _cudaMalloc(devPtr, size)
 * 
 * cdef cudaError_t cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocHost(ptr, size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMallocHost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":540
 *     return _cudaMallocHost(ptr, size)
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocPitch(void **__pyx_v_devPtr, size_t *__pyx_v_pitch, size_t __pyx_v_width, size_t __pyx_v_height) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMallocPitch", __pyx_f[0], 540, 1, __PYX_ERR(0, 540, __pyx_L1_error));

  /* "cuda/ccudart.pyx":541
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMallocPitch(devPtr, pitch, width, height)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocPitch(__pyx_v_devPtr, __pyx_v_pitch, __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":540
 *     return _cudaMallocHost(ptr, size)
 * 
 * cdef cudaError_t cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMallocPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":543
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocArray(cudaArray_t *__pyx_v_array, struct cudaChannelFormatDesc const *__pyx_v_desc, size_t __pyx_v_width, size_t __pyx_v_height, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMallocArray", __pyx_f[0], 543, 1, __PYX_ERR(0, 543, __pyx_L1_error));

  /* "cuda/ccudart.pyx":544
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMallocArray(array, desc, width, height, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocArray(__pyx_v_array, __pyx_v_desc, __pyx_v_width, __pyx_v_height, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":543
 *     return _cudaMallocPitch(devPtr, pitch, width, height)
 * 
 * cdef cudaError_t cudaMallocArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMallocArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":546
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 * cdef cudaError_t cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFree(devPtr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFree(void *__pyx_v_devPtr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFree", __pyx_f[0], 546, 1, __PYX_ERR(0, 546, __pyx_L1_error));

  /* "cuda/ccudart.pyx":547
 * 
 * cdef cudaError_t cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFree(devPtr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFree(__pyx_v_devPtr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 547, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":546
 *     return _cudaMallocArray(array, desc, width, height, flags)
 * 
 * cdef cudaError_t cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFree(devPtr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":549
 *     return _cudaFree(devPtr)
 * 
 * cdef cudaError_t cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeHost(ptr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeHost(void *__pyx_v_ptr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFreeHost", __pyx_f[0], 549, 1, __PYX_ERR(0, 549, __pyx_L1_error));

  /* "cuda/ccudart.pyx":550
 * 
 * cdef cudaError_t cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFreeHost(ptr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeHost(__pyx_v_ptr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 550, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":549
 *     return _cudaFree(devPtr)
 * 
 * cdef cudaError_t cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeHost(ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFreeHost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":552
 *     return _cudaFreeHost(ptr)
 * 
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeArray(array)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeArray(cudaArray_t __pyx_v_array) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFreeArray", __pyx_f[0], 552, 1, __PYX_ERR(0, 552, __pyx_L1_error));

  /* "cuda/ccudart.pyx":553
 * 
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFreeArray(array)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeArray(__pyx_v_array); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 553, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":552
 *     return _cudaFreeHost(ptr)
 * 
 * cdef cudaError_t cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeArray(array)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFreeArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":555
 *     return _cudaFreeArray(array)
 * 
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeMipmappedArray(mipmappedArray)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeMipmappedArray(cudaMipmappedArray_t __pyx_v_mipmappedArray) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFreeMipmappedArray", __pyx_f[0], 555, 1, __PYX_ERR(0, 555, __pyx_L1_error));

  /* "cuda/ccudart.pyx":556
 * 
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFreeMipmappedArray(mipmappedArray)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeMipmappedArray(__pyx_v_mipmappedArray); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 556, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":555
 *     return _cudaFreeArray(array)
 * 
 * cdef cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeMipmappedArray(mipmappedArray)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFreeMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":558
 *     return _cudaFreeMipmappedArray(mipmappedArray)
 * 
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostAlloc(pHost, size, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaHostAlloc(void **__pyx_v_pHost, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaHostAlloc", __pyx_f[0], 558, 1, __PYX_ERR(0, 558, __pyx_L1_error));

  /* "cuda/ccudart.pyx":559
 * 
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaHostAlloc(pHost, size, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostAlloc(__pyx_v_pHost, __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 559, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":558
 *     return _cudaFreeMipmappedArray(mipmappedArray)
 * 
 * cdef cudaError_t cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostAlloc(pHost, size, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaHostAlloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":561
 *     return _cudaHostAlloc(pHost, size, flags)
 * 
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostRegister(ptr, size, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaHostRegister(void *__pyx_v_ptr, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaHostRegister", __pyx_f[0], 561, 1, __PYX_ERR(0, 561, __pyx_L1_error));

  /* "cuda/ccudart.pyx":562
 * 
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaHostRegister(ptr, size, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostRegister(__pyx_v_ptr, __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 562, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":561
 *     return _cudaHostAlloc(pHost, size, flags)
 * 
 * cdef cudaError_t cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostRegister(ptr, size, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaHostRegister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":564
 *     return _cudaHostRegister(ptr, size, flags)
 * 
 * cdef cudaError_t cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostUnregister(ptr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaHostUnregister(void *__pyx_v_ptr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaHostUnregister", __pyx_f[0], 564, 1, __PYX_ERR(0, 564, __pyx_L1_error));

  /* "cuda/ccudart.pyx":565
 * 
 * cdef cudaError_t cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaHostUnregister(ptr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostUnregister(__pyx_v_ptr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 565, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":564
 *     return _cudaHostRegister(ptr, size, flags)
 * 
 * cdef cudaError_t cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostUnregister(ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaHostUnregister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":567
 *     return _cudaHostUnregister(ptr)
 * 
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostGetDevicePointer(pDevice, pHost, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaHostGetDevicePointer(void **__pyx_v_pDevice, void *__pyx_v_pHost, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaHostGetDevicePointer", __pyx_f[0], 567, 1, __PYX_ERR(0, 567, __pyx_L1_error));

  /* "cuda/ccudart.pyx":568
 * 
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaHostGetDevicePointer(pDevice, pHost, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostGetDevicePointer(__pyx_v_pDevice, __pyx_v_pHost, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":567
 *     return _cudaHostUnregister(ptr)
 * 
 * cdef cudaError_t cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostGetDevicePointer(pDevice, pHost, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaHostGetDevicePointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":570
 *     return _cudaHostGetDevicePointer(pDevice, pHost, flags)
 * 
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostGetFlags(pFlags, pHost)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaHostGetFlags(unsigned int *__pyx_v_pFlags, void *__pyx_v_pHost) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaHostGetFlags", __pyx_f[0], 570, 1, __PYX_ERR(0, 570, __pyx_L1_error));

  /* "cuda/ccudart.pyx":571
 * 
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaHostGetFlags(pFlags, pHost)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostGetFlags(__pyx_v_pFlags, __pyx_v_pHost); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":570
 *     return _cudaHostGetDevicePointer(pDevice, pHost, flags)
 * 
 * cdef cudaError_t cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaHostGetFlags(pFlags, pHost)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaHostGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":573
 *     return _cudaHostGetFlags(pFlags, pHost)
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMalloc3D(struct cudaPitchedPtr *__pyx_v_pitchedDevPtr, struct cudaExtent __pyx_v_extent) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMalloc3D", __pyx_f[0], 573, 1, __PYX_ERR(0, 573, __pyx_L1_error));

  /* "cuda/ccudart.pyx":574
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMalloc3D(pitchedDevPtr, extent)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3D(__pyx_v_pitchedDevPtr, __pyx_v_extent); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":573
 *     return _cudaHostGetFlags(pFlags, pHost)
 * 
 * cdef cudaError_t cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMalloc3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":576
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMalloc3DArray(cudaArray_t *__pyx_v_array, struct cudaChannelFormatDesc const *__pyx_v_desc, struct cudaExtent __pyx_v_extent, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMalloc3DArray", __pyx_f[0], 576, 1, __PYX_ERR(0, 576, __pyx_L1_error));

  /* "cuda/ccudart.pyx":577
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMalloc3DArray(array, desc, extent, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3DArray(__pyx_v_array, __pyx_v_desc, __pyx_v_extent, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 577, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":576
 *     return _cudaMalloc3D(pitchedDevPtr, extent)
 * 
 * cdef cudaError_t cudaMalloc3DArray(cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMalloc3DArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":579
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocMipmappedArray(cudaMipmappedArray_t *__pyx_v_mipmappedArray, struct cudaChannelFormatDesc const *__pyx_v_desc, struct cudaExtent __pyx_v_extent, unsigned int __pyx_v_numLevels, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMallocMipmappedArray", __pyx_f[0], 579, 1, __PYX_ERR(0, 579, __pyx_L1_error));

  /* "cuda/ccudart.pyx":580
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocMipmappedArray(__pyx_v_mipmappedArray, __pyx_v_desc, __pyx_v_extent, __pyx_v_numLevels, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":579
 *     return _cudaMalloc3DArray(array, desc, extent, flags)
 * 
 * cdef cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMallocMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":582
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetMipmappedArrayLevel(levelArray, mipmappedArray, level)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetMipmappedArrayLevel(cudaArray_t *__pyx_v_levelArray, cudaMipmappedArray_const_t __pyx_v_mipmappedArray, unsigned int __pyx_v_level) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetMipmappedArrayLevel", __pyx_f[0], 582, 1, __PYX_ERR(0, 582, __pyx_L1_error));

  /* "cuda/ccudart.pyx":583
 * 
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetMipmappedArrayLevel(levelArray, mipmappedArray, level)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetMipmappedArrayLevel(__pyx_v_levelArray, __pyx_v_mipmappedArray, __pyx_v_level); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 583, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":582
 *     return _cudaMallocMipmappedArray(mipmappedArray, desc, extent, numLevels, flags)
 * 
 * cdef cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetMipmappedArrayLevel(levelArray, mipmappedArray, level)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetMipmappedArrayLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":585
 *     return _cudaGetMipmappedArrayLevel(levelArray, mipmappedArray, level)
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3D(p)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3D(struct cudaMemcpy3DParms const *__pyx_v_p) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy3D", __pyx_f[0], 585, 1, __PYX_ERR(0, 585, __pyx_L1_error));

  /* "cuda/ccudart.pyx":586
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy3D(p)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3D(__pyx_v_p); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 586, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":585
 *     return _cudaGetMipmappedArrayLevel(levelArray, mipmappedArray, level)
 * 
 * cdef cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3D(p)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":588
 *     return _cudaMemcpy3D(p)
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeer(p)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3DPeer(struct cudaMemcpy3DPeerParms const *__pyx_v_p) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy3DPeer", __pyx_f[0], 588, 1, __PYX_ERR(0, 588, __pyx_L1_error));

  /* "cuda/ccudart.pyx":589
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy3DPeer(p)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeer(__pyx_v_p); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 589, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":588
 *     return _cudaMemcpy3D(p)
 * 
 * cdef cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeer(p)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3DPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":591
 *     return _cudaMemcpy3DPeer(p)
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3DAsync(struct cudaMemcpy3DParms const *__pyx_v_p, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy3DAsync", __pyx_f[0], 591, 1, __PYX_ERR(0, 591, __pyx_L1_error));

  /* "cuda/ccudart.pyx":592
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy3DAsync(p, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DAsync(__pyx_v_p, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":591
 *     return _cudaMemcpy3DPeer(p)
 * 
 * cdef cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":594
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy3DPeerAsync(struct cudaMemcpy3DPeerParms const *__pyx_v_p, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy3DPeerAsync", __pyx_f[0], 594, 1, __PYX_ERR(0, 594, __pyx_L1_error));

  /* "cuda/ccudart.pyx":595
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy3DPeerAsync(p, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeerAsync(__pyx_v_p, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":594
 *     return _cudaMemcpy3DAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy3DPeerAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":597
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemGetInfo(free, total)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemGetInfo(size_t *__pyx_v_free, size_t *__pyx_v_total) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemGetInfo", __pyx_f[0], 597, 1, __PYX_ERR(0, 597, __pyx_L1_error));

  /* "cuda/ccudart.pyx":598
 * 
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemGetInfo(free, total)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemGetInfo(__pyx_v_free, __pyx_v_total); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":597
 *     return _cudaMemcpy3DPeerAsync(p, stream)
 * 
 * cdef cudaError_t cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemGetInfo(free, total)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemGetInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":600
 *     return _cudaMemGetInfo(free, total)
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetInfo(struct cudaChannelFormatDesc *__pyx_v_desc, struct cudaExtent *__pyx_v_extent, unsigned int *__pyx_v_flags, cudaArray_t __pyx_v_array) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaArrayGetInfo", __pyx_f[0], 600, 1, __PYX_ERR(0, 600, __pyx_L1_error));

  /* "cuda/ccudart.pyx":601
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaArrayGetInfo(desc, extent, flags, array)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetInfo(__pyx_v_desc, __pyx_v_extent, __pyx_v_flags, __pyx_v_array); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 601, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":600
 *     return _cudaMemGetInfo(free, total)
 * 
 * cdef cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":603
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetPlane(pPlaneArray, hArray, planeIdx)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetPlane(cudaArray_t *__pyx_v_pPlaneArray, cudaArray_t __pyx_v_hArray, unsigned int __pyx_v_planeIdx) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaArrayGetPlane", __pyx_f[0], 603, 1, __PYX_ERR(0, 603, __pyx_L1_error));

  /* "cuda/ccudart.pyx":604
 * 
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaArrayGetPlane(pPlaneArray, hArray, planeIdx)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetPlane(__pyx_v_pPlaneArray, __pyx_v_hArray, __pyx_v_planeIdx); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":603
 *     return _cudaArrayGetInfo(desc, extent, flags, array)
 * 
 * cdef cudaError_t cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetPlane(pPlaneArray, hArray, planeIdx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetPlane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":606
 *     return _cudaArrayGetPlane(pPlaneArray, hArray, planeIdx)
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *__pyx_v_memoryRequirements, cudaArray_t __pyx_v_array, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaArrayGetMemoryRequirements", __pyx_f[0], 606, 1, __PYX_ERR(0, 606, __pyx_L1_error));

  /* "cuda/ccudart.pyx":607
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetMemoryRequirements(__pyx_v_memoryRequirements, __pyx_v_array, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 607, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":606
 *     return _cudaArrayGetPlane(pPlaneArray, hArray, planeIdx)
 * 
 * cdef cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetMemoryRequirements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":609
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *__pyx_v_memoryRequirements, cudaMipmappedArray_t __pyx_v_mipmap, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMipmappedArrayGetMemoryRequirements", __pyx_f[0], 609, 1, __PYX_ERR(0, 609, __pyx_L1_error));

  /* "cuda/ccudart.pyx":610
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetMemoryRequirements(__pyx_v_memoryRequirements, __pyx_v_mipmap, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":609
 *     return _cudaArrayGetMemoryRequirements(memoryRequirements, array, device)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMipmappedArrayGetMemoryRequirements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":612
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaArrayGetSparseProperties(struct cudaArraySparseProperties *__pyx_v_sparseProperties, cudaArray_t __pyx_v_array) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaArrayGetSparseProperties", __pyx_f[0], 612, 1, __PYX_ERR(0, 612, __pyx_L1_error));

  /* "cuda/ccudart.pyx":613
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetSparseProperties(__pyx_v_sparseProperties, __pyx_v_array); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":612
 *     return _cudaMipmappedArrayGetMemoryRequirements(memoryRequirements, mipmap, device)
 * 
 * cdef cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaArrayGetSparseProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":615
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *__pyx_v_sparseProperties, cudaMipmappedArray_t __pyx_v_mipmap) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMipmappedArrayGetSparseProperties", __pyx_f[0], 615, 1, __PYX_ERR(0, 615, __pyx_L1_error));

  /* "cuda/ccudart.pyx":616
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetSparseProperties(__pyx_v_sparseProperties, __pyx_v_mipmap); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":615
 *     return _cudaArrayGetSparseProperties(sparseProperties, array)
 * 
 * cdef cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMipmappedArrayGetSparseProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":618
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy(void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy", __pyx_f[0], 618, 1, __PYX_ERR(0, 618, __pyx_L1_error));

  /* "cuda/ccudart.pyx":619
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy(dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 619, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":618
 *     return _cudaMipmappedArrayGetSparseProperties(sparseProperties, mipmap)
 * 
 * cdef cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":621
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyPeer(void *__pyx_v_dst, int __pyx_v_dstDevice, void const *__pyx_v_src, int __pyx_v_srcDevice, size_t __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyPeer", __pyx_f[0], 621, 1, __PYX_ERR(0, 621, __pyx_L1_error));

  /* "cuda/ccudart.pyx":622
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeer(__pyx_v_dst, __pyx_v_dstDevice, __pyx_v_src, __pyx_v_srcDevice, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":621
 *     return _cudaMemcpy(dst, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":624
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2D(void *__pyx_v_dst, size_t __pyx_v_dpitch, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy2D", __pyx_f[0], 624, 1, __PYX_ERR(0, 624, __pyx_L1_error));

  /* "cuda/ccudart.pyx":625
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2D(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 625, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":624
 *     return _cudaMemcpyPeer(dst, dstDevice, src, srcDevice, count)
 * 
 * cdef cudaError_t cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":627
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy2DToArray", __pyx_f[0], 627, 1, __PYX_ERR(0, 627, __pyx_L1_error));

  /* "cuda/ccudart.pyx":628
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArray(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 628, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":627
 *     return _cudaMemcpy2D(dst, dpitch, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":630
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArray(void *__pyx_v_dst, size_t __pyx_v_dpitch, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy2DFromArray", __pyx_f[0], 630, 1, __PYX_ERR(0, 630, __pyx_L1_error));

  /* "cuda/ccudart.pyx":631
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArray(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 631, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":630
 *     return _cudaMemcpy2DToArray(dst, wOffset, hOffset, src, spitch, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DFromArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":633
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DArrayToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffsetDst, size_t __pyx_v_hOffsetDst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffsetSrc, size_t __pyx_v_hOffsetSrc, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy2DArrayToArray", __pyx_f[0], 633, 1, __PYX_ERR(0, 633, __pyx_L1_error));

  /* "cuda/ccudart.pyx":634
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DArrayToArray(__pyx_v_dst, __pyx_v_wOffsetDst, __pyx_v_hOffsetDst, __pyx_v_src, __pyx_v_wOffsetSrc, __pyx_v_hOffsetSrc, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":633
 *     return _cudaMemcpy2DFromArray(dst, dpitch, src, wOffset, hOffset, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DArrayToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":636
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyAsync(void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyAsync", __pyx_f[0], 636, 1, __PYX_ERR(0, 636, __pyx_L1_error));

  /* "cuda/ccudart.pyx":637
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyAsync(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 637, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":636
 *     return _cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind)
 * 
 * cdef cudaError_t cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":639
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyPeerAsync(void *__pyx_v_dst, int __pyx_v_dstDevice, void const *__pyx_v_src, int __pyx_v_srcDevice, size_t __pyx_v_count, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyPeerAsync", __pyx_f[0], 639, 1, __PYX_ERR(0, 639, __pyx_L1_error));

  /* "cuda/ccudart.pyx":640
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeerAsync(__pyx_v_dst, __pyx_v_dstDevice, __pyx_v_src, __pyx_v_srcDevice, __pyx_v_count, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 640, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":639
 *     return _cudaMemcpyAsync(dst, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyPeerAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":642
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DAsync(void *__pyx_v_dst, size_t __pyx_v_dpitch, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy2DAsync", __pyx_f[0], 642, 1, __PYX_ERR(0, 642, __pyx_L1_error));

  /* "cuda/ccudart.pyx":643
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DAsync(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":642
 *     return _cudaMemcpyPeerAsync(dst, dstDevice, src, srcDevice, count, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":645
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DToArrayAsync(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy2DToArrayAsync", __pyx_f[0], 645, 1, __PYX_ERR(0, 645, __pyx_L1_error));

  /* "cuda/ccudart.pyx":646
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArrayAsync(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":645
 *     return _cudaMemcpy2DAsync(dst, dpitch, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DToArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":648
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArrayAsync(void *__pyx_v_dst, size_t __pyx_v_dpitch, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpy2DFromArrayAsync", __pyx_f[0], 648, 1, __PYX_ERR(0, 648, __pyx_L1_error));

  /* "cuda/ccudart.pyx":649
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArrayAsync(__pyx_v_dst, __pyx_v_dpitch, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 649, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":648
 *     return _cudaMemcpy2DToArrayAsync(dst, wOffset, hOffset, src, spitch, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpy2DFromArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":651
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset(devPtr, value, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset(void *__pyx_v_devPtr, int __pyx_v_value, size_t __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemset", __pyx_f[0], 651, 1, __PYX_ERR(0, 651, __pyx_L1_error));

  /* "cuda/ccudart.pyx":652
 * 
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemset(devPtr, value, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset(__pyx_v_devPtr, __pyx_v_value, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 652, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":651
 *     return _cudaMemcpy2DFromArrayAsync(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream)
 * 
 * cdef cudaError_t cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset(devPtr, value, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":654
 *     return _cudaMemset(devPtr, value, count)
 * 
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset2D(devPtr, pitch, value, width, height)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset2D(void *__pyx_v_devPtr, size_t __pyx_v_pitch, int __pyx_v_value, size_t __pyx_v_width, size_t __pyx_v_height) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemset2D", __pyx_f[0], 654, 1, __PYX_ERR(0, 654, __pyx_L1_error));

  /* "cuda/ccudart.pyx":655
 * 
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemset2D(devPtr, pitch, value, width, height)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset2D(__pyx_v_devPtr, __pyx_v_pitch, __pyx_v_value, __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 655, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":654
 *     return _cudaMemset(devPtr, value, count)
 * 
 * cdef cudaError_t cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset2D(devPtr, pitch, value, width, height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemset2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":657
 *     return _cudaMemset2D(devPtr, pitch, value, width, height)
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset3D(struct cudaPitchedPtr __pyx_v_pitchedDevPtr, int __pyx_v_value, struct cudaExtent __pyx_v_extent) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemset3D", __pyx_f[0], 657, 1, __PYX_ERR(0, 657, __pyx_L1_error));

  /* "cuda/ccudart.pyx":658
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3D(__pyx_v_pitchedDevPtr, __pyx_v_value, __pyx_v_extent); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":657
 *     return _cudaMemset2D(devPtr, pitch, value, width, height)
 * 
 * cdef cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemset3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":660
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemsetAsync(devPtr, value, count, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemsetAsync(void *__pyx_v_devPtr, int __pyx_v_value, size_t __pyx_v_count, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemsetAsync", __pyx_f[0], 660, 1, __PYX_ERR(0, 660, __pyx_L1_error));

  /* "cuda/ccudart.pyx":661
 * 
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemsetAsync(devPtr, value, count, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemsetAsync(__pyx_v_devPtr, __pyx_v_value, __pyx_v_count, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 661, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":660
 *     return _cudaMemset3D(pitchedDevPtr, value, extent)
 * 
 * cdef cudaError_t cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemsetAsync(devPtr, value, count, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemsetAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":663
 *     return _cudaMemsetAsync(devPtr, value, count, stream)
 * 
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset2DAsync(devPtr, pitch, value, width, height, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset2DAsync(void *__pyx_v_devPtr, size_t __pyx_v_pitch, int __pyx_v_value, size_t __pyx_v_width, size_t __pyx_v_height, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemset2DAsync", __pyx_f[0], 663, 1, __PYX_ERR(0, 663, __pyx_L1_error));

  /* "cuda/ccudart.pyx":664
 * 
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemset2DAsync(devPtr, pitch, value, width, height, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset2DAsync(__pyx_v_devPtr, __pyx_v_pitch, __pyx_v_value, __pyx_v_width, __pyx_v_height, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 664, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":663
 *     return _cudaMemsetAsync(devPtr, value, count, stream)
 * 
 * cdef cudaError_t cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset2DAsync(devPtr, pitch, value, width, height, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemset2DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":666
 *     return _cudaMemset2DAsync(devPtr, pitch, value, width, height, stream)
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemset3DAsync(struct cudaPitchedPtr __pyx_v_pitchedDevPtr, int __pyx_v_value, struct cudaExtent __pyx_v_extent, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemset3DAsync", __pyx_f[0], 666, 1, __PYX_ERR(0, 666, __pyx_L1_error));

  /* "cuda/ccudart.pyx":667
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3DAsync(__pyx_v_pitchedDevPtr, __pyx_v_value, __pyx_v_extent, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 667, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":666
 *     return _cudaMemset2DAsync(devPtr, pitch, value, width, height, stream)
 * 
 * cdef cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemset3DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":669
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPrefetchAsync(devPtr, count, dstDevice, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPrefetchAsync(void const *__pyx_v_devPtr, size_t __pyx_v_count, int __pyx_v_dstDevice, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPrefetchAsync", __pyx_f[0], 669, 1, __PYX_ERR(0, 669, __pyx_L1_error));

  /* "cuda/ccudart.pyx":670
 * 
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPrefetchAsync(devPtr, count, dstDevice, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPrefetchAsync(__pyx_v_devPtr, __pyx_v_count, __pyx_v_dstDevice, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 670, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":669
 *     return _cudaMemset3DAsync(pitchedDevPtr, value, extent, stream)
 * 
 * cdef cudaError_t cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPrefetchAsync(devPtr, count, dstDevice, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPrefetchAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":672
 *     return _cudaMemPrefetchAsync(devPtr, count, dstDevice, stream)
 * 
 * cdef cudaError_t cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPrefetchAsync_v2(devPtr, count, location, flags, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPrefetchAsync_v2(void const *__pyx_v_devPtr, size_t __pyx_v_count, struct cudaMemLocation __pyx_v_location, unsigned int __pyx_v_flags, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPrefetchAsync_v2", __pyx_f[0], 672, 1, __PYX_ERR(0, 672, __pyx_L1_error));

  /* "cuda/ccudart.pyx":673
 * 
 * cdef cudaError_t cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPrefetchAsync_v2(devPtr, count, location, flags, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPrefetchAsync_v2(__pyx_v_devPtr, __pyx_v_count, __pyx_v_location, __pyx_v_flags, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 673, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":672
 *     return _cudaMemPrefetchAsync(devPtr, count, dstDevice, stream)
 * 
 * cdef cudaError_t cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPrefetchAsync_v2(devPtr, count, location, flags, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPrefetchAsync_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":675
 *     return _cudaMemPrefetchAsync_v2(devPtr, count, location, flags, stream)
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemAdvise(void const *__pyx_v_devPtr, size_t __pyx_v_count, enum cudaMemoryAdvise __pyx_v_advice, int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemAdvise", __pyx_f[0], 675, 1, __PYX_ERR(0, 675, __pyx_L1_error));

  /* "cuda/ccudart.pyx":676
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemAdvise(devPtr, count, advice, device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemAdvise_v2(const void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise(__pyx_v_devPtr, __pyx_v_count, __pyx_v_advice, __pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 676, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":675
 *     return _cudaMemPrefetchAsync_v2(devPtr, count, location, flags, stream)
 * 
 * cdef cudaError_t cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemAdvise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":678
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 * cdef cudaError_t cudaMemAdvise_v2(const void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemAdvise_v2(devPtr, count, advice, location)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemAdvise_v2(void const *__pyx_v_devPtr, size_t __pyx_v_count, enum cudaMemoryAdvise __pyx_v_advice, struct cudaMemLocation __pyx_v_location) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemAdvise_v2", __pyx_f[0], 678, 1, __PYX_ERR(0, 678, __pyx_L1_error));

  /* "cuda/ccudart.pyx":679
 * 
 * cdef cudaError_t cudaMemAdvise_v2(const void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemAdvise_v2(devPtr, count, advice, location)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise_v2(__pyx_v_devPtr, __pyx_v_count, __pyx_v_advice, __pyx_v_location); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 679, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":678
 *     return _cudaMemAdvise(devPtr, count, advice, device)
 * 
 * cdef cudaError_t cudaMemAdvise_v2(const void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemAdvise_v2(devPtr, count, advice, location)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemAdvise_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":681
 *     return _cudaMemAdvise_v2(devPtr, count, advice, location)
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemRangeGetAttribute(void *__pyx_v_data, size_t __pyx_v_dataSize, enum cudaMemRangeAttribute __pyx_v_attribute, void const *__pyx_v_devPtr, size_t __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemRangeGetAttribute", __pyx_f[0], 681, 1, __PYX_ERR(0, 681, __pyx_L1_error));

  /* "cuda/ccudart.pyx":682
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttribute(__pyx_v_data, __pyx_v_dataSize, __pyx_v_attribute, __pyx_v_devPtr, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 682, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":681
 *     return _cudaMemAdvise_v2(devPtr, count, advice, location)
 * 
 * cdef cudaError_t cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemRangeGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":684
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemRangeGetAttributes(void **__pyx_v_data, size_t *__pyx_v_dataSizes, enum cudaMemRangeAttribute *__pyx_v_attributes, size_t __pyx_v_numAttributes, void const *__pyx_v_devPtr, size_t __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemRangeGetAttributes", __pyx_f[0], 684, 1, __PYX_ERR(0, 684, __pyx_L1_error));

  /* "cuda/ccudart.pyx":685
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttributes(__pyx_v_data, __pyx_v_dataSizes, __pyx_v_attributes, __pyx_v_numAttributes, __pyx_v_devPtr, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 685, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":684
 *     return _cudaMemRangeGetAttribute(data, dataSize, attribute, devPtr, count)
 * 
 * cdef cudaError_t cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemRangeGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":687
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyToArray", __pyx_f[0], 687, 1, __PYX_ERR(0, 687, __pyx_L1_error));

  /* "cuda/ccudart.pyx":688
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArray(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 688, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":687
 *     return _cudaMemRangeGetAttributes(data, dataSizes, attributes, numAttributes, devPtr, count)
 * 
 * cdef cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":690
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyFromArray(void *__pyx_v_dst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyFromArray", __pyx_f[0], 690, 1, __PYX_ERR(0, 690, __pyx_L1_error));

  /* "cuda/ccudart.pyx":691
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArray(__pyx_v_dst, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 691, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":690
 *     return _cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyFromArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":693
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyArrayToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffsetDst, size_t __pyx_v_hOffsetDst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffsetSrc, size_t __pyx_v_hOffsetSrc, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyArrayToArray", __pyx_f[0], 693, 1, __PYX_ERR(0, 693, __pyx_L1_error));

  /* "cuda/ccudart.pyx":694
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyArrayToArray(__pyx_v_dst, __pyx_v_wOffsetDst, __pyx_v_hOffsetDst, __pyx_v_src, __pyx_v_wOffsetSrc, __pyx_v_hOffsetSrc, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 694, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":693
 *     return _cudaMemcpyFromArray(dst, src, wOffset, hOffset, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyArrayToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":696
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyToArrayAsync(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyToArrayAsync", __pyx_f[0], 696, 1, __PYX_ERR(0, 696, __pyx_L1_error));

  /* "cuda/ccudart.pyx":697
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArrayAsync(__pyx_v_dst, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_src, __pyx_v_count, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 697, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":696
 *     return _cudaMemcpyArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind)
 * 
 * cdef cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyToArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":699
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemcpyFromArrayAsync(void *__pyx_v_dst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemcpyFromArrayAsync", __pyx_f[0], 699, 1, __PYX_ERR(0, 699, __pyx_L1_error));

  /* "cuda/ccudart.pyx":700
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArrayAsync(__pyx_v_dst, __pyx_v_src, __pyx_v_wOffset, __pyx_v_hOffset, __pyx_v_count, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 700, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":699
 *     return _cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream)
 * 
 * cdef cudaError_t cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemcpyFromArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":702
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocAsync(devPtr, size, hStream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocAsync(void **__pyx_v_devPtr, size_t __pyx_v_size, cudaStream_t __pyx_v_hStream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMallocAsync", __pyx_f[0], 702, 1, __PYX_ERR(0, 702, __pyx_L1_error));

  /* "cuda/ccudart.pyx":703
 * 
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMallocAsync(devPtr, size, hStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocAsync(__pyx_v_devPtr, __pyx_v_size, __pyx_v_hStream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 703, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":702
 *     return _cudaMemcpyFromArrayAsync(dst, src, wOffset, hOffset, count, kind, stream)
 * 
 * cdef cudaError_t cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocAsync(devPtr, size, hStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMallocAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":705
 *     return _cudaMallocAsync(devPtr, size, hStream)
 * 
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeAsync(devPtr, hStream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaFreeAsync(void *__pyx_v_devPtr, cudaStream_t __pyx_v_hStream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaFreeAsync", __pyx_f[0], 705, 1, __PYX_ERR(0, 705, __pyx_L1_error));

  /* "cuda/ccudart.pyx":706
 * 
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaFreeAsync(devPtr, hStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeAsync(__pyx_v_devPtr, __pyx_v_hStream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 706, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":705
 *     return _cudaMallocAsync(devPtr, size, hStream)
 * 
 * cdef cudaError_t cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaFreeAsync(devPtr, hStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaFreeAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":708
 *     return _cudaFreeAsync(devPtr, hStream)
 * 
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolTrimTo(memPool, minBytesToKeep)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolTrimTo(cudaMemPool_t __pyx_v_memPool, size_t __pyx_v_minBytesToKeep) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolTrimTo", __pyx_f[0], 708, 1, __PYX_ERR(0, 708, __pyx_L1_error));

  /* "cuda/ccudart.pyx":709
 * 
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolTrimTo(memPool, minBytesToKeep)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolTrimTo(__pyx_v_memPool, __pyx_v_minBytesToKeep); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":708
 *     return _cudaFreeAsync(devPtr, hStream)
 * 
 * cdef cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolTrimTo(memPool, minBytesToKeep)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolTrimTo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":711
 *     return _cudaMemPoolTrimTo(memPool, minBytesToKeep)
 * 
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolSetAttribute(memPool, attr, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolSetAttribute(cudaMemPool_t __pyx_v_memPool, enum cudaMemPoolAttr __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolSetAttribute", __pyx_f[0], 711, 1, __PYX_ERR(0, 711, __pyx_L1_error));

  /* "cuda/ccudart.pyx":712
 * 
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolSetAttribute(memPool, attr, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAttribute(__pyx_v_memPool, __pyx_v_attr, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":711
 *     return _cudaMemPoolTrimTo(memPool, minBytesToKeep)
 * 
 * cdef cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolSetAttribute(memPool, attr, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":714
 *     return _cudaMemPoolSetAttribute(memPool, attr, value)
 * 
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolGetAttribute(memPool, attr, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolGetAttribute(cudaMemPool_t __pyx_v_memPool, enum cudaMemPoolAttr __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolGetAttribute", __pyx_f[0], 714, 1, __PYX_ERR(0, 714, __pyx_L1_error));

  /* "cuda/ccudart.pyx":715
 * 
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolGetAttribute(memPool, attr, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolGetAttribute(__pyx_v_memPool, __pyx_v_attr, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 715, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":714
 *     return _cudaMemPoolSetAttribute(memPool, attr, value)
 * 
 * cdef cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolGetAttribute(memPool, attr, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":717
 *     return _cudaMemPoolGetAttribute(memPool, attr, value)
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolSetAccess(cudaMemPool_t __pyx_v_memPool, struct cudaMemAccessDesc const *__pyx_v_descList, size_t __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolSetAccess", __pyx_f[0], 717, 1, __PYX_ERR(0, 717, __pyx_L1_error));

  /* "cuda/ccudart.pyx":718
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolSetAccess(memPool, descList, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAccess(__pyx_v_memPool, __pyx_v_descList, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 718, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":717
 *     return _cudaMemPoolGetAttribute(memPool, attr, value)
 * 
 * cdef cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolSetAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":720
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolGetAccess(flags, memPool, location)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolGetAccess(enum cudaMemAccessFlags *__pyx_v_flags, cudaMemPool_t __pyx_v_memPool, struct cudaMemLocation *__pyx_v_location) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolGetAccess", __pyx_f[0], 720, 1, __PYX_ERR(0, 720, __pyx_L1_error));

  /* "cuda/ccudart.pyx":721
 * 
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolGetAccess(flags, memPool, location)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolGetAccess(__pyx_v_flags, __pyx_v_memPool, __pyx_v_location); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 721, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":720
 *     return _cudaMemPoolSetAccess(memPool, descList, count)
 * 
 * cdef cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolGetAccess(flags, memPool, location)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolGetAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":723
 *     return _cudaMemPoolGetAccess(flags, memPool, location)
 * 
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolCreate(memPool, poolProps)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolCreate(cudaMemPool_t *__pyx_v_memPool, struct cudaMemPoolProps const *__pyx_v_poolProps) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolCreate", __pyx_f[0], 723, 1, __PYX_ERR(0, 723, __pyx_L1_error));

  /* "cuda/ccudart.pyx":724
 * 
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolCreate(memPool, poolProps)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolCreate(__pyx_v_memPool, __pyx_v_poolProps); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 724, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":723
 *     return _cudaMemPoolGetAccess(flags, memPool, location)
 * 
 * cdef cudaError_t cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolCreate(memPool, poolProps)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":726
 *     return _cudaMemPoolCreate(memPool, poolProps)
 * 
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolDestroy(memPool)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolDestroy(cudaMemPool_t __pyx_v_memPool) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolDestroy", __pyx_f[0], 726, 1, __PYX_ERR(0, 726, __pyx_L1_error));

  /* "cuda/ccudart.pyx":727
 * 
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolDestroy(memPool)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolDestroy(__pyx_v_memPool); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":726
 *     return _cudaMemPoolCreate(memPool, poolProps)
 * 
 * cdef cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolDestroy(memPool)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":729
 *     return _cudaMemPoolDestroy(memPool)
 * 
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocFromPoolAsync(ptr, size, memPool, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMallocFromPoolAsync(void **__pyx_v_ptr, size_t __pyx_v_size, cudaMemPool_t __pyx_v_memPool, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMallocFromPoolAsync", __pyx_f[0], 729, 1, __PYX_ERR(0, 729, __pyx_L1_error));

  /* "cuda/ccudart.pyx":730
 * 
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMallocFromPoolAsync(ptr, size, memPool, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocFromPoolAsync(__pyx_v_ptr, __pyx_v_size, __pyx_v_memPool, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 730, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":729
 *     return _cudaMemPoolDestroy(memPool)
 * 
 * cdef cudaError_t cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMallocFromPoolAsync(ptr, size, memPool, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMallocFromPoolAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":732
 *     return _cudaMallocFromPoolAsync(ptr, size, memPool, stream)
 * 
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolExportToShareableHandle(shareableHandle, memPool, handleType, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolExportToShareableHandle(void *__pyx_v_shareableHandle, cudaMemPool_t __pyx_v_memPool, enum cudaMemAllocationHandleType __pyx_v_handleType, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolExportToShareableHandle", __pyx_f[0], 732, 1, __PYX_ERR(0, 732, __pyx_L1_error));

  /* "cuda/ccudart.pyx":733
 * 
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolExportToShareableHandle(shareableHandle, memPool, handleType, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolExportToShareableHandle(__pyx_v_shareableHandle, __pyx_v_memPool, __pyx_v_handleType, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":732
 *     return _cudaMallocFromPoolAsync(ptr, size, memPool, stream)
 * 
 * cdef cudaError_t cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolExportToShareableHandle(shareableHandle, memPool, handleType, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolExportToShareableHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":735
 *     return _cudaMemPoolExportToShareableHandle(shareableHandle, memPool, handleType, flags)
 * 
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolImportFromShareableHandle(memPool, shareableHandle, handleType, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolImportFromShareableHandle(cudaMemPool_t *__pyx_v_memPool, void *__pyx_v_shareableHandle, enum cudaMemAllocationHandleType __pyx_v_handleType, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolImportFromShareableHandle", __pyx_f[0], 735, 1, __PYX_ERR(0, 735, __pyx_L1_error));

  /* "cuda/ccudart.pyx":736
 * 
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolImportFromShareableHandle(memPool, shareableHandle, handleType, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolImportFromShareableHandle(__pyx_v_memPool, __pyx_v_shareableHandle, __pyx_v_handleType, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":735
 *     return _cudaMemPoolExportToShareableHandle(shareableHandle, memPool, handleType, flags)
 * 
 * cdef cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolImportFromShareableHandle(memPool, shareableHandle, handleType, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolImportFromShareableHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":738
 *     return _cudaMemPoolImportFromShareableHandle(memPool, shareableHandle, handleType, flags)
 * 
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolExportPointer(exportData, ptr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *__pyx_v_exportData, void *__pyx_v_ptr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolExportPointer", __pyx_f[0], 738, 1, __PYX_ERR(0, 738, __pyx_L1_error));

  /* "cuda/ccudart.pyx":739
 * 
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolExportPointer(exportData, ptr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolExportPointer(__pyx_v_exportData, __pyx_v_ptr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 739, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":738
 *     return _cudaMemPoolImportFromShareableHandle(memPool, shareableHandle, handleType, flags)
 * 
 * cdef cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolExportPointer(exportData, ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolExportPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":741
 *     return _cudaMemPoolExportPointer(exportData, ptr)
 * 
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolImportPointer(ptr, memPool, exportData)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaMemPoolImportPointer(void **__pyx_v_ptr, cudaMemPool_t __pyx_v_memPool, struct cudaMemPoolPtrExportData *__pyx_v_exportData) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaMemPoolImportPointer", __pyx_f[0], 741, 1, __PYX_ERR(0, 741, __pyx_L1_error));

  /* "cuda/ccudart.pyx":742
 * 
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaMemPoolImportPointer(ptr, memPool, exportData)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolImportPointer(__pyx_v_ptr, __pyx_v_memPool, __pyx_v_exportData); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 742, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":741
 *     return _cudaMemPoolExportPointer(exportData, ptr)
 * 
 * cdef cudaError_t cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaMemPoolImportPointer(ptr, memPool, exportData)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaMemPoolImportPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":744
 *     return _cudaMemPoolImportPointer(ptr, memPool, exportData)
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaPointerGetAttributes(struct cudaPointerAttributes *__pyx_v_attributes, void const *__pyx_v_ptr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaPointerGetAttributes", __pyx_f[0], 744, 1, __PYX_ERR(0, 744, __pyx_L1_error));

  /* "cuda/ccudart.pyx":745
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaPointerGetAttributes(attributes, ptr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPointerGetAttributes(__pyx_v_attributes, __pyx_v_ptr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":744
 *     return _cudaMemPoolImportPointer(ptr, memPool, exportData)
 * 
 * cdef cudaError_t cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaPointerGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":747
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceCanAccessPeer(int *__pyx_v_canAccessPeer, int __pyx_v_device, int __pyx_v_peerDevice) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceCanAccessPeer", __pyx_f[0], 747, 1, __PYX_ERR(0, 747, __pyx_L1_error));

  /* "cuda/ccudart.pyx":748
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceCanAccessPeer(__pyx_v_canAccessPeer, __pyx_v_device, __pyx_v_peerDevice); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":747
 *     return _cudaPointerGetAttributes(attributes, ptr)
 * 
 * cdef cudaError_t cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceCanAccessPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":750
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceEnablePeerAccess(int __pyx_v_peerDevice, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceEnablePeerAccess", __pyx_f[0], 750, 1, __PYX_ERR(0, 750, __pyx_L1_error));

  /* "cuda/ccudart.pyx":751
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceEnablePeerAccess(__pyx_v_peerDevice, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 751, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":750
 *     return _cudaDeviceCanAccessPeer(canAccessPeer, device, peerDevice)
 * 
 * cdef cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceEnablePeerAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":753
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceDisablePeerAccess(int __pyx_v_peerDevice) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceDisablePeerAccess", __pyx_f[0], 753, 1, __PYX_ERR(0, 753, __pyx_L1_error));

  /* "cuda/ccudart.pyx":754
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceDisablePeerAccess(peerDevice)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceDisablePeerAccess(__pyx_v_peerDevice); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 754, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":753
 *     return _cudaDeviceEnablePeerAccess(peerDevice, flags)
 * 
 * cdef cudaError_t cudaDeviceDisablePeerAccess(int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceDisablePeerAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":756
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsUnregisterResource(resource)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsUnregisterResource(cudaGraphicsResource_t __pyx_v_resource) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsUnregisterResource", __pyx_f[0], 756, 1, __PYX_ERR(0, 756, __pyx_L1_error));

  /* "cuda/ccudart.pyx":757
 * 
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsUnregisterResource(resource)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsUnregisterResource(__pyx_v_resource); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 757, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":756
 *     return _cudaDeviceDisablePeerAccess(peerDevice)
 * 
 * cdef cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsUnregisterResource(resource)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsUnregisterResource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":759
 *     return _cudaGraphicsUnregisterResource(resource)
 * 
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceSetMapFlags(resource, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsResourceSetMapFlags", __pyx_f[0], 759, 1, __PYX_ERR(0, 759, __pyx_L1_error));

  /* "cuda/ccudart.pyx":760
 * 
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsResourceSetMapFlags(resource, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceSetMapFlags(__pyx_v_resource, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 760, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":759
 *     return _cudaGraphicsUnregisterResource(resource)
 * 
 * cdef cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceSetMapFlags(resource, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceSetMapFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":762
 *     return _cudaGraphicsResourceSetMapFlags(resource, flags)
 * 
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsMapResources(count, resources, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsMapResources(int __pyx_v_count, cudaGraphicsResource_t *__pyx_v_resources, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsMapResources", __pyx_f[0], 762, 1, __PYX_ERR(0, 762, __pyx_L1_error));

  /* "cuda/ccudart.pyx":763
 * 
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsMapResources(count, resources, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsMapResources(__pyx_v_count, __pyx_v_resources, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 763, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":762
 *     return _cudaGraphicsResourceSetMapFlags(resource, flags)
 * 
 * cdef cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsMapResources(count, resources, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsMapResources", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":765
 *     return _cudaGraphicsMapResources(count, resources, stream)
 * 
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsUnmapResources(count, resources, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsUnmapResources(int __pyx_v_count, cudaGraphicsResource_t *__pyx_v_resources, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsUnmapResources", __pyx_f[0], 765, 1, __PYX_ERR(0, 765, __pyx_L1_error));

  /* "cuda/ccudart.pyx":766
 * 
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsUnmapResources(count, resources, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsUnmapResources(__pyx_v_count, __pyx_v_resources, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 766, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":765
 *     return _cudaGraphicsMapResources(count, resources, stream)
 * 
 * cdef cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsUnmapResources(count, resources, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsUnmapResources", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":768
 *     return _cudaGraphicsUnmapResources(count, resources, stream)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedPointer(devPtr, size, resource)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedPointer(void **__pyx_v_devPtr, size_t *__pyx_v_size, cudaGraphicsResource_t __pyx_v_resource) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsResourceGetMappedPointer", __pyx_f[0], 768, 1, __PYX_ERR(0, 768, __pyx_L1_error));

  /* "cuda/ccudart.pyx":769
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsResourceGetMappedPointer(devPtr, size, resource)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedPointer(__pyx_v_devPtr, __pyx_v_size, __pyx_v_resource); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 769, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":768
 *     return _cudaGraphicsUnmapResources(count, resources, stream)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedPointer(devPtr, size, resource)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceGetMappedPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":771
 *     return _cudaGraphicsResourceGetMappedPointer(devPtr, size, resource)
 * 
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsSubResourceGetMappedArray(array, resource, arrayIndex, mipLevel)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsSubResourceGetMappedArray(cudaArray_t *__pyx_v_array, cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_arrayIndex, unsigned int __pyx_v_mipLevel) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsSubResourceGetMappedArray", __pyx_f[0], 771, 1, __PYX_ERR(0, 771, __pyx_L1_error));

  /* "cuda/ccudart.pyx":772
 * 
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsSubResourceGetMappedArray(array, resource, arrayIndex, mipLevel)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsSubResourceGetMappedArray(__pyx_v_array, __pyx_v_resource, __pyx_v_arrayIndex, __pyx_v_mipLevel); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 772, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":771
 *     return _cudaGraphicsResourceGetMappedPointer(devPtr, size, resource)
 * 
 * cdef cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsSubResourceGetMappedArray(array, resource, arrayIndex, mipLevel)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsSubResourceGetMappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":774
 *     return _cudaGraphicsSubResourceGetMappedArray(array, resource, arrayIndex, mipLevel)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedMipmappedArray(mipmappedArray, resource)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *__pyx_v_mipmappedArray, cudaGraphicsResource_t __pyx_v_resource) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsResourceGetMappedMipmappedArray", __pyx_f[0], 774, 1, __PYX_ERR(0, 774, __pyx_L1_error));

  /* "cuda/ccudart.pyx":775
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsResourceGetMappedMipmappedArray(mipmappedArray, resource)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedMipmappedArray(__pyx_v_mipmappedArray, __pyx_v_resource); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 775, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":774
 *     return _cudaGraphicsSubResourceGetMappedArray(array, resource, arrayIndex, mipLevel)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedMipmappedArray(mipmappedArray, resource)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceGetMappedMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":777
 *     return _cudaGraphicsResourceGetMappedMipmappedArray(mipmappedArray, resource)
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetChannelDesc(desc, array)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetChannelDesc(struct cudaChannelFormatDesc *__pyx_v_desc, cudaArray_const_t __pyx_v_array) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetChannelDesc", __pyx_f[0], 777, 1, __PYX_ERR(0, 777, __pyx_L1_error));

  /* "cuda/ccudart.pyx":778
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetChannelDesc(desc, array)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetChannelDesc(__pyx_v_desc, __pyx_v_array); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 778, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":777
 *     return _cudaGraphicsResourceGetMappedMipmappedArray(mipmappedArray, resource)
 * 
 * cdef cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetChannelDesc(desc, array)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetChannelDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":780
 *     return _cudaGetChannelDesc(desc, array)
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 */

static struct cudaChannelFormatDesc __pyx_f_4cuda_7ccudart_cudaCreateChannelDesc(int __pyx_v_x, int __pyx_v_y, int __pyx_v_z, int __pyx_v_w, enum cudaChannelFormatKind __pyx_v_f) {
  struct cudaChannelFormatDesc __pyx_r;
  __Pyx_TraceDeclarations
  struct cudaChannelFormatDesc __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaCreateChannelDesc", __pyx_f[0], 780, 1, __PYX_ERR(0, 780, __pyx_L1_error));

  /* "cuda/ccudart.pyx":781
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:
 *     return _cudaCreateChannelDesc(x, y, z, w, f)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateChannelDesc(__pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_w, __pyx_v_f); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 781, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":780
 *     return _cudaGetChannelDesc(desc, array)
 * 
 * cdef cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaCreateChannelDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":783
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaCreateTextureObject(cudaTextureObject_t *__pyx_v_pTexObject, struct cudaResourceDesc const *__pyx_v_pResDesc, struct cudaTextureDesc const *__pyx_v_pTexDesc, struct cudaResourceViewDesc const *__pyx_v_pResViewDesc) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaCreateTextureObject", __pyx_f[0], 783, 1, __PYX_ERR(0, 783, __pyx_L1_error));

  /* "cuda/ccudart.pyx":784
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateTextureObject(__pyx_v_pTexObject, __pyx_v_pResDesc, __pyx_v_pTexDesc, __pyx_v_pResViewDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 784, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":783
 *     return _cudaCreateChannelDesc(x, y, z, w, f)
 * 
 * cdef cudaError_t cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaCreateTextureObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":786
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroyTextureObject(texObject)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroyTextureObject(cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDestroyTextureObject", __pyx_f[0], 786, 1, __PYX_ERR(0, 786, __pyx_L1_error));

  /* "cuda/ccudart.pyx":787
 * 
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDestroyTextureObject(texObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyTextureObject(__pyx_v_texObject); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 787, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":786
 *     return _cudaCreateTextureObject(pTexObject, pResDesc, pTexDesc, pResViewDesc)
 * 
 * cdef cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroyTextureObject(texObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDestroyTextureObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":789
 *     return _cudaDestroyTextureObject(texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *__pyx_v_pResDesc, cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetTextureObjectResourceDesc", __pyx_f[0], 789, 1, __PYX_ERR(0, 789, __pyx_L1_error));

  /* "cuda/ccudart.pyx":790
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceDesc(__pyx_v_pResDesc, __pyx_v_texObject); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 790, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":789
 *     return _cudaDestroyTextureObject(texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetTextureObjectResourceDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":792
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *__pyx_v_pTexDesc, cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetTextureObjectTextureDesc", __pyx_f[0], 792, 1, __PYX_ERR(0, 792, __pyx_L1_error));

  /* "cuda/ccudart.pyx":793
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectTextureDesc(__pyx_v_pTexDesc, __pyx_v_texObject); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 793, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":792
 *     return _cudaGetTextureObjectResourceDesc(pResDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetTextureObjectTextureDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":795
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *__pyx_v_pResViewDesc, cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetTextureObjectResourceViewDesc", __pyx_f[0], 795, 1, __PYX_ERR(0, 795, __pyx_L1_error));

  /* "cuda/ccudart.pyx":796
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceViewDesc(__pyx_v_pResViewDesc, __pyx_v_texObject); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 796, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":795
 *     return _cudaGetTextureObjectTextureDesc(pTexDesc, texObject)
 * 
 * cdef cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetTextureObjectResourceViewDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":798
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaCreateSurfaceObject(cudaSurfaceObject_t *__pyx_v_pSurfObject, struct cudaResourceDesc const *__pyx_v_pResDesc) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaCreateSurfaceObject", __pyx_f[0], 798, 1, __PYX_ERR(0, 798, __pyx_L1_error));

  /* "cuda/ccudart.pyx":799
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateSurfaceObject(__pyx_v_pSurfObject, __pyx_v_pResDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 799, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":798
 *     return _cudaGetTextureObjectResourceViewDesc(pResViewDesc, texObject)
 * 
 * cdef cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaCreateSurfaceObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":801
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroySurfaceObject(surfObject)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDestroySurfaceObject(cudaSurfaceObject_t __pyx_v_surfObject) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDestroySurfaceObject", __pyx_f[0], 801, 1, __PYX_ERR(0, 801, __pyx_L1_error));

  /* "cuda/ccudart.pyx":802
 * 
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDestroySurfaceObject(surfObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroySurfaceObject(__pyx_v_surfObject); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 802, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":801
 *     return _cudaCreateSurfaceObject(pSurfObject, pResDesc)
 * 
 * cdef cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDestroySurfaceObject(surfObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDestroySurfaceObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":804
 *     return _cudaDestroySurfaceObject(surfObject)
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *__pyx_v_pResDesc, cudaSurfaceObject_t __pyx_v_surfObject) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetSurfaceObjectResourceDesc", __pyx_f[0], 804, 1, __PYX_ERR(0, 804, __pyx_L1_error));

  /* "cuda/ccudart.pyx":805
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetSurfaceObjectResourceDesc(__pyx_v_pResDesc, __pyx_v_surfObject); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 805, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":804
 *     return _cudaDestroySurfaceObject(surfObject)
 * 
 * cdef cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetSurfaceObjectResourceDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":807
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDriverGetVersion(int *__pyx_v_driverVersion) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDriverGetVersion", __pyx_f[0], 807, 1, __PYX_ERR(0, 807, __pyx_L1_error));

  /* "cuda/ccudart.pyx":808
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDriverGetVersion(driverVersion)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDriverGetVersion(__pyx_v_driverVersion); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 808, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":807
 *     return _cudaGetSurfaceObjectResourceDesc(pResDesc, surfObject)
 * 
 * cdef cudaError_t cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDriverGetVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":810
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaRuntimeGetVersion(int *__pyx_v_runtimeVersion) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaRuntimeGetVersion", __pyx_f[0], 810, 1, __PYX_ERR(0, 810, __pyx_L1_error));

  /* "cuda/ccudart.pyx":811
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaRuntimeGetVersion(runtimeVersion)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaRuntimeGetVersion(__pyx_v_runtimeVersion); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 811, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":810
 *     return _cudaDriverGetVersion(driverVersion)
 * 
 * cdef cudaError_t cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaRuntimeGetVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":813
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphCreate(pGraph, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphCreate(cudaGraph_t *__pyx_v_pGraph, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphCreate", __pyx_f[0], 813, 1, __PYX_ERR(0, 813, __pyx_L1_error));

  /* "cuda/ccudart.pyx":814
 * 
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphCreate(pGraph, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphCreate(__pyx_v_pGraph, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 814, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":813
 *     return _cudaRuntimeGetVersion(runtimeVersion)
 * 
 * cdef cudaError_t cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphCreate(pGraph, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":816
 *     return _cudaGraphCreate(pGraph, flags)
 * 
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddKernelNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddKernelNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddKernelNode", __pyx_f[0], 816, 1, __PYX_ERR(0, 816, __pyx_L1_error));

  /* "cuda/ccudart.pyx":817
 * 
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddKernelNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddKernelNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 817, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":816
 *     return _cudaGraphCreate(pGraph, flags)
 * 
 * cdef cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddKernelNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddKernelNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":819
 *     return _cudaGraphAddKernelNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaKernelNodeParams *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphKernelNodeGetParams", __pyx_f[0], 819, 1, __PYX_ERR(0, 819, __pyx_L1_error));

  /* "cuda/ccudart.pyx":820
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 820, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":819
 *     return _cudaGraphAddKernelNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":822
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeSetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphKernelNodeSetParams", __pyx_f[0], 822, 1, __PYX_ERR(0, 822, __pyx_L1_error));

  /* "cuda/ccudart.pyx":823
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphKernelNodeSetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeSetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 823, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":822
 *     return _cudaGraphKernelNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeSetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":825
 *     return _cudaGraphKernelNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeCopyAttributes(hSrc, hDst)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t __pyx_v_hSrc, cudaGraphNode_t __pyx_v_hDst) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphKernelNodeCopyAttributes", __pyx_f[0], 825, 1, __PYX_ERR(0, 825, __pyx_L1_error));

  /* "cuda/ccudart.pyx":826
 * 
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphKernelNodeCopyAttributes(hSrc, hDst)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeCopyAttributes(__pyx_v_hSrc, __pyx_v_hDst); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 826, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":825
 *     return _cudaGraphKernelNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeCopyAttributes(hSrc, hDst)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeCopyAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":828
 *     return _cudaGraphKernelNodeCopyAttributes(hSrc, hDst)
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeGetAttribute(hNode, attr, value_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetAttribute(cudaGraphNode_t __pyx_v_hNode, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID __pyx_v_attr, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue *__pyx_v_value_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphKernelNodeGetAttribute", __pyx_f[0], 828, 1, __PYX_ERR(0, 828, __pyx_L1_error));

  /* "cuda/ccudart.pyx":829
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphKernelNodeGetAttribute(hNode, attr, value_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetAttribute(__pyx_v_hNode, __pyx_v_attr, __pyx_v_value_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 829, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":828
 *     return _cudaGraphKernelNodeCopyAttributes(hSrc, hDst)
 * 
 * cdef cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeGetAttribute(hNode, attr, value_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":831
 *     return _cudaGraphKernelNodeGetAttribute(hNode, attr, value_out)
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeSetAttribute(hNode, attr, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetAttribute(cudaGraphNode_t __pyx_v_hNode, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID __pyx_v_attr, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue const *__pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphKernelNodeSetAttribute", __pyx_f[0], 831, 1, __PYX_ERR(0, 831, __pyx_L1_error));

  /* "cuda/ccudart.pyx":832
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphKernelNodeSetAttribute(hNode, attr, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeSetAttribute(__pyx_v_hNode, __pyx_v_attr, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 832, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":831
 *     return _cudaGraphKernelNodeGetAttribute(hNode, attr, value_out)
 * 
 * cdef cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphKernelNodeSetAttribute(hNode, attr, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphKernelNodeSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":834
 *     return _cudaGraphKernelNodeSetAttribute(hNode, attr, value)
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaMemcpy3DParms const *__pyx_v_pCopyParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddMemcpyNode", __pyx_f[0], 834, 1, __PYX_ERR(0, 834, __pyx_L1_error));

  /* "cuda/ccudart.pyx":835
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_pCopyParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 835, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":834
 *     return _cudaGraphKernelNodeSetAttribute(hNode, attr, value)
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemcpyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":837
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode1D(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddMemcpyNode1D", __pyx_f[0], 837, 1, __PYX_ERR(0, 837, __pyx_L1_error));

  /* "cuda/ccudart.pyx":838
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode1D(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":837
 *     return _cudaGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, pCopyParams)
 * 
 * cdef cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemcpyNode1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":840
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemcpy3DParms *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphMemcpyNodeGetParams", __pyx_f[0], 840, 1, __PYX_ERR(0, 840, __pyx_L1_error));

  /* "cuda/ccudart.pyx":841
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeGetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 841, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":840
 *     return _cudaGraphAddMemcpyNode1D(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemcpyNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":843
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemcpy3DParms const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphMemcpyNodeSetParams", __pyx_f[0], 843, 1, __PYX_ERR(0, 843, __pyx_L1_error));

  /* "cuda/ccudart.pyx":844
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 844, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":843
 *     return _cudaGraphMemcpyNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemcpyNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":846
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t __pyx_v_node, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphMemcpyNodeSetParams1D", __pyx_f[0], 846, 1, __PYX_ERR(0, 846, __pyx_L1_error));

  /* "cuda/ccudart.pyx":847
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams1D(__pyx_v_node, __pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 847, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":846
 *     return _cudaGraphMemcpyNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemcpyNodeSetParams1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":849
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemsetNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaMemsetParams const *__pyx_v_pMemsetParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddMemsetNode", __pyx_f[0], 849, 1, __PYX_ERR(0, 849, __pyx_L1_error));

  /* "cuda/ccudart.pyx":850
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemsetNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_pMemsetParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 850, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":849
 *     return _cudaGraphMemcpyNodeSetParams1D(node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemsetNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":852
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemsetNodeGetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemsetParams *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphMemsetNodeGetParams", __pyx_f[0], 852, 1, __PYX_ERR(0, 852, __pyx_L1_error));

  /* "cuda/ccudart.pyx":853
 * 
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphMemsetNodeGetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemsetNodeGetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 853, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":852
 *     return _cudaGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams)
 * 
 * cdef cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemsetNodeGetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemsetNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":855
 *     return _cudaGraphMemsetNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemsetNodeSetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemsetParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphMemsetNodeSetParams", __pyx_f[0], 855, 1, __PYX_ERR(0, 855, __pyx_L1_error));

  /* "cuda/ccudart.pyx":856
 * 
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphMemsetNodeSetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemsetNodeSetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 856, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":855
 *     return _cudaGraphMemsetNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemsetNodeSetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemsetNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":858
 *     return _cudaGraphMemsetNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddHostNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddHostNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaHostNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddHostNode", __pyx_f[0], 858, 1, __PYX_ERR(0, 858, __pyx_L1_error));

  /* "cuda/ccudart.pyx":859
 * 
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddHostNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddHostNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 859, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":858
 *     return _cudaGraphMemsetNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddHostNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddHostNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":861
 *     return _cudaGraphAddHostNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphHostNodeGetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphHostNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaHostNodeParams *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphHostNodeGetParams", __pyx_f[0], 861, 1, __PYX_ERR(0, 861, __pyx_L1_error));

  /* "cuda/ccudart.pyx":862
 * 
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphHostNodeGetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphHostNodeGetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 862, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":861
 *     return _cudaGraphAddHostNode(pGraphNode, graph, pDependencies, numDependencies, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphHostNodeGetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphHostNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":864
 *     return _cudaGraphHostNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphHostNodeSetParams(node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphHostNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaHostNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphHostNodeSetParams", __pyx_f[0], 864, 1, __PYX_ERR(0, 864, __pyx_L1_error));

  /* "cuda/ccudart.pyx":865
 * 
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphHostNodeSetParams(node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphHostNodeSetParams(__pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 865, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":864
 *     return _cudaGraphHostNodeGetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphHostNodeSetParams(node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphHostNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":867
 *     return _cudaGraphHostNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddChildGraphNode(pGraphNode, graph, pDependencies, numDependencies, childGraph)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddChildGraphNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, cudaGraph_t __pyx_v_childGraph) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddChildGraphNode", __pyx_f[0], 867, 1, __PYX_ERR(0, 867, __pyx_L1_error));

  /* "cuda/ccudart.pyx":868
 * 
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddChildGraphNode(pGraphNode, graph, pDependencies, numDependencies, childGraph)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddChildGraphNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_childGraph); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 868, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":867
 *     return _cudaGraphHostNodeSetParams(node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddChildGraphNode(pGraphNode, graph, pDependencies, numDependencies, childGraph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddChildGraphNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":870
 *     return _cudaGraphAddChildGraphNode(pGraphNode, graph, pDependencies, numDependencies, childGraph)
 * 
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphChildGraphNodeGetGraph(node, pGraph)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t __pyx_v_node, cudaGraph_t *__pyx_v_pGraph) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphChildGraphNodeGetGraph", __pyx_f[0], 870, 1, __PYX_ERR(0, 870, __pyx_L1_error));

  /* "cuda/ccudart.pyx":871
 * 
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphChildGraphNodeGetGraph(node, pGraph)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphChildGraphNodeGetGraph(__pyx_v_node, __pyx_v_pGraph); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 871, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":870
 *     return _cudaGraphAddChildGraphNode(pGraphNode, graph, pDependencies, numDependencies, childGraph)
 * 
 * cdef cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphChildGraphNodeGetGraph(node, pGraph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphChildGraphNodeGetGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":873
 *     return _cudaGraphChildGraphNodeGetGraph(node, pGraph)
 * 
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddEmptyNode(pGraphNode, graph, pDependencies, numDependencies)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddEmptyNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddEmptyNode", __pyx_f[0], 873, 1, __PYX_ERR(0, 873, __pyx_L1_error));

  /* "cuda/ccudart.pyx":874
 * 
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddEmptyNode(pGraphNode, graph, pDependencies, numDependencies)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEmptyNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 874, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":873
 *     return _cudaGraphChildGraphNodeGetGraph(node, pGraph)
 * 
 * cdef cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddEmptyNode(pGraphNode, graph, pDependencies, numDependencies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddEmptyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":876
 *     return _cudaGraphAddEmptyNode(pGraphNode, graph, pDependencies, numDependencies)
 * 
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddEventRecordNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddEventRecordNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddEventRecordNode", __pyx_f[0], 876, 1, __PYX_ERR(0, 876, __pyx_L1_error));

  /* "cuda/ccudart.pyx":877
 * 
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddEventRecordNode(pGraphNode, graph, pDependencies, numDependencies, event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEventRecordNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 877, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":876
 *     return _cudaGraphAddEmptyNode(pGraphNode, graph, pDependencies, numDependencies)
 * 
 * cdef cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddEventRecordNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddEventRecordNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":879
 *     return _cudaGraphAddEventRecordNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventRecordNodeGetEvent(node, event_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t *__pyx_v_event_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphEventRecordNodeGetEvent", __pyx_f[0], 879, 1, __PYX_ERR(0, 879, __pyx_L1_error));

  /* "cuda/ccudart.pyx":880
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphEventRecordNodeGetEvent(node, event_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventRecordNodeGetEvent(__pyx_v_node, __pyx_v_event_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 880, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":879
 *     return _cudaGraphAddEventRecordNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventRecordNodeGetEvent(node, event_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventRecordNodeGetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":882
 *     return _cudaGraphEventRecordNodeGetEvent(node, event_out)
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventRecordNodeSetEvent(node, event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphEventRecordNodeSetEvent", __pyx_f[0], 882, 1, __PYX_ERR(0, 882, __pyx_L1_error));

  /* "cuda/ccudart.pyx":883
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphEventRecordNodeSetEvent(node, event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventRecordNodeSetEvent(__pyx_v_node, __pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 883, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":882
 *     return _cudaGraphEventRecordNodeGetEvent(node, event_out)
 * 
 * cdef cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventRecordNodeSetEvent(node, event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventRecordNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":885
 *     return _cudaGraphEventRecordNodeSetEvent(node, event)
 * 
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddEventWaitNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddEventWaitNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddEventWaitNode", __pyx_f[0], 885, 1, __PYX_ERR(0, 885, __pyx_L1_error));

  /* "cuda/ccudart.pyx":886
 * 
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddEventWaitNode(pGraphNode, graph, pDependencies, numDependencies, event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEventWaitNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":885
 *     return _cudaGraphEventRecordNodeSetEvent(node, event)
 * 
 * cdef cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddEventWaitNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddEventWaitNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":888
 *     return _cudaGraphAddEventWaitNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventWaitNodeGetEvent(node, event_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t *__pyx_v_event_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphEventWaitNodeGetEvent", __pyx_f[0], 888, 1, __PYX_ERR(0, 888, __pyx_L1_error));

  /* "cuda/ccudart.pyx":889
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphEventWaitNodeGetEvent(node, event_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventWaitNodeGetEvent(__pyx_v_node, __pyx_v_event_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 889, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":888
 *     return _cudaGraphAddEventWaitNode(pGraphNode, graph, pDependencies, numDependencies, event)
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventWaitNodeGetEvent(node, event_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventWaitNodeGetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":891
 *     return _cudaGraphEventWaitNodeGetEvent(node, event_out)
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventWaitNodeSetEvent(node, event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphEventWaitNodeSetEvent", __pyx_f[0], 891, 1, __PYX_ERR(0, 891, __pyx_L1_error));

  /* "cuda/ccudart.pyx":892
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphEventWaitNodeSetEvent(node, event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventWaitNodeSetEvent(__pyx_v_node, __pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":891
 *     return _cudaGraphEventWaitNodeGetEvent(node, event_out)
 * 
 * cdef cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphEventWaitNodeSetEvent(node, event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphEventWaitNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":894
 *     return _cudaGraphEventWaitNodeSetEvent(node, event)
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddExternalSemaphoresSignalNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddExternalSemaphoresSignalNode", __pyx_f[0], 894, 1, __PYX_ERR(0, 894, __pyx_L1_error));

  /* "cuda/ccudart.pyx":895
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddExternalSemaphoresSignalNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddExternalSemaphoresSignalNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 895, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":894
 *     return _cudaGraphEventWaitNodeSetEvent(node, event)
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddExternalSemaphoresSignalNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddExternalSemaphoresSignalNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":897
 *     return _cudaGraphAddExternalSemaphoresSignalNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresSignalNodeGetParams(hNode, params_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreSignalNodeParams *__pyx_v_params_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExternalSemaphoresSignalNodeGetParams", __pyx_f[0], 897, 1, __PYX_ERR(0, 897, __pyx_L1_error));

  /* "cuda/ccudart.pyx":898
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExternalSemaphoresSignalNodeGetParams(hNode, params_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresSignalNodeGetParams(__pyx_v_hNode, __pyx_v_params_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 898, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":897
 *     return _cudaGraphAddExternalSemaphoresSignalNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresSignalNodeGetParams(hNode, params_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresSignalNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":900
 *     return _cudaGraphExternalSemaphoresSignalNodeGetParams(hNode, params_out)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresSignalNodeSetParams(hNode, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExternalSemaphoresSignalNodeSetParams", __pyx_f[0], 900, 1, __PYX_ERR(0, 900, __pyx_L1_error));

  /* "cuda/ccudart.pyx":901
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExternalSemaphoresSignalNodeSetParams(hNode, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresSignalNodeSetParams(__pyx_v_hNode, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 901, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":900
 *     return _cudaGraphExternalSemaphoresSignalNodeGetParams(hNode, params_out)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresSignalNodeSetParams(hNode, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresSignalNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":903
 *     return _cudaGraphExternalSemaphoresSignalNodeSetParams(hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddExternalSemaphoresWaitNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddExternalSemaphoresWaitNode", __pyx_f[0], 903, 1, __PYX_ERR(0, 903, __pyx_L1_error));

  /* "cuda/ccudart.pyx":904
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddExternalSemaphoresWaitNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddExternalSemaphoresWaitNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 904, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":903
 *     return _cudaGraphExternalSemaphoresSignalNodeSetParams(hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddExternalSemaphoresWaitNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddExternalSemaphoresWaitNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":906
 *     return _cudaGraphAddExternalSemaphoresWaitNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresWaitNodeGetParams(hNode, params_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreWaitNodeParams *__pyx_v_params_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExternalSemaphoresWaitNodeGetParams", __pyx_f[0], 906, 1, __PYX_ERR(0, 906, __pyx_L1_error));

  /* "cuda/ccudart.pyx":907
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExternalSemaphoresWaitNodeGetParams(hNode, params_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresWaitNodeGetParams(__pyx_v_hNode, __pyx_v_params_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 907, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":906
 *     return _cudaGraphAddExternalSemaphoresWaitNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresWaitNodeGetParams(hNode, params_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresWaitNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":909
 *     return _cudaGraphExternalSemaphoresWaitNodeGetParams(hNode, params_out)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresWaitNodeSetParams(hNode, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExternalSemaphoresWaitNodeSetParams", __pyx_f[0], 909, 1, __PYX_ERR(0, 909, __pyx_L1_error));

  /* "cuda/ccudart.pyx":910
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExternalSemaphoresWaitNodeSetParams(hNode, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresWaitNodeSetParams(__pyx_v_hNode, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 910, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":909
 *     return _cudaGraphExternalSemaphoresWaitNodeGetParams(hNode, params_out)
 * 
 * cdef cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExternalSemaphoresWaitNodeSetParams(hNode, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExternalSemaphoresWaitNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":912
 *     return _cudaGraphExternalSemaphoresWaitNodeSetParams(hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemAllocNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaMemAllocNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddMemAllocNode", __pyx_f[0], 912, 1, __PYX_ERR(0, 912, __pyx_L1_error));

  /* "cuda/ccudart.pyx":913
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemAllocNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 913, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":912
 *     return _cudaGraphExternalSemaphoresWaitNodeSetParams(hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemAllocNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":915
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemAllocNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemAllocNodeParams *__pyx_v_params_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphMemAllocNodeGetParams", __pyx_f[0], 915, 1, __PYX_ERR(0, 915, __pyx_L1_error));

  /* "cuda/ccudart.pyx":916
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemAllocNodeGetParams(__pyx_v_node, __pyx_v_params_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 916, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":915
 *     return _cudaGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemAllocNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":918
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemFreeNode(pGraphNode, graph, pDependencies, numDependencies, dptr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddMemFreeNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, void *__pyx_v_dptr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddMemFreeNode", __pyx_f[0], 918, 1, __PYX_ERR(0, 918, __pyx_L1_error));

  /* "cuda/ccudart.pyx":919
 * 
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddMemFreeNode(pGraphNode, graph, pDependencies, numDependencies, dptr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemFreeNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_dptr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 919, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":918
 *     return _cudaGraphMemAllocNodeGetParams(node, params_out)
 * 
 * cdef cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddMemFreeNode(pGraphNode, graph, pDependencies, numDependencies, dptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddMemFreeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":921
 *     return _cudaGraphAddMemFreeNode(pGraphNode, graph, pDependencies, numDependencies, dptr)
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphMemFreeNodeGetParams(cudaGraphNode_t __pyx_v_node, void *__pyx_v_dptr_out) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphMemFreeNodeGetParams", __pyx_f[0], 921, 1, __PYX_ERR(0, 921, __pyx_L1_error));

  /* "cuda/ccudart.pyx":922
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemFreeNodeGetParams(__pyx_v_node, __pyx_v_dptr_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 922, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":921
 *     return _cudaGraphAddMemFreeNode(pGraphNode, graph, pDependencies, numDependencies, dptr)
 * 
 * cdef cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphMemFreeNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":924
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGraphMemTrim(device)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGraphMemTrim(int __pyx_v_device) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGraphMemTrim", __pyx_f[0], 924, 1, __PYX_ERR(0, 924, __pyx_L1_error));

  /* "cuda/ccudart.pyx":925
 * 
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGraphMemTrim(device)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGraphMemTrim(__pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 925, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":924
 *     return _cudaGraphMemFreeNodeGetParams(node, dptr_out)
 * 
 * cdef cudaError_t cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGraphMemTrim(device)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGraphMemTrim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":927
 *     return _cudaDeviceGraphMemTrim(device)
 * 
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetGraphMemAttribute(device, attr, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceGetGraphMemAttribute(int __pyx_v_device, enum cudaGraphMemAttributeType __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceGetGraphMemAttribute", __pyx_f[0], 927, 1, __PYX_ERR(0, 927, __pyx_L1_error));

  /* "cuda/ccudart.pyx":928
 * 
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceGetGraphMemAttribute(device, attr, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetGraphMemAttribute(__pyx_v_device, __pyx_v_attr, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 928, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":927
 *     return _cudaDeviceGraphMemTrim(device)
 * 
 * cdef cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceGetGraphMemAttribute(device, attr, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceGetGraphMemAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":930
 *     return _cudaDeviceGetGraphMemAttribute(device, attr, value)
 * 
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetGraphMemAttribute(device, attr, value)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaDeviceSetGraphMemAttribute(int __pyx_v_device, enum cudaGraphMemAttributeType __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaDeviceSetGraphMemAttribute", __pyx_f[0], 930, 1, __PYX_ERR(0, 930, __pyx_L1_error));

  /* "cuda/ccudart.pyx":931
 * 
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaDeviceSetGraphMemAttribute(device, attr, value)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetGraphMemAttribute(__pyx_v_device, __pyx_v_attr, __pyx_v_value); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 931, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":930
 *     return _cudaDeviceGetGraphMemAttribute(device, attr, value)
 * 
 * cdef cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaDeviceSetGraphMemAttribute(device, attr, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaDeviceSetGraphMemAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":933
 *     return _cudaDeviceSetGraphMemAttribute(device, attr, value)
 * 
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphClone(pGraphClone, originalGraph)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphClone(cudaGraph_t *__pyx_v_pGraphClone, cudaGraph_t __pyx_v_originalGraph) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphClone", __pyx_f[0], 933, 1, __PYX_ERR(0, 933, __pyx_L1_error));

  /* "cuda/ccudart.pyx":934
 * 
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphClone(pGraphClone, originalGraph)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphClone(__pyx_v_pGraphClone, __pyx_v_originalGraph); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 934, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":933
 *     return _cudaDeviceSetGraphMemAttribute(device, attr, value)
 * 
 * cdef cudaError_t cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphClone(pGraphClone, originalGraph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphClone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":936
 *     return _cudaGraphClone(pGraphClone, originalGraph)
 * 
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeFindInClone(pNode, originalNode, clonedGraph)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeFindInClone(cudaGraphNode_t *__pyx_v_pNode, cudaGraphNode_t __pyx_v_originalNode, cudaGraph_t __pyx_v_clonedGraph) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeFindInClone", __pyx_f[0], 936, 1, __PYX_ERR(0, 936, __pyx_L1_error));

  /* "cuda/ccudart.pyx":937
 * 
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeFindInClone(pNode, originalNode, clonedGraph)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeFindInClone(__pyx_v_pNode, __pyx_v_originalNode, __pyx_v_clonedGraph); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 937, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":936
 *     return _cudaGraphClone(pGraphClone, originalGraph)
 * 
 * cdef cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeFindInClone(pNode, originalNode, clonedGraph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeFindInClone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":939
 *     return _cudaGraphNodeFindInClone(pNode, originalNode, clonedGraph)
 * 
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetType(node, pType)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetType(cudaGraphNode_t __pyx_v_node, enum cudaGraphNodeType *__pyx_v_pType) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeGetType", __pyx_f[0], 939, 1, __PYX_ERR(0, 939, __pyx_L1_error));

  /* "cuda/ccudart.pyx":940
 * 
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeGetType(node, pType)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetType(__pyx_v_node, __pyx_v_pType); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 940, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":939
 *     return _cudaGraphNodeFindInClone(pNode, originalNode, clonedGraph)
 * 
 * cdef cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetType(node, pType)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":942
 *     return _cudaGraphNodeGetType(node, pType)
 * 
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetNodes(graph, nodes, numNodes)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphGetNodes(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_nodes, size_t *__pyx_v_numNodes) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphGetNodes", __pyx_f[0], 942, 1, __PYX_ERR(0, 942, __pyx_L1_error));

  /* "cuda/ccudart.pyx":943
 * 
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphGetNodes(graph, nodes, numNodes)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetNodes(__pyx_v_graph, __pyx_v_nodes, __pyx_v_numNodes); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 943, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":942
 *     return _cudaGraphNodeGetType(node, pType)
 * 
 * cdef cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetNodes(graph, nodes, numNodes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphGetNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":945
 *     return _cudaGraphGetNodes(graph, nodes, numNodes)
 * 
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetRootNodes(graph, pRootNodes, pNumRootNodes)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphGetRootNodes(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_pRootNodes, size_t *__pyx_v_pNumRootNodes) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphGetRootNodes", __pyx_f[0], 945, 1, __PYX_ERR(0, 945, __pyx_L1_error));

  /* "cuda/ccudart.pyx":946
 * 
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphGetRootNodes(graph, pRootNodes, pNumRootNodes)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetRootNodes(__pyx_v_graph, __pyx_v_pRootNodes, __pyx_v_pNumRootNodes); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 946, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":945
 *     return _cudaGraphGetNodes(graph, nodes, numNodes)
 * 
 * cdef cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetRootNodes(graph, pRootNodes, pNumRootNodes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphGetRootNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":948
 *     return _cudaGraphGetRootNodes(graph, pRootNodes, pNumRootNodes)
 * 
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetEdges(graph, from_, to, numEdges)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphGetEdges(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_from_, cudaGraphNode_t *__pyx_v_to, size_t *__pyx_v_numEdges) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphGetEdges", __pyx_f[0], 948, 1, __PYX_ERR(0, 948, __pyx_L1_error));

  /* "cuda/ccudart.pyx":949
 * 
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphGetEdges(graph, from_, to, numEdges)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetEdges(__pyx_v_graph, __pyx_v_from_, __pyx_v_to, __pyx_v_numEdges); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 949, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":948
 *     return _cudaGraphGetRootNodes(graph, pRootNodes, pNumRootNodes)
 * 
 * cdef cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetEdges(graph, from_, to, numEdges)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphGetEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":951
 *     return _cudaGraphGetEdges(graph, from_, to, numEdges)
 * 
 * cdef cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetEdges_v2(graph, from_, to, edgeData, numEdges)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphGetEdges_v2(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_from_, cudaGraphNode_t *__pyx_v_to, cudaGraphEdgeData *__pyx_v_edgeData, size_t *__pyx_v_numEdges) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphGetEdges_v2", __pyx_f[0], 951, 1, __PYX_ERR(0, 951, __pyx_L1_error));

  /* "cuda/ccudart.pyx":952
 * 
 * cdef cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphGetEdges_v2(graph, from_, to, edgeData, numEdges)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetEdges_v2(__pyx_v_graph, __pyx_v_from_, __pyx_v_to, __pyx_v_edgeData, __pyx_v_numEdges); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 952, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":951
 *     return _cudaGraphGetEdges(graph, from_, to, numEdges)
 * 
 * cdef cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphGetEdges_v2(graph, from_, to, edgeData, numEdges)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphGetEdges_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":954
 *     return _cudaGraphGetEdges_v2(graph, from_, to, edgeData, numEdges)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependencies(node, pDependencies, pNumDependencies)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependencies(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependencies, size_t *__pyx_v_pNumDependencies) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeGetDependencies", __pyx_f[0], 954, 1, __PYX_ERR(0, 954, __pyx_L1_error));

  /* "cuda/ccudart.pyx":955
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeGetDependencies(node, pDependencies, pNumDependencies)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependencies(__pyx_v_node, __pyx_v_pDependencies, __pyx_v_pNumDependencies); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 955, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":954
 *     return _cudaGraphGetEdges_v2(graph, from_, to, edgeData, numEdges)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependencies(node, pDependencies, pNumDependencies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":957
 *     return _cudaGraphNodeGetDependencies(node, pDependencies, pNumDependencies)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependencies_v2(node, pDependencies, edgeData, pNumDependencies)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependencies_v2(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependencies, cudaGraphEdgeData *__pyx_v_edgeData, size_t *__pyx_v_pNumDependencies) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeGetDependencies_v2", __pyx_f[0], 957, 1, __PYX_ERR(0, 957, __pyx_L1_error));

  /* "cuda/ccudart.pyx":958
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeGetDependencies_v2(node, pDependencies, edgeData, pNumDependencies)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependencies_v2(__pyx_v_node, __pyx_v_pDependencies, __pyx_v_edgeData, __pyx_v_pNumDependencies); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":957
 *     return _cudaGraphNodeGetDependencies(node, pDependencies, pNumDependencies)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependencies_v2(node, pDependencies, edgeData, pNumDependencies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":960
 *     return _cudaGraphNodeGetDependencies_v2(node, pDependencies, edgeData, pNumDependencies)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependentNodes(node, pDependentNodes, pNumDependentNodes)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependentNodes(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependentNodes, size_t *__pyx_v_pNumDependentNodes) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeGetDependentNodes", __pyx_f[0], 960, 1, __PYX_ERR(0, 960, __pyx_L1_error));

  /* "cuda/ccudart.pyx":961
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeGetDependentNodes(node, pDependentNodes, pNumDependentNodes)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependentNodes(__pyx_v_node, __pyx_v_pDependentNodes, __pyx_v_pNumDependentNodes); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 961, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":960
 *     return _cudaGraphNodeGetDependencies_v2(node, pDependencies, edgeData, pNumDependencies)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependentNodes(node, pDependentNodes, pNumDependentNodes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetDependentNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":963
 *     return _cudaGraphNodeGetDependentNodes(node, pDependentNodes, pNumDependentNodes)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependentNodes_v2(node, pDependentNodes, edgeData, pNumDependentNodes)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependentNodes, cudaGraphEdgeData *__pyx_v_edgeData, size_t *__pyx_v_pNumDependentNodes) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeGetDependentNodes_v2", __pyx_f[0], 963, 1, __PYX_ERR(0, 963, __pyx_L1_error));

  /* "cuda/ccudart.pyx":964
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeGetDependentNodes_v2(node, pDependentNodes, edgeData, pNumDependentNodes)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependentNodes_v2(__pyx_v_node, __pyx_v_pDependentNodes, __pyx_v_edgeData, __pyx_v_pNumDependentNodes); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 964, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":963
 *     return _cudaGraphNodeGetDependentNodes(node, pDependentNodes, pNumDependentNodes)
 * 
 * cdef cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetDependentNodes_v2(node, pDependentNodes, edgeData, pNumDependentNodes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetDependentNodes_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":966
 *     return _cudaGraphNodeGetDependentNodes_v2(node, pDependentNodes, edgeData, pNumDependentNodes)
 * 
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddDependencies(graph, from_, to, numDependencies)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddDependencies(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddDependencies", __pyx_f[0], 966, 1, __PYX_ERR(0, 966, __pyx_L1_error));

  /* "cuda/ccudart.pyx":967
 * 
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddDependencies(graph, from_, to, numDependencies)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddDependencies(__pyx_v_graph, __pyx_v_from_, __pyx_v_to, __pyx_v_numDependencies); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 967, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":966
 *     return _cudaGraphNodeGetDependentNodes_v2(node, pDependentNodes, edgeData, pNumDependentNodes)
 * 
 * cdef cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddDependencies(graph, from_, to, numDependencies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":969
 *     return _cudaGraphAddDependencies(graph, from_, to, numDependencies)
 * 
 * cdef cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddDependencies_v2(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, cudaGraphEdgeData const *__pyx_v_edgeData, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddDependencies_v2", __pyx_f[0], 969, 1, __PYX_ERR(0, 969, __pyx_L1_error));

  /* "cuda/ccudart.pyx":970
 * 
 * cdef cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddDependencies_v2(graph, from_, to, edgeData, numDependencies)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddDependencies_v2(__pyx_v_graph, __pyx_v_from_, __pyx_v_to, __pyx_v_edgeData, __pyx_v_numDependencies); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 970, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":969
 *     return _cudaGraphAddDependencies(graph, from_, to, numDependencies)
 * 
 * cdef cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":972
 *     return _cudaGraphAddDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphRemoveDependencies(graph, from_, to, numDependencies)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphRemoveDependencies(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphRemoveDependencies", __pyx_f[0], 972, 1, __PYX_ERR(0, 972, __pyx_L1_error));

  /* "cuda/ccudart.pyx":973
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphRemoveDependencies(graph, from_, to, numDependencies)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRemoveDependencies(__pyx_v_graph, __pyx_v_from_, __pyx_v_to, __pyx_v_numDependencies); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 973, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":972
 *     return _cudaGraphAddDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphRemoveDependencies(graph, from_, to, numDependencies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphRemoveDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":975
 *     return _cudaGraphRemoveDependencies(graph, from_, to, numDependencies)
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphRemoveDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphRemoveDependencies_v2(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, cudaGraphEdgeData const *__pyx_v_edgeData, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphRemoveDependencies_v2", __pyx_f[0], 975, 1, __PYX_ERR(0, 975, __pyx_L1_error));

  /* "cuda/ccudart.pyx":976
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphRemoveDependencies_v2(graph, from_, to, edgeData, numDependencies)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRemoveDependencies_v2(__pyx_v_graph, __pyx_v_from_, __pyx_v_to, __pyx_v_edgeData, __pyx_v_numDependencies); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 976, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":975
 *     return _cudaGraphRemoveDependencies(graph, from_, to, numDependencies)
 * 
 * cdef cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphRemoveDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphRemoveDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":978
 *     return _cudaGraphRemoveDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphDestroyNode(node)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphDestroyNode(cudaGraphNode_t __pyx_v_node) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphDestroyNode", __pyx_f[0], 978, 1, __PYX_ERR(0, 978, __pyx_L1_error));

  /* "cuda/ccudart.pyx":979
 * 
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphDestroyNode(node)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDestroyNode(__pyx_v_node); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 979, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":978
 *     return _cudaGraphRemoveDependencies_v2(graph, from_, to, edgeData, numDependencies)
 * 
 * cdef cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphDestroyNode(node)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphDestroyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":981
 *     return _cudaGraphDestroyNode(node)
 * 
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiate(pGraphExec, graph, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphInstantiate(cudaGraphExec_t *__pyx_v_pGraphExec, cudaGraph_t __pyx_v_graph, unsigned PY_LONG_LONG __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphInstantiate", __pyx_f[0], 981, 1, __PYX_ERR(0, 981, __pyx_L1_error));

  /* "cuda/ccudart.pyx":982
 * 
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphInstantiate(pGraphExec, graph, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiate(__pyx_v_pGraphExec, __pyx_v_graph, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 982, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":981
 *     return _cudaGraphDestroyNode(node)
 * 
 * cdef cudaError_t cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiate(pGraphExec, graph, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphInstantiate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":984
 *     return _cudaGraphInstantiate(pGraphExec, graph, flags)
 * 
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphInstantiateWithFlags(cudaGraphExec_t *__pyx_v_pGraphExec, cudaGraph_t __pyx_v_graph, unsigned PY_LONG_LONG __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphInstantiateWithFlags", __pyx_f[0], 984, 1, __PYX_ERR(0, 984, __pyx_L1_error));

  /* "cuda/ccudart.pyx":985
 * 
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiateWithFlags(__pyx_v_pGraphExec, __pyx_v_graph, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 985, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":984
 *     return _cudaGraphInstantiate(pGraphExec, graph, flags)
 * 
 * cdef cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphInstantiateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":987
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 * cdef cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiateWithParams(pGraphExec, graph, instantiateParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphInstantiateWithParams(cudaGraphExec_t *__pyx_v_pGraphExec, cudaGraph_t __pyx_v_graph, cudaGraphInstantiateParams *__pyx_v_instantiateParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphInstantiateWithParams", __pyx_f[0], 987, 1, __PYX_ERR(0, 987, __pyx_L1_error));

  /* "cuda/ccudart.pyx":988
 * 
 * cdef cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphInstantiateWithParams(pGraphExec, graph, instantiateParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiateWithParams(__pyx_v_pGraphExec, __pyx_v_graph, __pyx_v_instantiateParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 988, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":987
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 * cdef cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiateWithParams(pGraphExec, graph, instantiateParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphInstantiateWithParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":990
 *     return _cudaGraphInstantiateWithParams(pGraphExec, graph, instantiateParams)
 * 
 * cdef cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecGetFlags(graphExec, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecGetFlags(cudaGraphExec_t __pyx_v_graphExec, unsigned PY_LONG_LONG *__pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecGetFlags", __pyx_f[0], 990, 1, __PYX_ERR(0, 990, __pyx_L1_error));

  /* "cuda/ccudart.pyx":991
 * 
 * cdef cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecGetFlags(graphExec, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecGetFlags(__pyx_v_graphExec, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 991, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":990
 *     return _cudaGraphInstantiateWithParams(pGraphExec, graph, instantiateParams)
 * 
 * cdef cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecGetFlags(graphExec, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":993
 *     return _cudaGraphExecGetFlags(graphExec, flags)
 * 
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecKernelNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecKernelNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecKernelNodeSetParams", __pyx_f[0], 993, 1, __PYX_ERR(0, 993, __pyx_L1_error));

  /* "cuda/ccudart.pyx":994
 * 
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecKernelNodeSetParams(hGraphExec, node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecKernelNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 994, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":993
 *     return _cudaGraphExecGetFlags(graphExec, flags)
 * 
 * cdef cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecKernelNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecKernelNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":996
 *     return _cudaGraphExecKernelNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaMemcpy3DParms const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecMemcpyNodeSetParams", __pyx_f[0], 996, 1, __PYX_ERR(0, 996, __pyx_L1_error));

  /* "cuda/ccudart.pyx":997
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 997, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":996
 *     return _cudaGraphExecKernelNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecMemcpyNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":999
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecMemcpyNodeSetParams1D", __pyx_f[0], 999, 1, __PYX_ERR(0, 999, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1000
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams1D(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1000, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":999
 *     return _cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecMemcpyNodeSetParams1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1002
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaMemsetParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecMemsetNodeSetParams", __pyx_f[0], 1002, 1, __PYX_ERR(0, 1002, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1003
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemsetNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1003, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1002
 *     return _cudaGraphExecMemcpyNodeSetParams1D(hGraphExec, node, dst, src, count, kind)
 * 
 * cdef cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecMemsetNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1005
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecHostNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecHostNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaHostNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecHostNodeSetParams", __pyx_f[0], 1005, 1, __PYX_ERR(0, 1005, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1006
 * 
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecHostNodeSetParams(hGraphExec, node, pNodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecHostNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_pNodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1006, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1005
 *     return _cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecHostNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecHostNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1008
 *     return _cudaGraphExecHostNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecChildGraphNodeSetParams(hGraphExec, node, childGraph)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, cudaGraph_t __pyx_v_childGraph) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecChildGraphNodeSetParams", __pyx_f[0], 1008, 1, __PYX_ERR(0, 1008, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1009
 * 
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecChildGraphNodeSetParams(hGraphExec, node, childGraph)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecChildGraphNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, __pyx_v_childGraph); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1009, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1008
 *     return _cudaGraphExecHostNodeSetParams(hGraphExec, node, pNodeParams)
 * 
 * cdef cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecChildGraphNodeSetParams(hGraphExec, node, childGraph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecChildGraphNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1011
 *     return _cudaGraphExecChildGraphNodeSetParams(hGraphExec, node, childGraph)
 * 
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecEventRecordNodeSetEvent(hGraphExec, hNode, event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecEventRecordNodeSetEvent", __pyx_f[0], 1011, 1, __PYX_ERR(0, 1011, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1012
 * 
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecEventRecordNodeSetEvent(hGraphExec, hNode, event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecEventRecordNodeSetEvent(__pyx_v_hGraphExec, __pyx_v_hNode, __pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1012, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1011
 *     return _cudaGraphExecChildGraphNodeSetParams(hGraphExec, node, childGraph)
 * 
 * cdef cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecEventRecordNodeSetEvent(hGraphExec, hNode, event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecEventRecordNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1014
 *     return _cudaGraphExecEventRecordNodeSetEvent(hGraphExec, hNode, event)
 * 
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecEventWaitNodeSetEvent(hGraphExec, hNode, event)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecEventWaitNodeSetEvent", __pyx_f[0], 1014, 1, __PYX_ERR(0, 1014, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1015
 * 
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecEventWaitNodeSetEvent(hGraphExec, hNode, event)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecEventWaitNodeSetEvent(__pyx_v_hGraphExec, __pyx_v_hNode, __pyx_v_event); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1015, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1014
 *     return _cudaGraphExecEventRecordNodeSetEvent(hGraphExec, hNode, event)
 * 
 * cdef cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecEventWaitNodeSetEvent(hGraphExec, hNode, event)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecEventWaitNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1017
 *     return _cudaGraphExecEventWaitNodeSetEvent(hGraphExec, hNode, event)
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecExternalSemaphoresSignalNodeSetParams", __pyx_f[0], 1017, 1, __PYX_ERR(0, 1017, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1018
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec, hNode, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecExternalSemaphoresSignalNodeSetParams(__pyx_v_hGraphExec, __pyx_v_hNode, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1018, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1017
 *     return _cudaGraphExecEventWaitNodeSetEvent(hGraphExec, hNode, event)
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecExternalSemaphoresSignalNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1020
 *     return _cudaGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecExternalSemaphoresWaitNodeSetParams", __pyx_f[0], 1020, 1, __PYX_ERR(0, 1020, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1021
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec, hNode, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecExternalSemaphoresWaitNodeSetParams(__pyx_v_hGraphExec, __pyx_v_hNode, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1021, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1020
 *     return _cudaGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecExternalSemaphoresWaitNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1023
 *     return _cudaGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeSetEnabled(hGraphExec, hNode, isEnabled)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeSetEnabled(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, unsigned int __pyx_v_isEnabled) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeSetEnabled", __pyx_f[0], 1023, 1, __PYX_ERR(0, 1023, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1024
 * 
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeSetEnabled(hGraphExec, hNode, isEnabled)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeSetEnabled(__pyx_v_hGraphExec, __pyx_v_hNode, __pyx_v_isEnabled); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1024, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1023
 *     return _cudaGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec, hNode, nodeParams)
 * 
 * cdef cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeSetEnabled(hGraphExec, hNode, isEnabled)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeSetEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1026
 *     return _cudaGraphNodeSetEnabled(hGraphExec, hNode, isEnabled)
 * 
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetEnabled(hGraphExec, hNode, isEnabled)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeGetEnabled(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, unsigned int *__pyx_v_isEnabled) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeGetEnabled", __pyx_f[0], 1026, 1, __PYX_ERR(0, 1026, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1027
 * 
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeGetEnabled(hGraphExec, hNode, isEnabled)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetEnabled(__pyx_v_hGraphExec, __pyx_v_hNode, __pyx_v_isEnabled); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1027, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1026
 *     return _cudaGraphNodeSetEnabled(hGraphExec, hNode, isEnabled)
 * 
 * cdef cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeGetEnabled(hGraphExec, hNode, isEnabled)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeGetEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1029
 *     return _cudaGraphNodeGetEnabled(hGraphExec, hNode, isEnabled)
 * 
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecUpdate(hGraphExec, hGraph, resultInfo)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecUpdate(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraph_t __pyx_v_hGraph, cudaGraphExecUpdateResultInfo *__pyx_v_resultInfo) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecUpdate", __pyx_f[0], 1029, 1, __PYX_ERR(0, 1029, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1030
 * 
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecUpdate(hGraphExec, hGraph, resultInfo)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecUpdate(__pyx_v_hGraphExec, __pyx_v_hGraph, __pyx_v_resultInfo); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1030, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1029
 *     return _cudaGraphNodeGetEnabled(hGraphExec, hNode, isEnabled)
 * 
 * cdef cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecUpdate(hGraphExec, hGraph, resultInfo)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecUpdate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1032
 *     return _cudaGraphExecUpdate(hGraphExec, hGraph, resultInfo)
 * 
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphUpload(graphExec, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphUpload(cudaGraphExec_t __pyx_v_graphExec, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphUpload", __pyx_f[0], 1032, 1, __PYX_ERR(0, 1032, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1033
 * 
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphUpload(graphExec, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphUpload(__pyx_v_graphExec, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1033, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1032
 *     return _cudaGraphExecUpdate(hGraphExec, hGraph, resultInfo)
 * 
 * cdef cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphUpload(graphExec, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphUpload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1035
 *     return _cudaGraphUpload(graphExec, stream)
 * 
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphLaunch(graphExec, stream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphLaunch(cudaGraphExec_t __pyx_v_graphExec, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphLaunch", __pyx_f[0], 1035, 1, __PYX_ERR(0, 1035, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1036
 * 
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphLaunch(graphExec, stream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphLaunch(__pyx_v_graphExec, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1036, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1035
 *     return _cudaGraphUpload(graphExec, stream)
 * 
 * cdef cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphLaunch(graphExec, stream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphLaunch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1038
 *     return _cudaGraphLaunch(graphExec, stream)
 * 
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecDestroy(graphExec)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecDestroy(cudaGraphExec_t __pyx_v_graphExec) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecDestroy", __pyx_f[0], 1038, 1, __PYX_ERR(0, 1038, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1039
 * 
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecDestroy(graphExec)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecDestroy(__pyx_v_graphExec); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1039, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1038
 *     return _cudaGraphLaunch(graphExec, stream)
 * 
 * cdef cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecDestroy(graphExec)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1041
 *     return _cudaGraphExecDestroy(graphExec)
 * 
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphDestroy(graph)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphDestroy(cudaGraph_t __pyx_v_graph) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphDestroy", __pyx_f[0], 1041, 1, __PYX_ERR(0, 1041, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1042
 * 
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphDestroy(graph)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDestroy(__pyx_v_graph); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1042, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1041
 *     return _cudaGraphExecDestroy(graphExec)
 * 
 * cdef cudaError_t cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphDestroy(graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1044
 *     return _cudaGraphDestroy(graph)
 * 
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphDebugDotPrint(graph, path, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphDebugDotPrint(cudaGraph_t __pyx_v_graph, char const *__pyx_v_path, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphDebugDotPrint", __pyx_f[0], 1044, 1, __PYX_ERR(0, 1044, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1045
 * 
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphDebugDotPrint(graph, path, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDebugDotPrint(__pyx_v_graph, __pyx_v_path, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1045, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1044
 *     return _cudaGraphDestroy(graph)
 * 
 * cdef cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphDebugDotPrint(graph, path, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphDebugDotPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1047
 *     return _cudaGraphDebugDotPrint(graph, path, flags)
 * 
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaUserObjectCreate(object_out, ptr, destroy, initialRefcount, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaUserObjectCreate(cudaUserObject_t *__pyx_v_object_out, void *__pyx_v_ptr, cudaHostFn_t __pyx_v_destroy, unsigned int __pyx_v_initialRefcount, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaUserObjectCreate", __pyx_f[0], 1047, 1, __PYX_ERR(0, 1047, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1048
 * 
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaUserObjectCreate(object_out, ptr, destroy, initialRefcount, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectCreate(__pyx_v_object_out, __pyx_v_ptr, __pyx_v_destroy, __pyx_v_initialRefcount, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1048, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1047
 *     return _cudaGraphDebugDotPrint(graph, path, flags)
 * 
 * cdef cudaError_t cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaUserObjectCreate(object_out, ptr, destroy, initialRefcount, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaUserObjectCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1050
 *     return _cudaUserObjectCreate(object_out, ptr, destroy, initialRefcount, flags)
 * 
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaUserObjectRetain(object, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaUserObjectRetain(cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaUserObjectRetain", __pyx_f[0], 1050, 1, __PYX_ERR(0, 1050, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1051
 * 
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaUserObjectRetain(object, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectRetain(__pyx_v_object, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1051, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1050
 *     return _cudaUserObjectCreate(object_out, ptr, destroy, initialRefcount, flags)
 * 
 * cdef cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaUserObjectRetain(object, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaUserObjectRetain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1053
 *     return _cudaUserObjectRetain(object, count)
 * 
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaUserObjectRelease(object, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaUserObjectRelease(cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaUserObjectRelease", __pyx_f[0], 1053, 1, __PYX_ERR(0, 1053, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1054
 * 
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaUserObjectRelease(object, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectRelease(__pyx_v_object, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1054, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1053
 *     return _cudaUserObjectRetain(object, count)
 * 
 * cdef cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaUserObjectRelease(object, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaUserObjectRelease", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1056
 *     return _cudaUserObjectRelease(object, count)
 * 
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphRetainUserObject(graph, object, count, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphRetainUserObject(cudaGraph_t __pyx_v_graph, cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphRetainUserObject", __pyx_f[0], 1056, 1, __PYX_ERR(0, 1056, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1057
 * 
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphRetainUserObject(graph, object, count, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRetainUserObject(__pyx_v_graph, __pyx_v_object, __pyx_v_count, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1057, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1056
 *     return _cudaUserObjectRelease(object, count)
 * 
 * cdef cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphRetainUserObject(graph, object, count, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphRetainUserObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1059
 *     return _cudaGraphRetainUserObject(graph, object, count, flags)
 * 
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphReleaseUserObject(graph, object, count)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphReleaseUserObject(cudaGraph_t __pyx_v_graph, cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphReleaseUserObject", __pyx_f[0], 1059, 1, __PYX_ERR(0, 1059, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1060
 * 
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphReleaseUserObject(graph, object, count)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphReleaseUserObject(__pyx_v_graph, __pyx_v_object, __pyx_v_count); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1060, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1059
 *     return _cudaGraphRetainUserObject(graph, object, count, flags)
 * 
 * cdef cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphReleaseUserObject(graph, object, count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphReleaseUserObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1062
 *     return _cudaGraphReleaseUserObject(graph, object, count)
 * 
 * cdef cudaError_t cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddNode", __pyx_f[0], 1062, 1, __PYX_ERR(0, 1062, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1063
 * 
 * cdef cudaError_t cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1063, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1062
 *     return _cudaGraphReleaseUserObject(graph, object, count)
 * 
 * cdef cudaError_t cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1065
 *     return _cudaGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddNode_v2(pGraphNode, graph, pDependencies, dependencyData, numDependencies, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphAddNode_v2(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, cudaGraphEdgeData const *__pyx_v_dependencyData, size_t __pyx_v_numDependencies, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphAddNode_v2", __pyx_f[0], 1065, 1, __PYX_ERR(0, 1065, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1066
 * 
 * cdef cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphAddNode_v2(pGraphNode, graph, pDependencies, dependencyData, numDependencies, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddNode_v2(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_dependencyData, __pyx_v_numDependencies, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1065
 *     return _cudaGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphAddNode_v2(pGraphNode, graph, pDependencies, dependencyData, numDependencies, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphAddNode_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1068
 *     return _cudaGraphAddNode_v2(pGraphNode, graph, pDependencies, dependencyData, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeSetParams(node, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphNodeSetParams", __pyx_f[0], 1068, 1, __PYX_ERR(0, 1068, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1069
 * 
 * cdef cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphNodeSetParams(node, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeSetParams(__pyx_v_node, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1069, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1068
 *     return _cudaGraphAddNode_v2(pGraphNode, graph, pDependencies, dependencyData, numDependencies, nodeParams)
 * 
 * cdef cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphNodeSetParams(node, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1071
 *     return _cudaGraphNodeSetParams(node, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecNodeSetParams(graphExec, node, nodeParams)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphExecNodeSetParams(cudaGraphExec_t __pyx_v_graphExec, cudaGraphNode_t __pyx_v_node, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphExecNodeSetParams", __pyx_f[0], 1071, 1, __PYX_ERR(0, 1071, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1072
 * 
 * cdef cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphExecNodeSetParams(graphExec, node, nodeParams)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecNodeSetParams(__pyx_v_graphExec, __pyx_v_node, __pyx_v_nodeParams); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1072, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1071
 *     return _cudaGraphNodeSetParams(node, nodeParams)
 * 
 * cdef cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphExecNodeSetParams(graphExec, node, nodeParams)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphExecNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1074
 *     return _cudaGraphExecNodeSetParams(graphExec, node, nodeParams)
 * 
 * cdef cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphConditionalHandleCreate(pHandle_out, graph, defaultLaunchValue, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle *__pyx_v_pHandle_out, cudaGraph_t __pyx_v_graph, unsigned int __pyx_v_defaultLaunchValue, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphConditionalHandleCreate", __pyx_f[0], 1074, 1, __PYX_ERR(0, 1074, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1075
 * 
 * cdef cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphConditionalHandleCreate(pHandle_out, graph, defaultLaunchValue, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphConditionalHandleCreate(__pyx_v_pHandle_out, __pyx_v_graph, __pyx_v_defaultLaunchValue, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1074
 *     return _cudaGraphExecNodeSetParams(graphExec, node, nodeParams)
 * 
 * cdef cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphConditionalHandleCreate(pHandle_out, graph, defaultLaunchValue, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphConditionalHandleCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1077
 *     return _cudaGraphConditionalHandleCreate(pHandle_out, graph, defaultLaunchValue, flags)
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags, driverStatus)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetDriverEntryPoint(char const *__pyx_v_symbol, void **__pyx_v_funcPtr, unsigned PY_LONG_LONG __pyx_v_flags, enum cudaDriverEntryPointQueryResult *__pyx_v_driverStatus) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetDriverEntryPoint", __pyx_f[0], 1077, 1, __PYX_ERR(0, 1077, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1078
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags, driverStatus)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDriverEntryPoint(__pyx_v_symbol, __pyx_v_funcPtr, __pyx_v_flags, __pyx_v_driverStatus); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1077
 *     return _cudaGraphConditionalHandleCreate(pHandle_out, graph, defaultLaunchValue, flags)
 * 
 * cdef cudaError_t cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags, driverStatus)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetDriverEntryPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1080
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags, driverStatus)
 * 
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetExportTable(ppExportTable, pExportTableId)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetExportTable(void const **__pyx_v_ppExportTable, cudaUUID_t const *__pyx_v_pExportTableId) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetExportTable", __pyx_f[0], 1080, 1, __PYX_ERR(0, 1080, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1081
 * 
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetExportTable(ppExportTable, pExportTableId)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetExportTable(__pyx_v_ppExportTable, __pyx_v_pExportTableId); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1081, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1080
 *     return _cudaGetDriverEntryPoint(symbol, funcPtr, flags, driverStatus)
 * 
 * cdef cudaError_t cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetExportTable(ppExportTable, pExportTableId)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetExportTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1083
 *     return _cudaGetExportTable(ppExportTable, pExportTableId)
 * 
 * cdef cudaError_t cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetKernel(kernelPtr, entryFuncAddr)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGetKernel(cudaKernel_t *__pyx_v_kernelPtr, void const *__pyx_v_entryFuncAddr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGetKernel", __pyx_f[0], 1083, 1, __PYX_ERR(0, 1083, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1084
 * 
 * cdef cudaError_t cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGetKernel(kernelPtr, entryFuncAddr)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetKernel(__pyx_v_kernelPtr, __pyx_v_entryFuncAddr); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1084, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1083
 *     return _cudaGetExportTable(ppExportTable, pExportTableId)
 * 
 * cdef cudaError_t cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGetKernel(kernelPtr, entryFuncAddr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGetKernel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1086
 *     return _cudaGetKernel(kernelPtr, entryFuncAddr)
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 */

static struct cudaPitchedPtr __pyx_f_4cuda_7ccudart_make_cudaPitchedPtr(void *__pyx_v_d, size_t __pyx_v_p, size_t __pyx_v_xsz, size_t __pyx_v_ysz) {
  struct cudaPitchedPtr __pyx_r;
  __Pyx_TraceDeclarations
  struct cudaPitchedPtr __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("make_cudaPitchedPtr", __pyx_f[0], 1086, 1, __PYX_ERR(0, 1086, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1087
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPitchedPtr(__pyx_v_d, __pyx_v_p, __pyx_v_xsz, __pyx_v_ysz); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1087, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1086
 *     return _cudaGetKernel(kernelPtr, entryFuncAddr)
 * 
 * cdef cudaPitchedPtr make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.make_cudaPitchedPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1089
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPos(x, y, z)
 * 
 */

static struct cudaPos __pyx_f_4cuda_7ccudart_make_cudaPos(size_t __pyx_v_x, size_t __pyx_v_y, size_t __pyx_v_z) {
  struct cudaPos __pyx_r;
  __Pyx_TraceDeclarations
  struct cudaPos __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("make_cudaPos", __pyx_f[0], 1089, 1, __PYX_ERR(0, 1089, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1090
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:
 *     return _make_cudaPos(x, y, z)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPos(__pyx_v_x, __pyx_v_y, __pyx_v_z); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1090, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1089
 *     return _make_cudaPitchedPtr(d, p, xsz, ysz)
 * 
 * cdef cudaPos make_cudaPos(size_t x, size_t y, size_t z) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaPos(x, y, z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.make_cudaPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1092
 *     return _make_cudaPos(x, y, z)
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaExtent(w, h, d)
 * 
 */

static struct cudaExtent __pyx_f_4cuda_7ccudart_make_cudaExtent(size_t __pyx_v_w, size_t __pyx_v_h, size_t __pyx_v_d) {
  struct cudaExtent __pyx_r;
  __Pyx_TraceDeclarations
  struct cudaExtent __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("make_cudaExtent", __pyx_f[0], 1092, 1, __PYX_ERR(0, 1092, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1093
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:
 *     return _make_cudaExtent(w, h, d)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource** pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaExtent(__pyx_v_w, __pyx_v_h, __pyx_v_d); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1093, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1092
 *     return _make_cudaPos(x, y, z)
 * 
 * cdef cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) nogil:             # <<<<<<<<<<<<<<
 *     return _make_cudaExtent(w, h, d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.make_cudaExtent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1095
 *     return _make_cudaExtent(w, h, d)
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource** pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsEGLRegisterImage(pCudaResource, image, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsEGLRegisterImage(struct cudaGraphicsResource **__pyx_v_pCudaResource, __pyx_t_4cuda_7ccudart_EGLImageKHR __pyx_v_image, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsEGLRegisterImage", __pyx_f[0], 1095, 1, __PYX_ERR(0, 1095, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1096
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource** pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsEGLRegisterImage(pCudaResource, image, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsEGLRegisterImage(__pyx_v_pCudaResource, __pyx_v_image, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1096, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1095
 *     return _make_cudaExtent(w, h, d)
 * 
 * cdef cudaError_t cudaGraphicsEGLRegisterImage(cudaGraphicsResource** pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsEGLRegisterImage(pCudaResource, image, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsEGLRegisterImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1098
 *     return _cudaGraphicsEGLRegisterImage(pCudaResource, image, flags)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerConnect(conn, eglStream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_EGLStreamKHR __pyx_v_eglStream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamConsumerConnect", __pyx_f[0], 1098, 1, __PYX_ERR(0, 1098, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1099
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamConsumerConnect(conn, eglStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerConnect(__pyx_v_conn, __pyx_v_eglStream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1099, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1098
 *     return _cudaGraphicsEGLRegisterImage(pCudaResource, image, flags)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerConnect(conn, eglStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerConnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1101
 *     return _cudaEGLStreamConsumerConnect(conn, eglStream)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerConnectWithFlags(conn, eglStream, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnectWithFlags(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_EGLStreamKHR __pyx_v_eglStream, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamConsumerConnectWithFlags", __pyx_f[0], 1101, 1, __PYX_ERR(0, 1101, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1102
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamConsumerConnectWithFlags(conn, eglStream, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerConnectWithFlags(__pyx_v_conn, __pyx_v_eglStream, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1102, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1101
 *     return _cudaEGLStreamConsumerConnect(conn, eglStream)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerConnectWithFlags(conn, eglStream, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerConnectWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1104
 *     return _cudaEGLStreamConsumerConnectWithFlags(conn, eglStream, flags)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerDisconnect(conn)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerDisconnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamConsumerDisconnect", __pyx_f[0], 1104, 1, __PYX_ERR(0, 1104, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1105
 * 
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamConsumerDisconnect(conn)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerDisconnect(__pyx_v_conn); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1105, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1104
 *     return _cudaEGLStreamConsumerConnectWithFlags(conn, eglStream, flags)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerDisconnect(conn)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerDisconnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1107
 *     return _cudaEGLStreamConsumerDisconnect(conn)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerAcquireFrame(conn, pCudaResource, pStream, timeout)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerAcquireFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, cudaGraphicsResource_t *__pyx_v_pCudaResource, cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_timeout) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamConsumerAcquireFrame", __pyx_f[0], 1107, 1, __PYX_ERR(0, 1107, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1108
 * 
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamConsumerAcquireFrame(conn, pCudaResource, pStream, timeout)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerAcquireFrame(__pyx_v_conn, __pyx_v_pCudaResource, __pyx_v_pStream, __pyx_v_timeout); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1107
 *     return _cudaEGLStreamConsumerDisconnect(conn)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerAcquireFrame(conn, pCudaResource, pStream, timeout)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerAcquireFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1110
 *     return _cudaEGLStreamConsumerAcquireFrame(conn, pCudaResource, pStream, timeout)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerReleaseFrame(conn, pCudaResource, pStream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerReleaseFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, cudaGraphicsResource_t __pyx_v_pCudaResource, cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamConsumerReleaseFrame", __pyx_f[0], 1110, 1, __PYX_ERR(0, 1110, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1111
 * 
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamConsumerReleaseFrame(conn, pCudaResource, pStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerReleaseFrame(__pyx_v_conn, __pyx_v_pCudaResource, __pyx_v_pStream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1110
 *     return _cudaEGLStreamConsumerAcquireFrame(conn, pCudaResource, pStream, timeout)
 * 
 * cdef cudaError_t cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamConsumerReleaseFrame(conn, pCudaResource, pStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamConsumerReleaseFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1113
 *     return _cudaEGLStreamConsumerReleaseFrame(conn, pCudaResource, pStream)
 * 
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerConnect(conn, eglStream, width, height)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerConnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_EGLStreamKHR __pyx_v_eglStream, __pyx_t_4cuda_7ccudart_EGLint __pyx_v_width, __pyx_t_4cuda_7ccudart_EGLint __pyx_v_height) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamProducerConnect", __pyx_f[0], 1113, 1, __PYX_ERR(0, 1113, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1114
 * 
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamProducerConnect(conn, eglStream, width, height)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerConnect(__pyx_v_conn, __pyx_v_eglStream, __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1114, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1113
 *     return _cudaEGLStreamConsumerReleaseFrame(conn, pCudaResource, pStream)
 * 
 * cdef cudaError_t cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerConnect(conn, eglStream, width, height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerConnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1116
 *     return _cudaEGLStreamProducerConnect(conn, eglStream, width, height)
 * 
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerDisconnect(conn)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerDisconnect(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamProducerDisconnect", __pyx_f[0], 1116, 1, __PYX_ERR(0, 1116, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1117
 * 
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamProducerDisconnect(conn)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerDisconnect(__pyx_v_conn); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1117, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1116
 *     return _cudaEGLStreamProducerConnect(conn, eglStream, width, height)
 * 
 * cdef cudaError_t cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerDisconnect(conn)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerDisconnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1119
 *     return _cudaEGLStreamProducerDisconnect(conn)
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerPresentFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_cudaEglFrame __pyx_v_eglframe, cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamProducerPresentFrame", __pyx_f[0], 1119, 1, __PYX_ERR(0, 1119, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1120
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerPresentFrame(__pyx_v_conn, __pyx_v_eglframe, __pyx_v_pStream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1120, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1119
 *     return _cudaEGLStreamProducerDisconnect(conn)
 * 
 * cdef cudaError_t cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerPresentFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1122
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEGLStreamProducerReturnFrame(__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_7ccudart_cudaEglFrame *__pyx_v_eglframe, cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEGLStreamProducerReturnFrame", __pyx_f[0], 1122, 1, __PYX_ERR(0, 1122, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1123
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerReturnFrame(__pyx_v_conn, __pyx_v_eglframe, __pyx_v_pStream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1123, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1122
 *     return _cudaEGLStreamProducerPresentFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEGLStreamProducerReturnFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1125
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedEglFrame(__pyx_t_4cuda_7ccudart_cudaEglFrame *__pyx_v_eglFrame, cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_index, unsigned int __pyx_v_mipLevel) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsResourceGetMappedEglFrame", __pyx_f[0], 1125, 1, __PYX_ERR(0, 1125, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1126
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedEglFrame(__pyx_v_eglFrame, __pyx_v_resource, __pyx_v_index, __pyx_v_mipLevel); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1126, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1125
 *     return _cudaEGLStreamProducerReturnFrame(conn, eglframe, pStream)
 * 
 * cdef cudaError_t cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsResourceGetMappedEglFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1128
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreateFromEGLSync(phEvent, eglSync, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaEventCreateFromEGLSync(cudaEvent_t *__pyx_v_phEvent, __pyx_t_4cuda_7ccudart_EGLSyncKHR __pyx_v_eglSync, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaEventCreateFromEGLSync", __pyx_f[0], 1128, 1, __PYX_ERR(0, 1128, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1129
 * 
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaEventCreateFromEGLSync(phEvent, eglSync, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreateFromEGLSync(__pyx_v_phEvent, __pyx_v_eglSync, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1129, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1128
 *     return _cudaGraphicsResourceGetMappedEglFrame(eglFrame, resource, index, mipLevel)
 * 
 * cdef cudaError_t cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaEventCreateFromEGLSync(phEvent, eglSync, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaEventCreateFromEGLSync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1131
 *     return _cudaEventCreateFromEGLSync(phEvent, eglSync, flags)
 * 
 * cdef cudaError_t cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaProfilerStart()
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaProfilerStart(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaProfilerStart", __pyx_f[0], 1131, 1, __PYX_ERR(0, 1131, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1132
 * 
 * cdef cudaError_t cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaProfilerStart()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerStart(); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1132, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1131
 *     return _cudaEventCreateFromEGLSync(phEvent, eglSync, flags)
 * 
 * cdef cudaError_t cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaProfilerStart()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaProfilerStart", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1134
 *     return _cudaProfilerStart()
 * 
 * cdef cudaError_t cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaProfilerStop()
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaProfilerStop(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaProfilerStop", __pyx_f[0], 1134, 1, __PYX_ERR(0, 1134, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1135
 * 
 * cdef cudaError_t cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaProfilerStop()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerStop(); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1135, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1134
 *     return _cudaProfilerStart()
 * 
 * cdef cudaError_t cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaProfilerStop()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaProfilerStop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1137
 *     return _cudaProfilerStop()
 * 
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGLGetDevices(pCudaDeviceCount, pCudaDevices, cudaDeviceCount, deviceList)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGLGetDevices(unsigned int *__pyx_v_pCudaDeviceCount, int *__pyx_v_pCudaDevices, unsigned int __pyx_v_cudaDeviceCount, enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList __pyx_v_deviceList) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGLGetDevices", __pyx_f[0], 1137, 1, __PYX_ERR(0, 1137, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1138
 * 
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGLGetDevices(pCudaDeviceCount, pCudaDevices, cudaDeviceCount, deviceList)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGLGetDevices(__pyx_v_pCudaDeviceCount, __pyx_v_pCudaDevices, __pyx_v_cudaDeviceCount, __pyx_v_deviceList); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1138, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1137
 *     return _cudaProfilerStop()
 * 
 * cdef cudaError_t cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGLGetDevices(pCudaDeviceCount, pCudaDevices, cudaDeviceCount, deviceList)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGLGetDevices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1140
 *     return _cudaGLGetDevices(pCudaDeviceCount, pCudaDevices, cudaDeviceCount, deviceList)
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsGLRegisterImage(resource, image, target, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterImage(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_GLuint __pyx_v_image, __pyx_t_4cuda_7ccudart_GLenum __pyx_v_target, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsGLRegisterImage", __pyx_f[0], 1140, 1, __PYX_ERR(0, 1140, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1141
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsGLRegisterImage(resource, image, target, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsGLRegisterImage(__pyx_v_resource, __pyx_v_image, __pyx_v_target, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1141, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1140
 *     return _cudaGLGetDevices(pCudaDeviceCount, pCudaDevices, cudaDeviceCount, deviceList)
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsGLRegisterImage(resource, image, target, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsGLRegisterImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1143
 *     return _cudaGraphicsGLRegisterImage(resource, image, target, flags)
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsGLRegisterBuffer(resource, buffer, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterBuffer(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_GLuint __pyx_v_buffer, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsGLRegisterBuffer", __pyx_f[0], 1143, 1, __PYX_ERR(0, 1143, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1144
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsGLRegisterBuffer(resource, buffer, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsGLRegisterBuffer(__pyx_v_resource, __pyx_v_buffer, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1144, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1143
 *     return _cudaGraphicsGLRegisterImage(resource, image, target, flags)
 * 
 * cdef cudaError_t cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsGLRegisterBuffer(resource, buffer, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsGLRegisterBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1146
 *     return _cudaGraphicsGLRegisterBuffer(resource, buffer, flags)
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaVDPAUGetDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaVDPAUGetDevice(int *__pyx_v_device, __pyx_t_4cuda_7ccudart_VdpDevice __pyx_v_vdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *__pyx_v_vdpGetProcAddress) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaVDPAUGetDevice", __pyx_f[0], 1146, 1, __PYX_ERR(0, 1146, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1147
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaVDPAUGetDevice(device, vdpDevice, vdpGetProcAddress)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUGetDevice(__pyx_v_device, __pyx_v_vdpDevice, __pyx_v_vdpGetProcAddress); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1147, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1146
 *     return _cudaGraphicsGLRegisterBuffer(resource, buffer, flags)
 * 
 * cdef cudaError_t cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaVDPAUGetDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaVDPAUGetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1149
 *     return _cudaVDPAUGetDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaVDPAUSetVDPAUDevice(int __pyx_v_device, __pyx_t_4cuda_7ccudart_VdpDevice __pyx_v_vdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *__pyx_v_vdpGetProcAddress) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaVDPAUSetVDPAUDevice", __pyx_f[0], 1149, 1, __PYX_ERR(0, 1149, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1150
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUSetVDPAUDevice(__pyx_v_device, __pyx_v_vdpDevice, __pyx_v_vdpGetProcAddress); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1150, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1149
 *     return _cudaVDPAUGetDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 * cdef cudaError_t cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaVDPAUSetVDPAUDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1152
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsVDPAURegisterVideoSurface(resource, vdpSurface, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterVideoSurface(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_VdpVideoSurface __pyx_v_vdpSurface, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsVDPAURegisterVideoSurface", __pyx_f[0], 1152, 1, __PYX_ERR(0, 1152, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1153
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsVDPAURegisterVideoSurface(resource, vdpSurface, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsVDPAURegisterVideoSurface(__pyx_v_resource, __pyx_v_vdpSurface, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1153, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1152
 *     return _cudaVDPAUSetVDPAUDevice(device, vdpDevice, vdpGetProcAddress)
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsVDPAURegisterVideoSurface(resource, vdpSurface, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsVDPAURegisterVideoSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1155
 *     return _cudaGraphicsVDPAURegisterVideoSurface(resource, vdpSurface, flags)
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsVDPAURegisterOutputSurface(resource, vdpSurface, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterOutputSurface(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_7ccudart_VdpOutputSurface __pyx_v_vdpSurface, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("cudaGraphicsVDPAURegisterOutputSurface", __pyx_f[0], 1155, 1, __PYX_ERR(0, 1155, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1156
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphicsVDPAURegisterOutputSurface(resource, vdpSurface, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsVDPAURegisterOutputSurface(__pyx_v_resource, __pyx_v_vdpSurface, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1156, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1155
 *     return _cudaGraphicsVDPAURegisterVideoSurface(resource, vdpSurface, flags)
 * 
 * cdef cudaError_t cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphicsVDPAURegisterOutputSurface(resource, vdpSurface, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.cudaGraphicsVDPAURegisterOutputSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/ccudart.pyx":1158
 *     return _cudaGraphicsVDPAURegisterOutputSurface(resource, vdpSurface, flags)
 * 
 * cdef cudaError_t getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _getLocalRuntimeVersion(runtimeVersion)
 */

static cudaError_t __pyx_f_4cuda_7ccudart_getLocalRuntimeVersion(int *__pyx_v_runtimeVersion) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("getLocalRuntimeVersion", __pyx_f[0], 1158, 1, __PYX_ERR(0, 1158, __pyx_L1_error));

  /* "cuda/ccudart.pyx":1159
 * 
 * cdef cudaError_t getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _getLocalRuntimeVersion(runtimeVersion)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_f_4cuda_4_lib_7ccudart_7ccudart__getLocalRuntimeVersion(__pyx_v_runtimeVersion); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1159, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/ccudart.pyx":1158
 *     return _cudaGraphicsVDPAURegisterOutputSurface(resource, vdpSurface, flags)
 * 
 * cdef cudaError_t getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _getLocalRuntimeVersion(runtimeVersion)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.ccudart.getLocalRuntimeVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4cuda_7ccudart_m_global = ((struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("cudaDeviceReset", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceReset, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSynchronize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSynchronize, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetLimit", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetLimit, "cudaError_t (enum cudaLimit, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetLimit", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetLimit, "cudaError_t (size_t *, enum cudaLimit)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetTexture1DLinearMaxWidth", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetTexture1DLinearMaxWidth, "cudaError_t (size_t *, struct cudaChannelFormatDesc const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetCacheConfig, "cudaError_t (enum cudaFuncCache *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetStreamPriorityRange", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetStreamPriorityRange, "cudaError_t (int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetCacheConfig, "cudaError_t (enum cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetSharedMemConfig, "cudaError_t (enum cudaSharedMemConfig *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetSharedMemConfig, "cudaError_t (enum cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetByPCIBusId", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetByPCIBusId, "cudaError_t (int *, char const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetPCIBusId", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetPCIBusId, "cudaError_t (char *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcGetEventHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcGetEventHandle, "cudaError_t (cudaIpcEventHandle_t *, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcOpenEventHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcOpenEventHandle, "cudaError_t (cudaEvent_t *, cudaIpcEventHandle_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcGetMemHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcGetMemHandle, "cudaError_t (cudaIpcMemHandle_t *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcOpenMemHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcOpenMemHandle, "cudaError_t (void **, cudaIpcMemHandle_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaIpcCloseMemHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaIpcCloseMemHandle, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceFlushGPUDirectRDMAWrites", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceFlushGPUDirectRDMAWrites, "cudaError_t (enum cudaFlushGPUDirectRDMAWritesTarget, enum cudaFlushGPUDirectRDMAWritesScope)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetLastError", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetLastError, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaPeekAtLastError", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaPeekAtLastError, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetErrorName", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetErrorName, "char const *(cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetErrorString", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetErrorString, "char const *(cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDeviceCount", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDeviceCount, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDeviceProperties", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDeviceProperties, "cudaError_t (struct cudaDeviceProp *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetAttribute, "cudaError_t (int *, enum cudaDeviceAttr, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetDefaultMemPool", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetDefaultMemPool, "cudaError_t (cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetMemPool", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetMemPool, "cudaError_t (int, cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetMemPool", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetMemPool, "cudaError_t (cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetNvSciSyncAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetNvSciSyncAttributes, "cudaError_t (void *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetP2PAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetP2PAttribute, "cudaError_t (int *, enum cudaDeviceP2PAttr, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaChooseDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaChooseDevice, "cudaError_t (int *, struct cudaDeviceProp const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaInitDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaInitDevice, "cudaError_t (int, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSetDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSetDevice, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDevice, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSetDeviceFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSetDeviceFlags, "cudaError_t (unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDeviceFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDeviceFlags, "cudaError_t (unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCreate, "cudaError_t (cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCreateWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCreateWithFlags, "cudaError_t (cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCreateWithPriority", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCreateWithPriority, "cudaError_t (cudaStream_t *, unsigned int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetPriority", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetPriority, "cudaError_t (cudaStream_t, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetFlags, "cudaError_t (cudaStream_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetId", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetId, "cudaError_t (cudaStream_t, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCtxResetPersistingL2Cache", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCtxResetPersistingL2Cache, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamCopyAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamCopyAttributes, "cudaError_t (cudaStream_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetAttribute, "cudaError_t (cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamAttrID, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamSetAttribute, "cudaError_t (cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamAttrID, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamDestroy, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamWaitEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamWaitEvent, "cudaError_t (cudaStream_t, cudaEvent_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamAddCallback", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamAddCallback, "cudaError_t (cudaStream_t, cudaStreamCallback_t, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamSynchronize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamSynchronize, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamQuery", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamQuery, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamAttachMemAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamAttachMemAsync, "cudaError_t (cudaStream_t, void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamBeginCapture", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamBeginCapture, "cudaError_t (cudaStream_t, enum cudaStreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamBeginCaptureToGraph", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamBeginCaptureToGraph, "cudaError_t (cudaStream_t, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, enum cudaStreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaThreadExchangeStreamCaptureMode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaThreadExchangeStreamCaptureMode, "cudaError_t (enum cudaStreamCaptureMode *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamEndCapture", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamEndCapture, "cudaError_t (cudaStream_t, cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamIsCapturing", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamIsCapturing, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetCaptureInfo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamGetCaptureInfo_v3", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamGetCaptureInfo_v3, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, cudaGraphEdgeData const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamUpdateCaptureDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamUpdateCaptureDependencies, "cudaError_t (cudaStream_t, cudaGraphNode_t *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaStreamUpdateCaptureDependencies_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaStreamUpdateCaptureDependencies_v2, "cudaError_t (cudaStream_t, cudaGraphNode_t *, cudaGraphEdgeData const *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventCreate, "cudaError_t (cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventCreateWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventCreateWithFlags, "cudaError_t (cudaEvent_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventRecord", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventRecord, "cudaError_t (cudaEvent_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventRecordWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventRecordWithFlags, "cudaError_t (cudaEvent_t, cudaStream_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventQuery", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventQuery, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventSynchronize", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventSynchronize, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventDestroy, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventElapsedTime", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventElapsedTime, "cudaError_t (float *, cudaEvent_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaImportExternalMemory", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaImportExternalMemory, "cudaError_t (cudaExternalMemory_t *, struct cudaExternalMemoryHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaExternalMemoryGetMappedBuffer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedBuffer, "cudaError_t (void **, cudaExternalMemory_t, struct cudaExternalMemoryBufferDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaExternalMemoryGetMappedMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaExternalMemoryGetMappedMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, cudaExternalMemory_t, struct cudaExternalMemoryMipmappedArrayDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroyExternalMemory", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroyExternalMemory, "cudaError_t (cudaExternalMemory_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaImportExternalSemaphore", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaImportExternalSemaphore, "cudaError_t (cudaExternalSemaphore_t *, struct cudaExternalSemaphoreHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaSignalExternalSemaphoresAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaSignalExternalSemaphoresAsync, "cudaError_t (cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreSignalParams const *, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaWaitExternalSemaphoresAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaWaitExternalSemaphoresAsync, "cudaError_t (cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreWaitParams const *, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroyExternalSemaphore", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroyExternalSemaphore, "cudaError_t (cudaExternalSemaphore_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncSetCacheConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncSetCacheConfig, "cudaError_t (void const *, enum cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncSetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncSetSharedMemConfig, "cudaError_t (void const *, enum cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncGetAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncGetAttributes, "cudaError_t (struct cudaFuncAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFuncSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFuncSetAttribute, "cudaError_t (void const *, enum cudaFuncAttribute, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaLaunchHostFunc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaLaunchHostFunc, "cudaError_t (cudaStream_t, cudaHostFn_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaOccupancyMaxActiveBlocksPerMultiprocessor", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessor, "cudaError_t (int *, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaOccupancyAvailableDynamicSMemPerBlock", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaOccupancyAvailableDynamicSMemPerBlock, "cudaError_t (size_t *, void const *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, "cudaError_t (int *, void const *, int, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocManaged", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocManaged, "cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMalloc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMalloc, "cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocHost", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocHost, "cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocPitch", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocPitch, "cudaError_t (void **, size_t *, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocArray, "cudaError_t (cudaArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFree", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFree, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeHost", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeHost, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeArray, "cudaError_t (cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeMipmappedArray, "cudaError_t (cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostAlloc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostAlloc, "cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostRegister", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostRegister, "cudaError_t (void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostUnregister", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostUnregister, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostGetDevicePointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostGetDevicePointer, "cudaError_t (void **, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaHostGetFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaHostGetFlags, "cudaError_t (unsigned int *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMalloc3D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMalloc3D, "cudaError_t (struct cudaPitchedPtr *, struct cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMalloc3DArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMalloc3DArray, "cudaError_t (cudaArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetMipmappedArrayLevel", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetMipmappedArrayLevel, "cudaError_t (cudaArray_t *, cudaMipmappedArray_const_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3D, "cudaError_t (struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3DPeer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3DPeer, "cudaError_t (struct cudaMemcpy3DPeerParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3DAsync, "cudaError_t (struct cudaMemcpy3DParms const *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy3DPeerAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy3DPeerAsync, "cudaError_t (struct cudaMemcpy3DPeerParms const *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemGetInfo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemGetInfo, "cudaError_t (size_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetInfo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetInfo, "cudaError_t (struct cudaChannelFormatDesc *, struct cudaExtent *, unsigned int *, cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetPlane", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetPlane, "cudaError_t (cudaArray_t *, cudaArray_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetMemoryRequirements", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetMemoryRequirements, "cudaError_t (struct cudaArrayMemoryRequirements *, cudaArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMipmappedArrayGetMemoryRequirements", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetMemoryRequirements, "cudaError_t (struct cudaArrayMemoryRequirements *, cudaMipmappedArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaArrayGetSparseProperties", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaArrayGetSparseProperties, "cudaError_t (struct cudaArraySparseProperties *, cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMipmappedArrayGetSparseProperties", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMipmappedArrayGetSparseProperties, "cudaError_t (struct cudaArraySparseProperties *, cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyPeer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyPeer, "cudaError_t (void *, int, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2D, "cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DToArray, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DFromArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArray, "cudaError_t (void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DArrayToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyAsync, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyPeerAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyPeerAsync, "cudaError_t (void *, int, void const *, int, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DAsync, "cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DToArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DToArrayAsync, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpy2DFromArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpy2DFromArrayAsync, "cudaError_t (void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset, "cudaError_t (void *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset2D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset2D, "cudaError_t (void *, size_t, int, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset3D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset3D, "cudaError_t (struct cudaPitchedPtr, int, struct cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemsetAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemsetAsync, "cudaError_t (void *, int, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset2DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset2DAsync, "cudaError_t (void *, size_t, int, size_t, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemset3DAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemset3DAsync, "cudaError_t (struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPrefetchAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPrefetchAsync, "cudaError_t (void const *, size_t, int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPrefetchAsync_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPrefetchAsync_v2, "cudaError_t (void const *, size_t, struct cudaMemLocation, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemAdvise", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemAdvise, "cudaError_t (void const *, size_t, enum cudaMemoryAdvise, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemAdvise_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemAdvise_v2, "cudaError_t (void const *, size_t, enum cudaMemoryAdvise, struct cudaMemLocation)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemRangeGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemRangeGetAttribute, "cudaError_t (void *, size_t, enum cudaMemRangeAttribute, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemRangeGetAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemRangeGetAttributes, "cudaError_t (void **, size_t *, enum cudaMemRangeAttribute *, size_t, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyToArray, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyFromArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyFromArray, "cudaError_t (void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyArrayToArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyToArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyToArrayAsync, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemcpyFromArrayAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemcpyFromArrayAsync, "cudaError_t (void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocAsync, "cudaError_t (void **, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaFreeAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaFreeAsync, "cudaError_t (void *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolTrimTo", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolTrimTo, "cudaError_t (cudaMemPool_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolSetAttribute, "cudaError_t (cudaMemPool_t, enum cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolGetAttribute, "cudaError_t (cudaMemPool_t, enum cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolSetAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolSetAccess, "cudaError_t (cudaMemPool_t, struct cudaMemAccessDesc const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolGetAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolGetAccess, "cudaError_t (enum cudaMemAccessFlags *, cudaMemPool_t, struct cudaMemLocation *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolCreate, "cudaError_t (cudaMemPool_t *, struct cudaMemPoolProps const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolDestroy, "cudaError_t (cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMallocFromPoolAsync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMallocFromPoolAsync, "cudaError_t (void **, size_t, cudaMemPool_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolExportToShareableHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolExportToShareableHandle, "cudaError_t (void *, cudaMemPool_t, enum cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolImportFromShareableHandle", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolImportFromShareableHandle, "cudaError_t (cudaMemPool_t *, void *, enum cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolExportPointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolExportPointer, "cudaError_t (struct cudaMemPoolPtrExportData *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaMemPoolImportPointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaMemPoolImportPointer, "cudaError_t (void **, cudaMemPool_t, struct cudaMemPoolPtrExportData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaPointerGetAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaPointerGetAttributes, "cudaError_t (struct cudaPointerAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceCanAccessPeer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceCanAccessPeer, "cudaError_t (int *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceEnablePeerAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceEnablePeerAccess, "cudaError_t (int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceDisablePeerAccess", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceDisablePeerAccess, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsUnregisterResource", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsUnregisterResource, "cudaError_t (cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceSetMapFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceSetMapFlags, "cudaError_t (cudaGraphicsResource_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsMapResources", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsMapResources, "cudaError_t (int, cudaGraphicsResource_t *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsUnmapResources", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsUnmapResources, "cudaError_t (int, cudaGraphicsResource_t *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceGetMappedPointer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedPointer, "cudaError_t (void **, size_t *, cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsSubResourceGetMappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsSubResourceGetMappedArray, "cudaError_t (cudaArray_t *, cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceGetMappedMipmappedArray", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetChannelDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetChannelDesc, "cudaError_t (struct cudaChannelFormatDesc *, cudaArray_const_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCreateChannelDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCreateChannelDesc, "struct cudaChannelFormatDesc (int, int, int, int, enum cudaChannelFormatKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCreateTextureObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCreateTextureObject, "cudaError_t (cudaTextureObject_t *, struct cudaResourceDesc const *, struct cudaTextureDesc const *, struct cudaResourceViewDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroyTextureObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroyTextureObject, "cudaError_t (cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetTextureObjectResourceDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceDesc, "cudaError_t (struct cudaResourceDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetTextureObjectTextureDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetTextureObjectTextureDesc, "cudaError_t (struct cudaTextureDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetTextureObjectResourceViewDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetTextureObjectResourceViewDesc, "cudaError_t (struct cudaResourceViewDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaCreateSurfaceObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaCreateSurfaceObject, "cudaError_t (cudaSurfaceObject_t *, struct cudaResourceDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDestroySurfaceObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDestroySurfaceObject, "cudaError_t (cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetSurfaceObjectResourceDesc", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetSurfaceObjectResourceDesc, "cudaError_t (struct cudaResourceDesc *, cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDriverGetVersion", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDriverGetVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaRuntimeGetVersion", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaRuntimeGetVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphCreate, "cudaError_t (cudaGraph_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddKernelNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddKernelNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaKernelNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeCopyAttributes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeCopyAttributes, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeGetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeGetAttribute, "cudaError_t (cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphKernelNodeSetAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphKernelNodeSetAttribute, "cudaError_t (cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemcpyNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemcpyNode1D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemcpyNode1D, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemcpyNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemcpy3DParms *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemcpyNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemcpyNodeSetParams1D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemcpyNodeSetParams1D, "cudaError_t (cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemsetNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemsetNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemsetNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemsetParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemsetNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemsetNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddHostNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddHostNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphHostNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphHostNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaHostNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphHostNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphHostNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddChildGraphNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddChildGraphNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphChildGraphNodeGetGraph", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphChildGraphNodeGetGraph, "cudaError_t (cudaGraphNode_t, cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddEmptyNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddEmptyNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddEventRecordNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddEventRecordNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventRecordNodeGetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeGetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventRecordNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventRecordNodeSetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddEventWaitNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddEventWaitNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventWaitNodeGetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeGetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphEventWaitNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphEventWaitNodeSetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddExternalSemaphoresSignalNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresSignalNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresSignalNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresSignalNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresSignalNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddExternalSemaphoresWaitNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddExternalSemaphoresWaitNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresWaitNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExternalSemaphoresWaitNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExternalSemaphoresWaitNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemAllocNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemAllocNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemAllocNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemAllocNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddMemFreeNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddMemFreeNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphMemFreeNodeGetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphMemFreeNodeGetParams, "cudaError_t (cudaGraphNode_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGraphMemTrim", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGraphMemTrim, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceGetGraphMemAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceGetGraphMemAttribute, "cudaError_t (int, enum cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaDeviceSetGraphMemAttribute", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaDeviceSetGraphMemAttribute, "cudaError_t (int, enum cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphClone", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphClone, "cudaError_t (cudaGraph_t *, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeFindInClone", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeFindInClone, "cudaError_t (cudaGraphNode_t *, cudaGraphNode_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetType", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetType, "cudaError_t (cudaGraphNode_t, enum cudaGraphNodeType *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphGetNodes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphGetNodes, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphGetRootNodes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphGetRootNodes, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphGetEdges", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphGetEdges, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphGetEdges_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphGetEdges_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependencies, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetDependencies_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependencies_v2, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetDependentNodes", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependentNodes, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetDependentNodes_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetDependentNodes_v2, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddDependencies, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddDependencies_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddDependencies_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphRemoveDependencies", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphRemoveDependencies, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphRemoveDependencies_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphRemoveDependencies_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphDestroyNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphDestroyNode, "cudaError_t (cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphInstantiate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphInstantiate, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphInstantiateWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphInstantiateWithFlags, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphInstantiateWithParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphInstantiateWithParams, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, cudaGraphInstantiateParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecGetFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecGetFlags, "cudaError_t (cudaGraphExec_t, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecKernelNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecKernelNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecMemcpyNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecMemcpyNodeSetParams1D", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecMemcpyNodeSetParams1D, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecMemsetNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecMemsetNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecHostNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecHostNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecChildGraphNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecChildGraphNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecEventRecordNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecEventRecordNodeSetEvent, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecEventWaitNodeSetEvent", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecEventWaitNodeSetEvent, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecExternalSemaphoresSignalNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresSignalNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecExternalSemaphoresWaitNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecExternalSemaphoresWaitNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeSetEnabled", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeSetEnabled, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeGetEnabled", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeGetEnabled, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecUpdate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecUpdate, "cudaError_t (cudaGraphExec_t, cudaGraph_t, cudaGraphExecUpdateResultInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphUpload", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphUpload, "cudaError_t (cudaGraphExec_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphLaunch", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphLaunch, "cudaError_t (cudaGraphExec_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecDestroy, "cudaError_t (cudaGraphExec_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphDestroy", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphDestroy, "cudaError_t (cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphDebugDotPrint", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphDebugDotPrint, "cudaError_t (cudaGraph_t, char const *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaUserObjectCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaUserObjectCreate, "cudaError_t (cudaUserObject_t *, void *, cudaHostFn_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaUserObjectRetain", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaUserObjectRetain, "cudaError_t (cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaUserObjectRelease", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaUserObjectRelease, "cudaError_t (cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphRetainUserObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphRetainUserObject, "cudaError_t (cudaGraph_t, cudaUserObject_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphReleaseUserObject", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphReleaseUserObject, "cudaError_t (cudaGraph_t, cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddNode", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphAddNode_v2", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphAddNode_v2, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphExecNodeSetParams", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphExecNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphConditionalHandleCreate", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphConditionalHandleCreate, "cudaError_t (cudaGraphConditionalHandle *, cudaGraph_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetDriverEntryPoint", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetDriverEntryPoint, "cudaError_t (char const *, void **, unsigned PY_LONG_LONG, enum cudaDriverEntryPointQueryResult *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetExportTable", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetExportTable, "cudaError_t (void const **, cudaUUID_t const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGetKernel", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGetKernel, "cudaError_t (cudaKernel_t *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_cudaPitchedPtr", (void (*)(void))__pyx_f_4cuda_7ccudart_make_cudaPitchedPtr, "struct cudaPitchedPtr (void *, size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_cudaPos", (void (*)(void))__pyx_f_4cuda_7ccudart_make_cudaPos, "struct cudaPos (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_cudaExtent", (void (*)(void))__pyx_f_4cuda_7ccudart_make_cudaExtent, "struct cudaExtent (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsEGLRegisterImage", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsEGLRegisterImage, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_EGLImageKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerConnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerConnectWithFlags", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerConnectWithFlags, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerDisconnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerDisconnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerAcquireFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerAcquireFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, cudaGraphicsResource_t *, cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamConsumerReleaseFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamConsumerReleaseFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, cudaGraphicsResource_t, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerConnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerConnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, __pyx_t_4cuda_7ccudart_EGLint, __pyx_t_4cuda_7ccudart_EGLint)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerDisconnect", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerDisconnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerPresentFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerPresentFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEGLStreamProducerReturnFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEGLStreamProducerReturnFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame *, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsResourceGetMappedEglFrame", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsResourceGetMappedEglFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglFrame *, cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaEventCreateFromEGLSync", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaEventCreateFromEGLSync, "cudaError_t (cudaEvent_t *, __pyx_t_4cuda_7ccudart_EGLSyncKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaProfilerStart", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaProfilerStart, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaProfilerStop", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaProfilerStop, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGLGetDevices", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGLGetDevices, "cudaError_t (unsigned int *, int *, unsigned int, enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsGLRegisterImage", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterImage, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, __pyx_t_4cuda_7ccudart_GLenum, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsGLRegisterBuffer", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsGLRegisterBuffer, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaVDPAUGetDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaVDPAUGetDevice, "cudaError_t (int *, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaVDPAUSetVDPAUDevice", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaVDPAUSetVDPAUDevice, "cudaError_t (int, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsVDPAURegisterVideoSurface", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterVideoSurface, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpVideoSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cudaGraphicsVDPAURegisterOutputSurface", (void (*)(void))__pyx_f_4cuda_7ccudart_cudaGraphicsVDPAURegisterOutputSurface, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpOutputSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("getLocalRuntimeVersion", (void (*)(void))__pyx_f_4cuda_7ccudart_getLocalRuntimeVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cuda._lib.ccudart.utils"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda._lib.ccudart.utils", "cudaPythonGlobal", sizeof(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_vtabptr_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal = (struct __pyx_vtabstruct_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal*)__Pyx_GetVtable(__pyx_ptype_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal); if (unlikely(!__pyx_vtabptr_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cuda._lib.ccudart.ccudart"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreate, "cudaError_t (cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreate, "cudaError_t (cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventQuery", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventQuery, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaCreateChannelDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateChannelDesc, "struct cudaChannelFormatDesc (int, int, int, int, enum cudaChannelFormatKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDriverGetVersion", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDriverGetVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaRuntimeGetVersion", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaRuntimeGetVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetTexture1DLinearMaxWidth", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetTexture1DLinearMaxWidth, "cudaError_t (size_t *, struct cudaChannelFormatDesc const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMallocHost", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocHost, "cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMallocPitch", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocPitch, "cudaError_t (void **, size_t *, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMallocMipmappedArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy2D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2D, "cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy2DAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DAsync, "cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyAsync, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddMemcpyNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddMemcpyNode1D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemcpyNode1D, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphMemcpyNodeSetParams1D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams1D, "cudaError_t (cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecMemcpyNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecMemcpyNodeSetParams1D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemcpyNodeSetParams1D, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetDriverEntryPoint", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDriverEntryPoint, "cudaError_t (char const *, void **, unsigned PY_LONG_LONG, enum cudaDriverEntryPointQueryResult *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddMemsetNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemsetNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecMemsetNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecMemsetNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphMemcpyNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphMemcpyNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemcpyNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemcpy3DParms *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFuncGetAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncGetAttributes, "cudaError_t (struct cudaFuncAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMallocArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocArray, "cudaError_t (cudaArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMalloc3D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3D, "cudaError_t (struct cudaPitchedPtr *, struct cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMalloc3DArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc3DArray, "cudaError_t (cudaArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetErrorString", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetErrorString, "char const *(cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamAddCallback", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAddCallback, "cudaError_t (cudaStream_t, cudaStreamCallback_t, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamGetCaptureInfo_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v2, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaImportExternalSemaphore", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalSemaphore, "cudaError_t (cudaExternalSemaphore_t *, struct cudaExternalSemaphoreHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaSignalExternalSemaphoresAsync_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSignalExternalSemaphoresAsync_v2, "cudaError_t (cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreSignalParams const *, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaWaitExternalSemaphoresAsync_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaWaitExternalSemaphoresAsync_v2, "cudaError_t (cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreWaitParams const *, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaArrayGetInfo", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetInfo, "cudaError_t (struct cudaChannelFormatDesc *, struct cudaExtent *, unsigned int *, cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy2DToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArray, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy2DFromArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArray, "cudaError_t (void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy2DArrayToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy2DToArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DToArrayAsync, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy2DFromArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy2DFromArrayAsync, "cudaError_t (void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemset3D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3D, "cudaError_t (struct cudaPitchedPtr, int, struct cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemset3DAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset3DAsync, "cudaError_t (struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArray, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyFromArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArray, "cudaError_t (void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyToArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyToArrayAsync, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyFromArrayAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyFromArrayAsync, "cudaError_t (void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaPointerGetAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPointerGetAttributes, "cudaError_t (struct cudaPointerAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetDeviceFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceFlags, "cudaError_t (unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy3D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3D, "cudaError_t (struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy3DAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DAsync, "cudaError_t (struct cudaMemcpy3DParms const *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolSetAccess", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAccess, "cudaError_t (cudaMemPool_t, struct cudaMemAccessDesc const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceReset", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceReset, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetLastError", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetLastError, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaPeekAtLastError", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaPeekAtLastError, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDevice, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaSetDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDevice, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetDeviceProperties_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceProperties_v2, "cudaError_t (struct cudaDeviceProp *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaChooseDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaChooseDevice, "cudaError_t (int *, struct cudaDeviceProp const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyArrayToArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetChannelDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetChannelDesc, "cudaError_t (struct cudaChannelFormatDesc *, cudaArray_const_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaCreateTextureObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateTextureObject, "cudaError_t (cudaTextureObject_t *, struct cudaResourceDesc const *, struct cudaTextureDesc const *, struct cudaResourceViewDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetTextureObjectTextureDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectTextureDesc, "cudaError_t (struct cudaTextureDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetTextureObjectResourceViewDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceViewDesc, "cudaError_t (struct cudaResourceViewDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetExportTable", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetExportTable, "cudaError_t (void const **, cudaUUID_t const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy3DPeer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeer, "cudaError_t (struct cudaMemcpy3DPeerParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpy3DPeerAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpy3DPeerAsync, "cudaError_t (struct cudaMemcpy3DPeerParms const *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_make_cudaPitchedPtr", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPitchedPtr, "struct cudaPitchedPtr (void *, size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_make_cudaPos", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaPos, "struct cudaPos (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_make_cudaExtent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__make_cudaExtent, "struct cudaExtent (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaSetDeviceFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaSetDeviceFlags, "cudaError_t (unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddMemAllocNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemAllocNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphMemAllocNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemAllocNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphMemFreeNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemFreeNodeGetParams, "cudaError_t (cudaGraphNode_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemAdvise", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise, "cudaError_t (void const *, size_t, enum cudaMemoryAdvise, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemRangeGetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttribute, "cudaError_t (void *, size_t, enum cudaMemRangeAttribute, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemRangeGetAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemRangeGetAttributes, "cudaError_t (void **, size_t *, enum cudaMemRangeAttribute *, size_t, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetDeviceCount", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetDeviceCount, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetAttribute, "cudaError_t (int *, enum cudaDeviceAttr, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceSetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetSharedMemConfig, "cudaError_t (enum cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetByPCIBusId", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetByPCIBusId, "cudaError_t (int *, char const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetPCIBusId", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetPCIBusId, "cudaError_t (char *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetP2PAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetP2PAttribute, "cudaError_t (int *, enum cudaDeviceP2PAttr, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaArrayGetSparseProperties", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetSparseProperties, "cudaError_t (struct cudaArraySparseProperties *, cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMipmappedArrayGetSparseProperties", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetSparseProperties, "cudaError_t (struct cudaArraySparseProperties *, cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceCanAccessPeer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceCanAccessPeer, "cudaError_t (int *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyPeer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeer, "cudaError_t (void *, int, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemcpyPeerAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemcpyPeerAsync, "cudaError_t (void *, int, void const *, int, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceEnablePeerAccess", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceEnablePeerAccess, "cudaError_t (int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceDisablePeerAccess", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceDisablePeerAccess, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaExternalMemoryGetMappedMipmappedArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, cudaExternalMemory_t, struct cudaExternalMemoryMipmappedArrayDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetSurfaceObjectResourceDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetSurfaceObjectResourceDesc, "cudaError_t (struct cudaResourceDesc *, cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphKernelNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaKernelNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaExternalMemoryGetMappedBuffer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaExternalMemoryGetMappedBuffer, "cudaError_t (void **, cudaExternalMemory_t, struct cudaExternalMemoryBufferDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaImportExternalMemory", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaImportExternalMemory, "cudaError_t (cudaExternalMemory_t *, struct cudaExternalMemoryHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaCreateSurfaceObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCreateSurfaceObject, "cudaError_t (cudaSurfaceObject_t *, struct cudaResourceDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetTextureObjectResourceDesc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetTextureObjectResourceDesc, "cudaError_t (struct cudaResourceDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsEGLRegisterImage", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsEGLRegisterImage, "cudaError_t (cudaGraphicsResource_t *, __pyx_t_4cuda_7ccudart_EGLImageKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamProducerPresentFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerPresentFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamProducerReturnFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerReturnFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_cudaEglFrame *, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsResourceGetMappedEglFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedEglFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglFrame *, cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaVDPAUSetVDPAUDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUSetVDPAUDevice, "cudaError_t (int, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaArrayGetMemoryRequirements", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetMemoryRequirements, "cudaError_t (struct cudaArrayMemoryRequirements *, cudaArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMipmappedArrayGetMemoryRequirements", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMipmappedArrayGetMemoryRequirements, "cudaError_t (struct cudaArrayMemoryRequirements *, cudaMipmappedArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamGetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetAttribute, "cudaError_t (cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamAttrID, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamSetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamSetAttribute, "cudaError_t (cudaStream_t, __pyx_t_4cuda_7ccudart_cudaStreamAttrID, __pyx_t_4cuda_7ccudart_cudaStreamAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphKernelNodeGetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeGetAttribute, "cudaError_t (cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphKernelNodeSetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeSetAttribute, "cudaError_t (cudaGraphNode_t, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrID, __pyx_t_4cuda_7ccudart_cudaKernelNodeAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaVDPAUGetDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaVDPAUGetDevice, "cudaError_t (int *, __pyx_t_4cuda_7ccudart_VdpDevice, __pyx_t_4cuda_7ccudart_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsVDPAURegisterVideoSurface", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsVDPAURegisterVideoSurface, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpVideoSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsVDPAURegisterOutputSurface", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsVDPAURegisterOutputSurface, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_VdpOutputSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGLGetDevices", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGLGetDevices, "cudaError_t (unsigned int *, int *, unsigned int, enum __pyx_t_4cuda_7ccudart_cudaGLDeviceList)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsGLRegisterImage", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsGLRegisterImage, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, __pyx_t_4cuda_7ccudart_GLenum, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsGLRegisterBuffer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsGLRegisterBuffer, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_7ccudart_GLuint, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceSynchronize", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSynchronize, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceSetLimit", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetLimit, "cudaError_t (enum cudaLimit, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetLimit", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetLimit, "cudaError_t (size_t *, enum cudaLimit)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetCacheConfig", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetCacheConfig, "cudaError_t (enum cudaFuncCache *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetStreamPriorityRange", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetStreamPriorityRange, "cudaError_t (int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceSetCacheConfig", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetCacheConfig, "cudaError_t (enum cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetSharedMemConfig, "cudaError_t (enum cudaSharedMemConfig *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaIpcGetEventHandle", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcGetEventHandle, "cudaError_t (cudaIpcEventHandle_t *, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaIpcOpenEventHandle", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcOpenEventHandle, "cudaError_t (cudaEvent_t *, cudaIpcEventHandle_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaIpcGetMemHandle", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcGetMemHandle, "cudaError_t (cudaIpcMemHandle_t *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaIpcOpenMemHandle", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcOpenMemHandle, "cudaError_t (void **, cudaIpcMemHandle_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaIpcCloseMemHandle", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaIpcCloseMemHandle, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceFlushGPUDirectRDMAWrites", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceFlushGPUDirectRDMAWrites, "cudaError_t (enum cudaFlushGPUDirectRDMAWritesTarget, enum cudaFlushGPUDirectRDMAWritesScope)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetDefaultMemPool", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetDefaultMemPool, "cudaError_t (cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceSetMemPool", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetMemPool, "cudaError_t (int, cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetMemPool", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetMemPool, "cudaError_t (cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetNvSciSyncAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetNvSciSyncAttributes, "cudaError_t (void *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamCreateWithFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreateWithFlags, "cudaError_t (cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamCreateWithPriority", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCreateWithPriority, "cudaError_t (cudaStream_t *, unsigned int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamGetPriority", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetPriority, "cudaError_t (cudaStream_t, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamGetFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetFlags, "cudaError_t (cudaStream_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaCtxResetPersistingL2Cache", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaCtxResetPersistingL2Cache, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamCopyAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamCopyAttributes, "cudaError_t (cudaStream_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamDestroy", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamDestroy, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamWaitEvent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamWaitEvent, "cudaError_t (cudaStream_t, cudaEvent_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamSynchronize", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamSynchronize, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamQuery", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamQuery, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamAttachMemAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamAttachMemAsync, "cudaError_t (cudaStream_t, void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamBeginCapture", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamBeginCapture, "cudaError_t (cudaStream_t, enum cudaStreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamBeginCaptureToGraph", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamBeginCaptureToGraph, "cudaError_t (cudaStream_t, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, enum cudaStreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaThreadExchangeStreamCaptureMode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaThreadExchangeStreamCaptureMode, "cudaError_t (enum cudaStreamCaptureMode *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamEndCapture", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamEndCapture, "cudaError_t (cudaStream_t, cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamIsCapturing", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamIsCapturing, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamUpdateCaptureDependencies", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamUpdateCaptureDependencies, "cudaError_t (cudaStream_t, cudaGraphNode_t *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventCreateWithFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreateWithFlags, "cudaError_t (cudaEvent_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventRecord", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventRecord, "cudaError_t (cudaEvent_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventRecordWithFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventRecordWithFlags, "cudaError_t (cudaEvent_t, cudaStream_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventSynchronize", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventSynchronize, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventDestroy", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventDestroy, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventElapsedTime", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventElapsedTime, "cudaError_t (float *, cudaEvent_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDestroyExternalMemory", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyExternalMemory, "cudaError_t (cudaExternalMemory_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDestroyExternalSemaphore", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyExternalSemaphore, "cudaError_t (cudaExternalSemaphore_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFuncSetCacheConfig", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetCacheConfig, "cudaError_t (void const *, enum cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFuncSetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetSharedMemConfig, "cudaError_t (void const *, enum cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFuncSetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFuncSetAttribute, "cudaError_t (void const *, enum cudaFuncAttribute, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaLaunchHostFunc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaLaunchHostFunc, "cudaError_t (cudaStream_t, cudaHostFn_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaOccupancyMaxActiveBlocksPerMultiprocessor", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyMaxActiveBlocksPerMultiprocessor, "cudaError_t (int *, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaOccupancyAvailableDynamicSMemPerBlock", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyAvailableDynamicSMemPerBlock, "cudaError_t (size_t *, void const *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, "cudaError_t (int *, void const *, int, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMallocManaged", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocManaged, "cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMalloc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMalloc, "cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFree", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFree, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFreeHost", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeHost, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFreeArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeArray, "cudaError_t (cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFreeMipmappedArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeMipmappedArray, "cudaError_t (cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaHostAlloc", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostAlloc, "cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaHostRegister", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostRegister, "cudaError_t (void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaHostUnregister", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostUnregister, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaHostGetDevicePointer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostGetDevicePointer, "cudaError_t (void **, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaHostGetFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaHostGetFlags, "cudaError_t (unsigned int *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetMipmappedArrayLevel", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetMipmappedArrayLevel, "cudaError_t (cudaArray_t *, cudaMipmappedArray_const_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemGetInfo", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemGetInfo, "cudaError_t (size_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaArrayGetPlane", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaArrayGetPlane, "cudaError_t (cudaArray_t *, cudaArray_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemset", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset, "cudaError_t (void *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemset2D", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset2D, "cudaError_t (void *, size_t, int, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemsetAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemsetAsync, "cudaError_t (void *, int, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemset2DAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemset2DAsync, "cudaError_t (void *, size_t, int, size_t, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPrefetchAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPrefetchAsync, "cudaError_t (void const *, size_t, int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMallocAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocAsync, "cudaError_t (void **, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaFreeAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaFreeAsync, "cudaError_t (void *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolTrimTo", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolTrimTo, "cudaError_t (cudaMemPool_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolSetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolSetAttribute, "cudaError_t (cudaMemPool_t, enum cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolGetAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolGetAttribute, "cudaError_t (cudaMemPool_t, enum cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolGetAccess", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolGetAccess, "cudaError_t (enum cudaMemAccessFlags *, cudaMemPool_t, struct cudaMemLocation *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolCreate, "cudaError_t (cudaMemPool_t *, struct cudaMemPoolProps const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolDestroy", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolDestroy, "cudaError_t (cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMallocFromPoolAsync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMallocFromPoolAsync, "cudaError_t (void **, size_t, cudaMemPool_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolExportToShareableHandle", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolExportToShareableHandle, "cudaError_t (void *, cudaMemPool_t, enum cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolImportFromShareableHandle", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolImportFromShareableHandle, "cudaError_t (cudaMemPool_t *, void *, enum cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolExportPointer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolExportPointer, "cudaError_t (struct cudaMemPoolPtrExportData *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPoolImportPointer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPoolImportPointer, "cudaError_t (void **, cudaMemPool_t, struct cudaMemPoolPtrExportData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsUnregisterResource", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsUnregisterResource, "cudaError_t (cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsResourceSetMapFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceSetMapFlags, "cudaError_t (cudaGraphicsResource_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsMapResources", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsMapResources, "cudaError_t (int, cudaGraphicsResource_t *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsUnmapResources", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsUnmapResources, "cudaError_t (int, cudaGraphicsResource_t *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsResourceGetMappedPointer", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedPointer, "cudaError_t (void **, size_t *, cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsSubResourceGetMappedArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsSubResourceGetMappedArray, "cudaError_t (cudaArray_t *, cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphicsResourceGetMappedMipmappedArray", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphicsResourceGetMappedMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDestroyTextureObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroyTextureObject, "cudaError_t (cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDestroySurfaceObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDestroySurfaceObject, "cudaError_t (cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphCreate, "cudaError_t (cudaGraph_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddKernelNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddKernelNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphKernelNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphKernelNodeCopyAttributes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphKernelNodeCopyAttributes, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphMemsetNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemsetNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemsetParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphMemsetNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphMemsetNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddHostNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddHostNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphHostNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphHostNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaHostNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphHostNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphHostNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddChildGraphNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddChildGraphNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphChildGraphNodeGetGraph", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphChildGraphNodeGetGraph, "cudaError_t (cudaGraphNode_t, cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddEmptyNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEmptyNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddEventRecordNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEventRecordNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphEventRecordNodeGetEvent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventRecordNodeGetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphEventRecordNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventRecordNodeSetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddEventWaitNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddEventWaitNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphEventWaitNodeGetEvent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventWaitNodeGetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphEventWaitNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphEventWaitNodeSetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddExternalSemaphoresSignalNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddExternalSemaphoresSignalNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExternalSemaphoresSignalNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresSignalNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExternalSemaphoresSignalNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresSignalNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddExternalSemaphoresWaitNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddExternalSemaphoresWaitNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExternalSemaphoresWaitNodeGetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresWaitNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExternalSemaphoresWaitNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExternalSemaphoresWaitNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddMemFreeNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddMemFreeNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGraphMemTrim", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGraphMemTrim, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceGetGraphMemAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceGetGraphMemAttribute, "cudaError_t (int, enum cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaDeviceSetGraphMemAttribute", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaDeviceSetGraphMemAttribute, "cudaError_t (int, enum cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphClone", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphClone, "cudaError_t (cudaGraph_t *, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeFindInClone", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeFindInClone, "cudaError_t (cudaGraphNode_t *, cudaGraphNode_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeGetType", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetType, "cudaError_t (cudaGraphNode_t, enum cudaGraphNodeType *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphGetNodes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetNodes, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphGetRootNodes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetRootNodes, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphGetEdges", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetEdges, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeGetDependencies", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependencies, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeGetDependentNodes", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependentNodes, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddDependencies", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddDependencies, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphRemoveDependencies", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRemoveDependencies, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphDestroyNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDestroyNode, "cudaError_t (cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphInstantiate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiate, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphInstantiateWithFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiateWithFlags, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecKernelNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecKernelNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecHostNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecHostNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecChildGraphNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecChildGraphNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecEventRecordNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecEventRecordNodeSetEvent, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecEventWaitNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecEventWaitNodeSetEvent, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecExternalSemaphoresSignalNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecExternalSemaphoresSignalNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecExternalSemaphoresWaitNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecExternalSemaphoresWaitNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeSetEnabled", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeSetEnabled, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeGetEnabled", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetEnabled, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecUpdate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecUpdate, "cudaError_t (cudaGraphExec_t, cudaGraph_t, cudaGraphExecUpdateResultInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphUpload", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphUpload, "cudaError_t (cudaGraphExec_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphLaunch", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphLaunch, "cudaError_t (cudaGraphExec_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecDestroy", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecDestroy, "cudaError_t (cudaGraphExec_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphDestroy", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDestroy, "cudaError_t (cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphDebugDotPrint", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphDebugDotPrint, "cudaError_t (cudaGraph_t, char const *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaUserObjectCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectCreate, "cudaError_t (cudaUserObject_t *, void *, cudaHostFn_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaUserObjectRetain", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectRetain, "cudaError_t (cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaUserObjectRelease", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaUserObjectRelease, "cudaError_t (cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphRetainUserObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRetainUserObject, "cudaError_t (cudaGraph_t, cudaUserObject_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphReleaseUserObject", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphReleaseUserObject, "cudaError_t (cudaGraph_t, cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaProfilerStart", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerStart, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaProfilerStop", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaProfilerStop, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamConsumerConnect", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerConnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamConsumerConnectWithFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerConnectWithFlags, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamConsumerDisconnect", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerDisconnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamConsumerAcquireFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerAcquireFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, cudaGraphicsResource_t *, cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamConsumerReleaseFrame", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamConsumerReleaseFrame, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, cudaGraphicsResource_t, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamProducerConnect", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerConnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *, __pyx_t_4cuda_7ccudart_EGLStreamKHR, __pyx_t_4cuda_7ccudart_EGLint, __pyx_t_4cuda_7ccudart_EGLint)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEGLStreamProducerDisconnect", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEGLStreamProducerDisconnect, "cudaError_t (__pyx_t_4cuda_7ccudart_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaEventCreateFromEGLSync", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaEventCreateFromEGLSync, "cudaError_t (cudaEvent_t *, __pyx_t_4cuda_7ccudart_EGLSyncKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaInitDevice", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaInitDevice, "cudaError_t (int, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamGetId", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetId, "cudaError_t (cudaStream_t, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphInstantiateWithParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphInstantiateWithParams, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, cudaGraphInstantiateParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecGetFlags", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecGetFlags, "cudaError_t (cudaGraphExec_t, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGetKernel", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGetKernel, "cudaError_t (cudaKernel_t *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddNode", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphExecNodeSetParams", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphExecNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemPrefetchAsync_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemPrefetchAsync_v2, "cudaError_t (void const *, size_t, struct cudaMemLocation, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaMemAdvise_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaMemAdvise_v2, "cudaError_t (void const *, size_t, enum cudaMemoryAdvise, struct cudaMemLocation)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphConditionalHandleCreate", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphConditionalHandleCreate, "cudaError_t (cudaGraphConditionalHandle *, cudaGraph_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamGetCaptureInfo_v3", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamGetCaptureInfo_v3, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, cudaGraphEdgeData const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaStreamUpdateCaptureDependencies_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaStreamUpdateCaptureDependencies_v2, "cudaError_t (cudaStream_t, cudaGraphNode_t *, cudaGraphEdgeData const *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphGetEdges_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphGetEdges_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeGetDependencies_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependencies_v2, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphNodeGetDependentNodes_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphNodeGetDependentNodes_v2, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddDependencies_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddDependencies_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphRemoveDependencies_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphRemoveDependencies_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_cudaGraphAddNode_v2", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__cudaGraphAddNode_v2, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "_getLocalRuntimeVersion", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_7ccudart__getLocalRuntimeVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cuda._lib.ccudart.utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_3(__pyx_t_1, "globalGetInstance", (void (**)(void))&__pyx_f_4cuda_4_lib_7ccudart_5utils_globalGetInstance, "struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_ccudart(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_ccudart},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "ccudart",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initccudart(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initccudart(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_ccudart(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_ccudart(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_ccudart(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'ccudart' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ccudart", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to ccudart pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ccudart(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cuda__ccudart) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cuda.ccudart")) {
      if (unlikely((PyDict_SetItemString(modules, "cuda.ccudart", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely((__Pyx_modinit_function_export_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_ccudart(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "cuda/ccudart.pyx":15
 * from libcpp cimport bool
 * 
 * cdef cudaPythonGlobal m_global = globalGetInstance()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_4cuda_4_lib_7ccudart_5utils_globalGetInstance()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF((PyObject *)__pyx_v_4cuda_7ccudart_m_global);
  __Pyx_DECREF_SET(__pyx_v_4cuda_7ccudart_m_global, ((struct __pyx_obj_4cuda_4_lib_7ccudart_5utils_cudaPythonGlobal *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cuda/ccudart.pyx":1
 * # Copyright 2021-2023 NVIDIA Corporation.  All rights reserved.             # <<<<<<<<<<<<<<
 * #
 * # Please refer to the NVIDIA end user license agreement (EULA) associated
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init cuda.ccudart", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cuda.ccudart");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* ErrOccurredWithGIL */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
  int err;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  err = !!PyErr_Occurred();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
  return err;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_3
#define __PYX_HAVE_RT_ImportType_3_0_3
static PyTypeObject *__Pyx_ImportType_3_0_3(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_3 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_3 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_3 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    PyErr_Clear();
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s_);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version() {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
    cobj = PyCapsule_New(tmp.p, sig, 0);
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_3
#define __PYX_HAVE_RT_ImportFunction_3_0_3
static int __Pyx_ImportFunction_3_0_3(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
