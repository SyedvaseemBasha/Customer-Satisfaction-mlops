/* Generated by Cython 3.0.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/cuda.h",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include/cudaProfiler.h",
            "cuda",
            "cuda/_lib/param_packer.h"
        ],
        "extra_compile_args": [
            "-std=c++14",
            "-fpermissive",
            "-Wno-deprecated-declarations",
            "-D _GLIBCXX_ASSERTIONS",
            "-fno-var-tracking-assignments",
            "-O3"
        ],
        "include_dirs": [
            "cuda",
            "cuda/_lib",
            "/opt/python/cp310-cp310/include",
            "/io/cuda-python-build-utils/cuda-headers-amd64-linux/include"
        ],
        "language": "c++",
        "library_dirs": [
            "/opt/python/cp310-cp310/lib/python3.10/site-packages",
            "/opt/python/cp310-cp310/lib"
        ],
        "name": "cuda._lib.utils",
        "sources": [
            "cuda/_lib/utils.pyx",
            "cuda/_lib/param_packer.cpp"
        ]
    },
    "module_name": "cuda._lib.utils"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_3" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030003F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info; // borrowed
        #endif
        PyObject *py_minor_version = NULL;
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11; // we don't yet need to distinguish between versions > 11
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        Py_XDECREF(py_minor_version);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);  // we don't have access to __pyx_empty_bytes here
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__cuda___lib__utils
#define __PYX_HAVE_API__cuda___lib__utils
/* Early includes */
#include <stdint.h>
#include "cuda.h"
#include "cudaProfiler.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <stdlib.h>
#include <stddef.h>
#include "param_packer.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else  // Py < 3.12
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "cuda/_lib/utils.pyx",
  "<stringsource>",
  "cuda/cuda.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */

/* "cuda/ccuda.pxd":2263
 * ctypedef CUGLmap_flags_enum CUGLmap_flags
 * 
 * ctypedef unsigned int GLenum             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLuint
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_GLenum;

/* "cuda/ccuda.pxd":2265
 * ctypedef unsigned int GLenum
 * 
 * ctypedef unsigned int GLuint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_GLuint;

/* "cuda/ccuda.pxd":2277
 * ctypedef void* EGLStreamKHR
 * 
 * ctypedef unsigned int EGLint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_5ccuda_EGLint;

/* "cuda/ccuda.pxd":2284
 * ctypedef void* EGLSyncKHR
 * 
 * ctypedef uint32_t VdpDevice             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long VdpGetProcAddress
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpDevice;

/* "cuda/ccuda.pxd":2286
 * ctypedef uint32_t VdpDevice
 * 
 * ctypedef unsigned long long VdpGetProcAddress             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpVideoSurface
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_5ccuda_VdpGetProcAddress;

/* "cuda/ccuda.pxd":2288
 * ctypedef unsigned long long VdpGetProcAddress
 * 
 * ctypedef uint32_t VdpVideoSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpOutputSurface
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpVideoSurface;

/* "cuda/ccuda.pxd":2290
 * ctypedef uint32_t VdpVideoSurface
 * 
 * ctypedef uint32_t VdpOutputSurface             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuGetErrorString(CUresult error, const char** pStr) except ?CUDA_ERROR_NOT_FOUND nogil
 */
typedef uint32_t __pyx_t_4cuda_5ccuda_VdpOutputSurface;

/* "cuda/_lib/utils.pyx":20
 * cimport cuda._lib.param_packer as param_packer
 * 
 * ctypedef unsigned long long void_ptr             # <<<<<<<<<<<<<<
 * 
 * cdef void* callocWrapper(length, size):
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_4_lib_5utils_void_ptr;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_4cuda_4cuda_CUcontext;
struct __pyx_obj_4cuda_4cuda_CUmodule;
struct __pyx_obj_4cuda_4cuda_CUfunction;
struct __pyx_obj_4cuda_4cuda_CUlibrary;
struct __pyx_obj_4cuda_4cuda_CUkernel;
struct __pyx_obj_4cuda_4cuda_CUarray;
struct __pyx_obj_4cuda_4cuda_CUmipmappedArray;
struct __pyx_obj_4cuda_4cuda_CUtexref;
struct __pyx_obj_4cuda_4cuda_CUsurfref;
struct __pyx_obj_4cuda_4cuda_CUevent;
struct __pyx_obj_4cuda_4cuda_CUstream;
struct __pyx_obj_4cuda_4cuda_CUgraphicsResource;
struct __pyx_obj_4cuda_4cuda_CUexternalMemory;
struct __pyx_obj_4cuda_4cuda_CUexternalSemaphore;
struct __pyx_obj_4cuda_4cuda_CUgraph;
struct __pyx_obj_4cuda_4cuda_CUgraphNode;
struct __pyx_obj_4cuda_4cuda_CUgraphExec;
struct __pyx_obj_4cuda_4cuda_CUmemoryPool;
struct __pyx_obj_4cuda_4cuda_CUuserObject;
struct __pyx_obj_4cuda_4cuda_CUlinkState;
struct __pyx_obj_4cuda_4cuda_CUeglStreamConnection;
struct __pyx_obj_4cuda_4cuda_EGLImageKHR;
struct __pyx_obj_4cuda_4cuda_EGLStreamKHR;
struct __pyx_obj_4cuda_4cuda_EGLSyncKHR;
struct __pyx_obj_4cuda_4cuda_CUhostFn;
struct __pyx_obj_4cuda_4cuda_CUstreamCallback;
struct __pyx_obj_4cuda_4cuda_CUoccupancyB2DSize;
struct __pyx_obj_4cuda_4cuda_CUuuid_st;
struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_st;
struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_st;
struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_st;
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWaitValueParams_st;
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWriteValueParams_st;
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st;
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st;
struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_union;
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st;
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st;
struct __pyx_obj_4cuda_4cuda_CUdevprop_st;
struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_st;
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st;
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st;
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st;
struct __pyx_obj_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData_st;
struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap_st;
struct __pyx_obj_4cuda_4cuda_anon_struct0;
struct __pyx_obj_4cuda_4cuda_anon_struct1;
struct __pyx_obj_4cuda_4cuda_anon_struct2;
struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue_union;
struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute_st;
struct __pyx_obj_4cuda_4cuda_CUlaunchConfig_st;
struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_st;
struct __pyx_obj_4cuda_4cuda_anon_union2;
struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_st;
struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st;
struct __pyx_obj_4cuda_4cuda_anon_struct3;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st;
struct __pyx_obj_4cuda_4cuda_anon_struct4;
struct __pyx_obj_4cuda_4cuda_anon_struct5;
struct __pyx_obj_4cuda_4cuda_anon_struct6;
struct __pyx_obj_4cuda_4cuda_anon_struct7;
struct __pyx_obj_4cuda_4cuda_anon_struct8;
struct __pyx_obj_4cuda_4cuda_anon_union3;
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_st;
struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_st;
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st;
struct __pyx_obj_4cuda_4cuda_CUtensorMap_st;
struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_anon_struct9;
struct __pyx_obj_4cuda_4cuda_anon_union4;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st;
struct __pyx_obj_4cuda_4cuda_anon_struct10;
struct __pyx_obj_4cuda_4cuda_anon_union5;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st;
struct __pyx_obj_4cuda_4cuda_anon_struct11;
struct __pyx_obj_4cuda_4cuda_anon_union6;
struct __pyx_obj_4cuda_4cuda_anon_struct12;
struct __pyx_obj_4cuda_4cuda_anon_struct13;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_anon_struct14;
struct __pyx_obj_4cuda_4cuda_anon_union7;
struct __pyx_obj_4cuda_4cuda_anon_struct15;
struct __pyx_obj_4cuda_4cuda_anon_struct16;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st;
struct __pyx_obj_4cuda_4cuda_anon_union8;
struct __pyx_obj_4cuda_4cuda_anon_struct17;
struct __pyx_obj_4cuda_4cuda_anon_struct18;
struct __pyx_obj_4cuda_4cuda_anon_union9;
struct __pyx_obj_4cuda_4cuda_anon_union10;
struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_st;
struct __pyx_obj_4cuda_4cuda_CUmemLocation_st;
struct __pyx_obj_4cuda_4cuda_anon_struct19;
struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_st;
struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_st;
struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_st;
struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_st;
struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_st;
struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st;
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st;
struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams_st;
struct __pyx_obj_4cuda_4cuda_anon_union12;
struct __pyx_obj_4cuda_4cuda_CUeglFrame_st;
struct __pyx_obj_4cuda_4cuda_CUdeviceptr;
struct __pyx_obj_4cuda_4cuda_CUdevice;
struct __pyx_obj_4cuda_4cuda_CUtexObject;
struct __pyx_obj_4cuda_4cuda_CUsurfObject;
struct __pyx_obj_4cuda_4cuda_CUgraphConditionalHandle;
struct __pyx_obj_4cuda_4cuda_CUuuid;
struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_v1;
struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle;
struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_v1;
struct __pyx_obj_4cuda_4cuda_CUipcEventHandle;
struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_v1;
struct __pyx_obj_4cuda_4cuda_CUipcMemHandle;
struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_v1;
struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams;
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2;
struct __pyx_obj_4cuda_4cuda_CUdevprop_v1;
struct __pyx_obj_4cuda_4cuda_CUdevprop;
struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_v1;
struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow;
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2;
struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData;
struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap;
struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue;
struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute;
struct __pyx_obj_4cuda_4cuda_CUlaunchConfig;
struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue_v1;
struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue;
struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue_v1;
struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue;
struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_v1;
struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount;
struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_v1;
struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam;
struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER;
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS;
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC;
struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC;
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC;
struct __pyx_obj_4cuda_4cuda_CUtensorMap;
struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;
struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2;
struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle;
struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_v1;
struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo;
struct __pyx_obj_4cuda_4cuda_CUmemLocation_v1;
struct __pyx_obj_4cuda_4cuda_CUmemLocation;
struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_v1;
struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp;
struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_v1;
struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp;
struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_v1;
struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc;
struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1;
struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo;
struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_v1;
struct __pyx_obj_4cuda_4cuda_CUmemPoolProps;
struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_v1;
struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData;
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1;
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2;
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS;
struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams;
struct __pyx_obj_4cuda_4cuda_CUeglFrame_v1;
struct __pyx_obj_4cuda_4cuda_CUeglFrame;
struct __pyx_obj_4cuda_4cuda_cuuint32_t;
struct __pyx_obj_4cuda_4cuda_cuuint64_t;
struct __pyx_obj_4cuda_4cuda_CUdeviceptr_v2;
struct __pyx_obj_4cuda_4cuda_CUdevice_v1;
struct __pyx_obj_4cuda_4cuda_CUtexObject_v1;
struct __pyx_obj_4cuda_4cuda_CUsurfObject_v1;
struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle_v1;
struct __pyx_obj_4cuda_4cuda_GLenum;
struct __pyx_obj_4cuda_4cuda_GLuint;
struct __pyx_obj_4cuda_4cuda_EGLint;
struct __pyx_obj_4cuda_4cuda_VdpDevice;
struct __pyx_obj_4cuda_4cuda_VdpGetProcAddress;
struct __pyx_obj_4cuda_4cuda_VdpVideoSurface;
struct __pyx_obj_4cuda_4cuda_VdpOutputSurface;
struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams;
struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType;
struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper;
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings;
union __pyx_t_4cuda_5ccuda_anon_union12;
struct __pyx_t_4cuda_5ccuda_CUeglFrame_st;

/* "cuda/ccuda.pxd":2093
 *     ctypedef CUoutput_mode_enum CUoutput_mode
 * 
 * cdef enum CUeglFrameType_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_FRAME_TYPE_ARRAY = 0
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglFrameType_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_FRAME_TYPE_ARRAY = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_FRAME_TYPE_PITCH = 1
};

/* "cuda/ccuda.pxd":2099
 * ctypedef CUeglFrameType_enum CUeglFrameType
 * 
 * cdef enum CUeglResourceLocationFlags_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_RESOURCE_LOCATION_SYSMEM = 0
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_RESOURCE_LOCATION_SYSMEM = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
};

/* "cuda/ccuda.pxd":2105
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags
 * 
 * cdef enum CUeglColorFormat_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0
 *     CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1
 */
enum __pyx_t_4cuda_5ccuda_CUeglColorFormat_enum {
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_PLANAR = 2,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR = 3,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RGB = 4,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BGR = 5,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_ARGB = 6,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RGBA = 7,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_L = 8,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_R = 9,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_PLANAR = 10,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR = 11,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUYV_422 = 12,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_UYVY_422 = 13,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_ABGR = 14,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BGRA = 15,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_A = 16,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_RG = 17,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_AYUV = 18,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR = 19,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR = 20,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR = 21,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR = 22,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR = 23,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR = 24,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR = 25,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_VYUY_ER = 26,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_UYVY_ER = 27,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUYV_ER = 28,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVYU_ER = 29,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV_ER = 30,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUVA_ER = 31,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_AYUV_ER = 32,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_PLANAR_ER = 33,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_PLANAR_ER = 34,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_ER = 35,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR_ER = 36,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR_ER = 37,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_ER = 38,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_PLANAR_ER = 39,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_PLANAR_ER = 40,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_ER = 41,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR_ER = 42,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR_ER = 43,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_ER = 44,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_RGGB = 45,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_BGGR = 46,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_GRBG = 47,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_GBRG = 48,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_RGGB = 49,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_BGGR = 50,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_GRBG = 51,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_GBRG = 52,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_RGGB = 53,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_BGGR = 54,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_GRBG = 55,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_GBRG = 56,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_RGGB = 57,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_BGGR = 58,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_GRBG = 59,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER14_GBRG = 60,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_RGGB = 61,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_BGGR = 62,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_GRBG = 63,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER20_GBRG = 64,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU444_PLANAR = 65,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU422_PLANAR = 66,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR = 67,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_RGGB = 68,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_BGGR = 69,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_GRBG = 70,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_ISP_GBRG = 71,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_BCCR = 72,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_RCCB = 73,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_CRBC = 74,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER_CBRC = 75,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER10_CCCC = 76,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_BCCR = 77,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_RCCB = 78,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CRBC = 79,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CBRC = 80,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_BAYER12_CCCC = 81,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y = 82,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_2020 = 83,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_2020 = 84,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_2020 = 85,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_2020 = 86,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_709 = 87,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_709 = 88,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_709 = 89,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_709 = 90,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709 = 91,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_2020 = 92,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_2020 = 93,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR = 94,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_709 = 95,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y_ER = 96,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y_709_ER = 97,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10_ER = 98,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10_709_ER = 99,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12_ER = 0x64,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12_709_ER = 0x65,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUVA = 0x66,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YUV = 0x67,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_YVYU = 0x68,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_VYUY = 0x69,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_ER = 0x6A,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709_ER = 0x6B,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_ER = 0x6C,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_709_ER = 0x6D,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_ER = 0x6E,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_709_ER = 0x6F,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_ER = 0x70,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_709_ER = 0x71,
  __pyx_e_4cuda_5ccuda_CU_EGL_COLOR_FORMAT_MAX = 0x72
};

/* "cuda/ccuda.pxd":2249
 * ctypedef CUeglStreamConnection_st* CUeglStreamConnection
 * 
 * cdef enum CUGLDeviceList_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_DEVICE_LIST_ALL = 1
 *     CU_GL_DEVICE_LIST_CURRENT_FRAME = 2
 */
enum __pyx_t_4cuda_5ccuda_CUGLDeviceList_enum {
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_ALL = 1,
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_CURRENT_FRAME = 2,
  __pyx_e_4cuda_5ccuda_CU_GL_DEVICE_LIST_NEXT_FRAME = 3
};

/* "cuda/ccuda.pxd":2256
 * ctypedef CUGLDeviceList_enum CUGLDeviceList
 * 
 * cdef enum CUGLmap_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_MAP_RESOURCE_FLAGS_NONE = 0
 *     CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1
 */
enum __pyx_t_4cuda_5ccuda_CUGLmap_flags_enum {
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_NONE = 0,
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1,
  __pyx_e_4cuda_5ccuda_CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
};

/* "cuda/ccuda.pxd":3150
 * cdef CUresult cuGraphicsVDPAURegisterOutputSurface(CUgraphicsResource* pCudaResource, VdpOutputSurface vdpSurface, unsigned int flags) except ?CUDA_ERROR_NOT_FOUND nogil
 * 
 * cdef enum: CUDA_VERSION = 12030             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_VERSION = 0x2EFE
};

/* "cuda/ccuda.pxd":3152
 * cdef enum: CUDA_VERSION = 12030
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_LEGACY = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_IPC_HANDLE_SIZE = 64
};

/* "cuda/ccuda.pxd":3154
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 * 
 * cdef enum: CU_STREAM_LEGACY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_LEGACY = 1
};

/* "cuda/ccuda.pxd":3156
 * cdef enum: CU_STREAM_LEGACY = 1
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_PER_THREAD = 2
};

/* "cuda/ccuda.pxd":3158
 * cdef enum: CU_STREAM_PER_THREAD = 2
 * 
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_COMPUTE_ACCELERATED_TARGET_BASE = 0x10000
};

/* "cuda/ccuda.pxd":3160
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536
 * 
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_COND_ASSIGN_DEFAULT = 1
};

/* "cuda/ccuda.pxd":3162
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
};

/* "cuda/ccuda.pxd":3164
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
};

/* "cuda/ccuda.pxd":3166
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
};

/* "cuda/ccuda.pxd":3168
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
};

/* "cuda/ccuda.pxd":3170
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
};

/* "cuda/ccuda.pxd":3172
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
};

/* "cuda/ccuda.pxd":3174
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
};

/* "cuda/ccuda.pxd":3176
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
};

/* "cuda/ccuda.pxd":3178
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
};

/* "cuda/ccuda.pxd":3180
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
};

/* "cuda/ccuda.pxd":3182
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
};

/* "cuda/ccuda.pxd":3184
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
};

/* "cuda/ccuda.pxd":3186
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_PRIORITY = 8
};

/* "cuda/ccuda.pxd":3188
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
};

/* "cuda/ccuda.pxd":3190
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
};

/* "cuda/ccuda.pxd":3192
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_PORTABLE = 1
};

/* "cuda/ccuda.pxd":3194
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_DEVICEMAP = 2
};

/* "cuda/ccuda.pxd":3196
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTALLOC_WRITECOMBINED = 4
};

/* "cuda/ccuda.pxd":3198
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_PORTABLE = 1
};

/* "cuda/ccuda.pxd":3200
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_DEVICEMAP = 2
};

/* "cuda/ccuda.pxd":3202
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_IOMEMORY = 4
};

/* "cuda/ccuda.pxd":3204
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEMHOSTREGISTER_READ_ONLY = 8
};

/* "cuda/ccuda.pxd":3206
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
};

/* "cuda/ccuda.pxd":3208
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 * 
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TENSOR_MAP_NUM_QWORDS = 16
};

/* "cuda/ccuda.pxd":3210
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_MEMORY_DEDICATED = 1
};

/* "cuda/ccuda.pxd":3212
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
};

/* "cuda/ccuda.pxd":3214
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
};

/* "cuda/ccuda.pxd":3216
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_NVSCISYNC_ATTR_SIGNAL = 1
};

/* "cuda/ccuda.pxd":3218
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_NVSCISYNC_ATTR_WAIT = 2
};

/* "cuda/ccuda.pxd":3220
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_MEM_CREATE_USAGE_TILE_POOL = 1
};

/* "cuda/ccuda.pxd":3222
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
};

/* "cuda/ccuda.pxd":3224
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
};

/* "cuda/ccuda.pxd":3226
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_LAYERED = 1
};

/* "cuda/ccuda.pxd":3228
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_2DARRAY = 1
};

/* "cuda/ccuda.pxd":3230
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_SURFACE_LDST = 2
};

/* "cuda/ccuda.pxd":3232
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_CUBEMAP = 4
};

/* "cuda/ccuda.pxd":3234
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_TEXTURE_GATHER = 8
};

/* "cuda/ccuda.pxd":3236
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_DEPTH_TEXTURE = 16
};

/* "cuda/ccuda.pxd":3238
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
};

/* "cuda/ccuda.pxd":3240
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_SPARSE = 64
};

/* "cuda/ccuda.pxd":3242
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_ARRAY3D_DEFERRED_MAPPING = 0x80
};

/* "cuda/ccuda.pxd":3244
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSA_OVERRIDE_FORMAT = 1
};

/* "cuda/ccuda.pxd":3246
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_READ_AS_INTEGER = 1
};

/* "cuda/ccuda.pxd":3248
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SRGB = 16
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_NORMALIZED_COORDINATES = 2
};

/* "cuda/ccuda.pxd":3250
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 * 
 * cdef enum: CU_TRSF_SRGB = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_SRGB = 16
};

/* "cuda/ccuda.pxd":3252
 * cdef enum: CU_TRSF_SRGB = 16
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
};

/* "cuda/ccuda.pxd":3254
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_TRSF_SEAMLESS_CUBEMAP = 64
};

/* "cuda/ccuda.pxd":3256
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 * 
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_END_AS_INT = 0
};

/* "cuda/ccuda.pxd":3258
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_END = 0
};

/* "cuda/ccuda.pxd":3260
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
};

/* "cuda/ccuda.pxd":3262
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_POINTER = 1
};

/* "cuda/ccuda.pxd":3264
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
};

/* "cuda/ccuda.pxd":3266
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_LAUNCH_PARAM_BUFFER_SIZE = 2
};

/* "cuda/ccuda.pxd":3268
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_CPU = -1
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_PARAM_TR_DEFAULT = -1L
};

/* "cuda/ccuda.pxd":3270
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 * 
 * cdef enum: CU_DEVICE_CPU = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_INVALID = -2
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_CPU = -1L
};

/* "cuda/ccuda.pxd":3272
 * cdef enum: CU_DEVICE_CPU = -1
 * 
 * cdef enum: CU_DEVICE_INVALID = -2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: MAX_PLANES = 3
 */
enum  {
  __pyx_e_4cuda_5ccuda_CU_DEVICE_INVALID = -2L
};

/* "cuda/ccuda.pxd":3274
 * cdef enum: CU_DEVICE_INVALID = -2
 * 
 * cdef enum: MAX_PLANES = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295
 */
enum  {
  __pyx_e_4cuda_5ccuda_MAX_PLANES = 3
};

/* "cuda/ccuda.pxd":3276
 * cdef enum: MAX_PLANES = 3
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295             # <<<<<<<<<<<<<<
 */
enum  {
  __pyx_e_4cuda_5ccuda_CUDA_EGL_INFINITE_TIMEOUT = 0xFFFFFFFF
};

/* "cuda/ccuda.pxd":2097
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 * 
 * ctypedef CUeglFrameType_enum CUeglFrameType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglResourceLocationFlags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglFrameType_enum __pyx_t_4cuda_5ccuda_CUeglFrameType;

/* "cuda/ccuda.pxd":2103
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 * 
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglColorFormat_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags_enum __pyx_t_4cuda_5ccuda_CUeglResourceLocationFlags;

/* "cuda/ccuda.pxd":2222
 *     CU_EGL_COLOR_FORMAT_MAX = 114
 * 
 * ctypedef CUeglColorFormat_enum CUeglColorFormat             # <<<<<<<<<<<<<<
 * 
 * cdef union anon_union12:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUeglColorFormat_enum __pyx_t_4cuda_5ccuda_CUeglColorFormat;

/* "cuda/ccuda.pxd":2224
 * ctypedef CUeglColorFormat_enum CUeglColorFormat
 * 
 * cdef union anon_union12:             # <<<<<<<<<<<<<<
 *     CUarray pArray[3]
 *     void* pPitch[3]
 */
union __pyx_t_4cuda_5ccuda_anon_union12 {
  CUarray pArray[3];
  void *pPitch[3];
};

/* "cuda/ccuda.pxd":2228
 *     void* pPitch[3]
 * 
 * cdef struct CUeglFrame_st:             # <<<<<<<<<<<<<<
 *     anon_union12 frame
 *     unsigned int width
 */
struct __pyx_t_4cuda_5ccuda_CUeglFrame_st {
  union __pyx_t_4cuda_5ccuda_anon_union12 frame;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int pitch;
  unsigned int planeCount;
  unsigned int numChannels;
  __pyx_t_4cuda_5ccuda_CUeglFrameType frameType;
  __pyx_t_4cuda_5ccuda_CUeglColorFormat eglColorFormat;
  CUarray_format cuFormat;
};

/* "cuda/ccuda.pxd":2240
 *     CUarray_format cuFormat
 * 
 * ctypedef CUeglFrame_st CUeglFrame_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame
 */
typedef struct __pyx_t_4cuda_5ccuda_CUeglFrame_st __pyx_t_4cuda_5ccuda_CUeglFrame_v1;

/* "cuda/ccuda.pxd":2242
 * ctypedef CUeglFrame_st CUeglFrame_v1
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef __pyx_t_4cuda_5ccuda_CUeglFrame_v1 __pyx_t_4cuda_5ccuda_CUeglFrame;

/* "cuda/ccuda.pxd":2247
 *     cdef struct CUeglStreamConnection_st:
 *         pass
 * ctypedef CUeglStreamConnection_st* CUeglStreamConnection             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUGLDeviceList_enum:
 */
typedef struct CUeglStreamConnection_st *__pyx_t_4cuda_5ccuda_CUeglStreamConnection;

/* "cuda/ccuda.pxd":2254
 *     CU_GL_DEVICE_LIST_NEXT_FRAME = 3
 * 
 * ctypedef CUGLDeviceList_enum CUGLDeviceList             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUGLmap_flags_enum:
 */
typedef enum __pyx_t_4cuda_5ccuda_CUGLDeviceList_enum __pyx_t_4cuda_5ccuda_CUGLDeviceList;

/* "cuda/ccuda.pxd":2261
 *     CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
 * 
 * ctypedef CUGLmap_flags_enum CUGLmap_flags             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLenum
 */
typedef enum __pyx_t_4cuda_5ccuda_CUGLmap_flags_enum __pyx_t_4cuda_5ccuda_CUGLmap_flags;

/* "cuda/ccuda.pxd":2270
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLImageKHR             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLImageKHR;

/* "cuda/ccuda.pxd":2275
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLStreamKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int EGLint
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLStreamKHR;

/* "cuda/ccuda.pxd":2282
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLSyncKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpDevice
 */
typedef void *__pyx_t_4cuda_5ccuda_EGLSyncKHR;

/* "cuda/cuda.pxd":11
 * cimport cuda._lib.utils as utils
 * 
 * cdef class CUcontext:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUcontext {
  PyObject_HEAD
  CUcontext _CUcontext__val;
  CUcontext *_ptr;
};


/* "cuda/cuda.pxd":25
 *     cdef ccuda.CUcontext* _ptr
 * 
 * cdef class CUmodule:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUmodule {
  PyObject_HEAD
  CUmodule _CUmodule__val;
  CUmodule *_ptr;
};


/* "cuda/cuda.pxd":39
 *     cdef ccuda.CUmodule* _ptr
 * 
 * cdef class CUfunction:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUfunction {
  PyObject_HEAD
  CUfunction _CUfunction__val;
  CUfunction *_ptr;
};


/* "cuda/cuda.pxd":53
 *     cdef ccuda.CUfunction* _ptr
 * 
 * cdef class CUlibrary:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUlibrary {
  PyObject_HEAD
  CUlibrary _CUlibrary__val;
  CUlibrary *_ptr;
};


/* "cuda/cuda.pxd":67
 *     cdef ccuda.CUlibrary* _ptr
 * 
 * cdef class CUkernel:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUkernel {
  PyObject_HEAD
  CUkernel _CUkernel__val;
  CUkernel *_ptr;
};


/* "cuda/cuda.pxd":81
 *     cdef ccuda.CUkernel* _ptr
 * 
 * cdef class CUarray:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUarray {
  PyObject_HEAD
  CUarray _CUarray__val;
  CUarray *_ptr;
};


/* "cuda/cuda.pxd":95
 *     cdef ccuda.CUarray* _ptr
 * 
 * cdef class CUmipmappedArray:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUmipmappedArray {
  PyObject_HEAD
  CUmipmappedArray _CUmipmappedArray__val;
  CUmipmappedArray *_ptr;
};


/* "cuda/cuda.pxd":109
 *     cdef ccuda.CUmipmappedArray* _ptr
 * 
 * cdef class CUtexref:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUtexref {
  PyObject_HEAD
  CUtexref _CUtexref__val;
  CUtexref *_ptr;
};


/* "cuda/cuda.pxd":123
 *     cdef ccuda.CUtexref* _ptr
 * 
 * cdef class CUsurfref:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUsurfref {
  PyObject_HEAD
  CUsurfref _CUsurfref__val;
  CUsurfref *_ptr;
};


/* "cuda/cuda.pxd":137
 *     cdef ccuda.CUsurfref* _ptr
 * 
 * cdef class CUevent:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUevent {
  PyObject_HEAD
  CUevent _CUevent__val;
  CUevent *_ptr;
};


/* "cuda/cuda.pxd":151
 *     cdef ccuda.CUevent* _ptr
 * 
 * cdef class CUstream:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUstream {
  PyObject_HEAD
  CUstream _CUstream__val;
  CUstream *_ptr;
};


/* "cuda/cuda.pxd":165
 *     cdef ccuda.CUstream* _ptr
 * 
 * cdef class CUgraphicsResource:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUgraphicsResource {
  PyObject_HEAD
  CUgraphicsResource _CUgraphicsResource__val;
  CUgraphicsResource *_ptr;
};


/* "cuda/cuda.pxd":179
 *     cdef ccuda.CUgraphicsResource* _ptr
 * 
 * cdef class CUexternalMemory:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUexternalMemory {
  PyObject_HEAD
  CUexternalMemory _CUexternalMemory__val;
  CUexternalMemory *_ptr;
};


/* "cuda/cuda.pxd":193
 *     cdef ccuda.CUexternalMemory* _ptr
 * 
 * cdef class CUexternalSemaphore:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUexternalSemaphore {
  PyObject_HEAD
  CUexternalSemaphore _CUexternalSemaphore__val;
  CUexternalSemaphore *_ptr;
};


/* "cuda/cuda.pxd":207
 *     cdef ccuda.CUexternalSemaphore* _ptr
 * 
 * cdef class CUgraph:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUgraph {
  PyObject_HEAD
  CUgraph _CUgraph__val;
  CUgraph *_ptr;
};


/* "cuda/cuda.pxd":221
 *     cdef ccuda.CUgraph* _ptr
 * 
 * cdef class CUgraphNode:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUgraphNode {
  PyObject_HEAD
  CUgraphNode _CUgraphNode__val;
  CUgraphNode *_ptr;
};


/* "cuda/cuda.pxd":235
 *     cdef ccuda.CUgraphNode* _ptr
 * 
 * cdef class CUgraphExec:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUgraphExec {
  PyObject_HEAD
  CUgraphExec _CUgraphExec__val;
  CUgraphExec *_ptr;
};


/* "cuda/cuda.pxd":249
 *     cdef ccuda.CUgraphExec* _ptr
 * 
 * cdef class CUmemoryPool:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUmemoryPool {
  PyObject_HEAD
  CUmemoryPool _CUmemoryPool__val;
  CUmemoryPool *_ptr;
};


/* "cuda/cuda.pxd":263
 *     cdef ccuda.CUmemoryPool* _ptr
 * 
 * cdef class CUuserObject:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUuserObject {
  PyObject_HEAD
  CUuserObject _CUuserObject__val;
  CUuserObject *_ptr;
};


/* "cuda/cuda.pxd":277
 *     cdef ccuda.CUuserObject* _ptr
 * 
 * cdef class CUlinkState:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUlinkState {
  PyObject_HEAD
  CUlinkState _CUlinkState__val;
  CUlinkState *_ptr;
  PyObject *_keepalive;
};


/* "cuda/cuda.pxd":290
 *     cdef list _keepalive
 * 
 * cdef class CUeglStreamConnection:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUeglStreamConnection {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_CUeglStreamConnection _CUeglStreamConnection__val;
  __pyx_t_4cuda_5ccuda_CUeglStreamConnection *_ptr;
};


/* "cuda/cuda.pxd":304
 *     cdef ccuda.CUeglStreamConnection* _ptr
 * 
 * cdef class EGLImageKHR:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_EGLImageKHR {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_EGLImageKHR _EGLImageKHR__val;
  __pyx_t_4cuda_5ccuda_EGLImageKHR *_ptr;
};


/* "cuda/cuda.pxd":316
 *     cdef ccuda.EGLImageKHR* _ptr
 * 
 * cdef class EGLStreamKHR:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_EGLStreamKHR {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_EGLStreamKHR _EGLStreamKHR__val;
  __pyx_t_4cuda_5ccuda_EGLStreamKHR *_ptr;
};


/* "cuda/cuda.pxd":328
 *     cdef ccuda.EGLStreamKHR* _ptr
 * 
 * cdef class EGLSyncKHR:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_EGLSyncKHR {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_EGLSyncKHR _EGLSyncKHR__val;
  __pyx_t_4cuda_5ccuda_EGLSyncKHR *_ptr;
};


/* "cuda/cuda.pxd":340
 *     cdef ccuda.EGLSyncKHR* _ptr
 * 
 * cdef class CUhostFn:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUhostFn {
  PyObject_HEAD
  CUhostFn _CUhostFn__val;
  CUhostFn *_ptr;
};


/* "cuda/cuda.pxd":352
 *     cdef ccuda.CUhostFn* _ptr
 * 
 * cdef class CUstreamCallback:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUstreamCallback {
  PyObject_HEAD
  CUstreamCallback _CUstreamCallback__val;
  CUstreamCallback *_ptr;
};


/* "cuda/cuda.pxd":364
 *     cdef ccuda.CUstreamCallback* _ptr
 * 
 * cdef class CUoccupancyB2DSize:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUoccupancyB2DSize {
  PyObject_HEAD
  CUoccupancyB2DSize _CUoccupancyB2DSize__val;
  CUoccupancyB2DSize *_ptr;
};


/* "cuda/cuda.pxd":376
 *     cdef ccuda.CUoccupancyB2DSize* _ptr
 * 
 * cdef class CUuuid_st:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUuuid_st {
  PyObject_HEAD
  struct CUuuid_st _CUuuid_st__val;
  struct CUuuid_st *_ptr;
};


/* "cuda/cuda.pxd":392
 *     cdef ccuda.CUuuid_st* _ptr
 * 
 * cdef class CUmemFabricHandle_st:             # <<<<<<<<<<<<<<
 *     """
 *     Fabric handle - An opaque handle representing a memory allocation
 */
struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_st {
  PyObject_HEAD
  struct CUmemFabricHandle_st _CUmemFabricHandle_st__val;
  struct CUmemFabricHandle_st *_ptr;
};


/* "cuda/cuda.pxd":412
 *     cdef ccuda.CUmemFabricHandle_st* _ptr
 * 
 * cdef class CUipcEventHandle_st:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA IPC event handle
 */
struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_st {
  PyObject_HEAD
  struct CUipcEventHandle_st _CUipcEventHandle_st__val;
  struct CUipcEventHandle_st *_ptr;
};


/* "cuda/cuda.pxd":430
 *     cdef ccuda.CUipcEventHandle_st* _ptr
 * 
 * cdef class CUipcMemHandle_st:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA IPC mem handle
 */
struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_st {
  PyObject_HEAD
  struct CUipcMemHandle_st _CUipcMemHandle_st__val;
  struct CUipcMemHandle_st *_ptr;
};


/* "cuda/cuda.pxd":448
 *     cdef ccuda.CUipcMemHandle_st* _ptr
 * 
 * cdef class CUstreamMemOpWaitValueParams_st:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWaitValueParams_st {
  PyObject_HEAD
  union CUstreamBatchMemOpParams_union *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_address;
  struct __pyx_obj_4cuda_4cuda_cuuint32_t *_value;
  struct __pyx_obj_4cuda_4cuda_cuuint64_t *_value64;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_alias;
};


/* "cuda/cuda.pxd":477
 *     cdef CUdeviceptr _alias
 * 
 * cdef class CUstreamMemOpWriteValueParams_st:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWriteValueParams_st {
  PyObject_HEAD
  union CUstreamBatchMemOpParams_union *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_address;
  struct __pyx_obj_4cuda_4cuda_cuuint32_t *_value;
  struct __pyx_obj_4cuda_4cuda_cuuint64_t *_value64;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_alias;
};


/* "cuda/cuda.pxd":506
 *     cdef CUdeviceptr _alias
 * 
 * cdef class CUstreamMemOpFlushRemoteWritesParams_st:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st {
  PyObject_HEAD
  union CUstreamBatchMemOpParams_union *_ptr;
};


/* "cuda/cuda.pxd":523
 *     cdef ccuda.CUstreamBatchMemOpParams_union* _ptr
 * 
 * cdef class CUstreamMemOpMemoryBarrierParams_st:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st {
  PyObject_HEAD
  union CUstreamBatchMemOpParams_union *_ptr;
};


/* "cuda/cuda.pxd":540
 *     cdef ccuda.CUstreamBatchMemOpParams_union* _ptr
 * 
 * cdef class CUstreamBatchMemOpParams_union:             # <<<<<<<<<<<<<<
 *     """
 *     Per-operation parameters for cuStreamBatchMemOp
 */
struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_union {
  PyObject_HEAD
  union CUstreamBatchMemOpParams_union _CUstreamBatchMemOpParams_union__val;
  union CUstreamBatchMemOpParams_union *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWaitValueParams_st *_waitValue;
  struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWriteValueParams_st *_writeValue;
  struct __pyx_obj_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st *_flushRemoteWrites;
  struct __pyx_obj_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st *_memoryBarrier;
};


/* "cuda/cuda.pxd":572
 *     cdef CUstreamMemOpMemoryBarrierParams_st _memoryBarrier
 * 
 * cdef class CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st {
  PyObject_HEAD
  struct CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st _CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st__val;
  struct CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_ctx;
  size_t _paramArray_length;
  CUstreamBatchMemOpParams *_paramArray;
};


/* "cuda/cuda.pxd":597
 *     cdef ccuda.CUstreamBatchMemOpParams* _paramArray
 * 
 * cdef class CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st:             # <<<<<<<<<<<<<<
 *     """
 *     Batch memory operation node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st {
  PyObject_HEAD
  struct CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st _CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st__val;
  struct CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_ctx;
  size_t _paramArray_length;
  CUstreamBatchMemOpParams *_paramArray;
};


/* "cuda/cuda.pxd":624
 *     cdef ccuda.CUstreamBatchMemOpParams* _paramArray
 * 
 * cdef class CUdevprop_st:             # <<<<<<<<<<<<<<
 *     """
 *     Legacy device properties
 */
struct __pyx_obj_4cuda_4cuda_CUdevprop_st {
  PyObject_HEAD
  struct CUdevprop_st _CUdevprop_st__val;
  struct CUdevprop_st *_ptr;
};


/* "cuda/cuda.pxd":660
 *     cdef ccuda.CUdevprop_st* _ptr
 * 
 * cdef class CUaccessPolicyWindow_st:             # <<<<<<<<<<<<<<
 *     """
 *     Specifies an access policy for a window, a contiguous extent of
 */
struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_st {
  PyObject_HEAD
  struct CUaccessPolicyWindow_st _CUaccessPolicyWindow_st__val;
  struct CUaccessPolicyWindow_st *_ptr;
};


/* "cuda/cuda.pxd":698
 *     cdef ccuda.CUaccessPolicyWindow_st* _ptr
 * 
 * cdef class CUDA_KERNEL_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     GPU kernel node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_KERNEL_NODE_PARAMS_st _CUDA_KERNEL_NODE_PARAMS_st__val;
  struct CUDA_KERNEL_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUfunction *_func;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *_ckernelParams;
};


/* "cuda/cuda.pxd":736
 *     cdef utils.HelperKernelParams _ckernelParams
 * 
 * cdef class CUDA_KERNEL_NODE_PARAMS_v2_st:             # <<<<<<<<<<<<<<
 *     """
 *     GPU kernel node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st {
  PyObject_HEAD
  struct CUDA_KERNEL_NODE_PARAMS_v2_st _CUDA_KERNEL_NODE_PARAMS_v2_st__val;
  struct CUDA_KERNEL_NODE_PARAMS_v2_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUfunction *_func;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *_ckernelParams;
  struct __pyx_obj_4cuda_4cuda_CUkernel *_kern;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_ctx;
};


/* "cuda/cuda.pxd":782
 *     cdef CUcontext _ctx
 * 
 * cdef class CUDA_KERNEL_NODE_PARAMS_v3_st:             # <<<<<<<<<<<<<<
 *     """
 *     GPU kernel node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st {
  PyObject_HEAD
  struct CUDA_KERNEL_NODE_PARAMS_v3_st _CUDA_KERNEL_NODE_PARAMS_v3_st__val;
  struct CUDA_KERNEL_NODE_PARAMS_v3_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUfunction *_func;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *_ckernelParams;
  struct __pyx_obj_4cuda_4cuda_CUkernel *_kern;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_ctx;
};


/* "cuda/cuda.pxd":828
 *     cdef CUcontext _ctx
 * 
 * cdef class CUDA_MEMSET_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memset node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_MEMSET_NODE_PARAMS_st _CUDA_MEMSET_NODE_PARAMS_st__val;
  struct CUDA_MEMSET_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dst;
};


/* "cuda/cuda.pxd":857
 *     cdef CUdeviceptr _dst
 * 
 * cdef class CUDA_MEMSET_NODE_PARAMS_v2_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memset node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st {
  PyObject_HEAD
  struct CUDA_MEMSET_NODE_PARAMS_v2_st _CUDA_MEMSET_NODE_PARAMS_v2_st__val;
  struct CUDA_MEMSET_NODE_PARAMS_v2_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dst;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_ctx;
};


/* "cuda/cuda.pxd":889
 *     cdef CUcontext _ctx
 * 
 * cdef class CUDA_HOST_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Host node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_HOST_NODE_PARAMS_st _CUDA_HOST_NODE_PARAMS_st__val;
  struct CUDA_HOST_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUhostFn *_fn;
};


/* "cuda/cuda.pxd":910
 *     cdef CUhostFn _fn
 * 
 * cdef class CUDA_HOST_NODE_PARAMS_v2_st:             # <<<<<<<<<<<<<<
 *     """
 *     Host node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st {
  PyObject_HEAD
  struct CUDA_HOST_NODE_PARAMS_v2_st _CUDA_HOST_NODE_PARAMS_v2_st__val;
  struct CUDA_HOST_NODE_PARAMS_v2_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUhostFn *_fn;
};


/* "cuda/cuda.pxd":931
 *     cdef CUhostFn _fn
 * 
 * cdef class CUDA_CONDITIONAL_NODE_PARAMS:             # <<<<<<<<<<<<<<
 *     """
 *     Conditional node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS {
  PyObject_HEAD
  struct CUDA_CONDITIONAL_NODE_PARAMS _CUDA_CONDITIONAL_NODE_PARAMS__val;
  struct CUDA_CONDITIONAL_NODE_PARAMS *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUgraphConditionalHandle *_handle;
  size_t _phGraph_out_length;
  CUgraph *_phGraph_out;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_ctx;
};


/* "cuda/cuda.pxd":973
 *     cdef CUcontext _ctx
 * 
 * cdef class CUgraphEdgeData_st:             # <<<<<<<<<<<<<<
 *     """
 *     Optional annotation for edges in a CUDA graph. Note, all edges
 */
struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData_st {
  PyObject_HEAD
  struct CUgraphEdgeData_st _CUgraphEdgeData_st__val;
  struct CUgraphEdgeData_st *_ptr;
};


/* "cuda/cuda.pxd":1016
 *     cdef ccuda.CUgraphEdgeData_st* _ptr
 * 
 * cdef class CUDA_GRAPH_INSTANTIATE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Graph instantiation parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_GRAPH_INSTANTIATE_PARAMS_st _CUDA_GRAPH_INSTANTIATE_PARAMS_st__val;
  struct CUDA_GRAPH_INSTANTIATE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_cuuint64_t *_flags;
  struct __pyx_obj_4cuda_4cuda_CUstream *_hUploadStream;
  struct __pyx_obj_4cuda_4cuda_CUgraphNode *_hErrNode_out;
};


/* "cuda/cuda.pxd":1043
 *     cdef CUgraphNode _hErrNode_out
 * 
 * cdef class CUlaunchMemSyncDomainMap_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memory Synchronization Domain map  See ::cudaLaunchMemSyncDomain.
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap_st {
  PyObject_HEAD
  struct CUlaunchMemSyncDomainMap_st _CUlaunchMemSyncDomainMap_st__val;
  struct CUlaunchMemSyncDomainMap_st *_ptr;
};


/* "cuda/cuda.pxd":1069
 *     cdef ccuda.CUlaunchMemSyncDomainMap_st* _ptr
 * 
 * cdef class anon_struct0:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct0 {
  PyObject_HEAD
  union CUlaunchAttributeValue_union *_ptr;
};


/* "cuda/cuda.pxd":1088
 *     cdef ccuda.CUlaunchAttributeValue_union* _ptr
 * 
 * cdef class anon_struct1:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct1 {
  PyObject_HEAD
  union CUlaunchAttributeValue_union *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUevent *_event;
};


/* "cuda/cuda.pxd":1108
 *     cdef CUevent _event
 * 
 * cdef class anon_struct2:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct2 {
  PyObject_HEAD
  union CUlaunchAttributeValue_union *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUevent *_event;
};


/* "cuda/cuda.pxd":1126
 *     cdef CUevent _event
 * 
 * cdef class CUlaunchAttributeValue_union:             # <<<<<<<<<<<<<<
 *     """
 *     Launch attributes union; used as value field of CUlaunchAttribute
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue_union {
  PyObject_HEAD
  union CUlaunchAttributeValue_union _CUlaunchAttributeValue_union__val;
  union CUlaunchAttributeValue_union *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow *_accessPolicyWindow;
  struct __pyx_obj_4cuda_4cuda_anon_struct0 *_clusterDim;
  struct __pyx_obj_4cuda_4cuda_anon_struct1 *_programmaticEvent;
  struct __pyx_obj_4cuda_4cuda_anon_struct2 *_launchCompletionEvent;
  struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap *_memSyncDomainMap;
};


/* "cuda/cuda.pxd":1187
 *     cdef CUlaunchMemSyncDomainMap _memSyncDomainMap
 * 
 * cdef class CUlaunchAttribute_st:             # <<<<<<<<<<<<<<
 *     """
 *     Launch attribute
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute_st {
  PyObject_HEAD
  struct CUlaunchAttribute_st _CUlaunchAttribute_st__val;
  struct CUlaunchAttribute_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue *_value;
};


/* "cuda/cuda.pxd":1208
 *     cdef CUlaunchAttributeValue _value
 * 
 * cdef class CUlaunchConfig_st:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA extensible launch configuration
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchConfig_st {
  PyObject_HEAD
  struct CUlaunchConfig_st _CUlaunchConfig_st__val;
  struct CUlaunchConfig_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUstream *_hStream;
  size_t _attrs_length;
  CUlaunchAttribute *_attrs;
};


/* "cuda/cuda.pxd":1247
 *     cdef ccuda.CUlaunchAttribute* _attrs
 * 
 * cdef class CUexecAffinitySmCount_st:             # <<<<<<<<<<<<<<
 *     """
 *     Value for CU_EXEC_AFFINITY_TYPE_SM_COUNT
 */
struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_st {
  PyObject_HEAD
  struct CUexecAffinitySmCount_st _CUexecAffinitySmCount_st__val;
  struct CUexecAffinitySmCount_st *_ptr;
};


/* "cuda/cuda.pxd":1265
 *     cdef ccuda.CUexecAffinitySmCount_st* _ptr
 * 
 * cdef class anon_union2:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union2 {
  PyObject_HEAD
  struct CUexecAffinityParam_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount *_smCount;
};


/* "cuda/cuda.pxd":1281
 *     cdef CUexecAffinitySmCount _smCount
 * 
 * cdef class CUexecAffinityParam_st:             # <<<<<<<<<<<<<<
 *     """
 *     Execution Affinity Parameters
 */
struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_st {
  PyObject_HEAD
  struct CUexecAffinityParam_st _CUexecAffinityParam_st__val;
  struct CUexecAffinityParam_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_union2 *_param;
};


/* "cuda/cuda.pxd":1302
 *     cdef anon_union2 _param
 * 
 * cdef class CUlibraryHostUniversalFunctionAndDataTable_st:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st {
  PyObject_HEAD
  struct CUlibraryHostUniversalFunctionAndDataTable_st _CUlibraryHostUniversalFunctionAndDataTable_st__val;
  struct CUlibraryHostUniversalFunctionAndDataTable_st *_ptr;
};


/* "cuda/cuda.pxd":1324
 *     cdef ccuda.CUlibraryHostUniversalFunctionAndDataTable_st* _ptr
 * 
 * cdef class CUDA_MEMCPY2D_st:             # <<<<<<<<<<<<<<
 *     """
 *     2D memory copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_st {
  PyObject_HEAD
  struct CUDA_MEMCPY2D_st _CUDA_MEMCPY2D_st__val;
  struct CUDA_MEMCPY2D_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_srcDevice;
  struct __pyx_obj_4cuda_4cuda_CUarray *_srcArray;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dstDevice;
  struct __pyx_obj_4cuda_4cuda_CUarray *_dstArray;
};


/* "cuda/cuda.pxd":1376
 *     cdef CUarray _dstArray
 * 
 * cdef class CUDA_MEMCPY3D_st:             # <<<<<<<<<<<<<<
 *     """
 *     3D memory copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_st {
  PyObject_HEAD
  struct CUDA_MEMCPY3D_st _CUDA_MEMCPY3D_st__val;
  struct CUDA_MEMCPY3D_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_srcDevice;
  struct __pyx_obj_4cuda_4cuda_CUarray *_srcArray;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dstDevice;
  struct __pyx_obj_4cuda_4cuda_CUarray *_dstArray;
};


/* "cuda/cuda.pxd":1447
 *     cdef CUarray _dstArray
 * 
 * cdef class CUDA_MEMCPY3D_PEER_st:             # <<<<<<<<<<<<<<
 *     """
 *     3D memory cross-context copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st {
  PyObject_HEAD
  struct CUDA_MEMCPY3D_PEER_st _CUDA_MEMCPY3D_PEER_st__val;
  struct CUDA_MEMCPY3D_PEER_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_srcDevice;
  struct __pyx_obj_4cuda_4cuda_CUarray *_srcArray;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_srcContext;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dstDevice;
  struct __pyx_obj_4cuda_4cuda_CUarray *_dstArray;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_dstContext;
};


/* "cuda/cuda.pxd":1521
 *     cdef CUcontext _dstContext
 * 
 * cdef class CUDA_MEMCPY_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memcpy node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_MEMCPY_NODE_PARAMS_st _CUDA_MEMCPY_NODE_PARAMS_st__val;
  struct CUDA_MEMCPY_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_copyCtx;
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D *_copyParams;
};


/* "cuda/cuda.pxd":1547
 *     cdef CUDA_MEMCPY3D _copyParams
 * 
 * cdef class CUDA_ARRAY_DESCRIPTOR_st:             # <<<<<<<<<<<<<<
 *     """
 *     Array descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st {
  PyObject_HEAD
  struct CUDA_ARRAY_DESCRIPTOR_st _CUDA_ARRAY_DESCRIPTOR_st__val;
  struct CUDA_ARRAY_DESCRIPTOR_st *_ptr;
};


/* "cuda/cuda.pxd":1571
 *     cdef ccuda.CUDA_ARRAY_DESCRIPTOR_st* _ptr
 * 
 * cdef class CUDA_ARRAY3D_DESCRIPTOR_st:             # <<<<<<<<<<<<<<
 *     """
 *     3D array descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st {
  PyObject_HEAD
  struct CUDA_ARRAY3D_DESCRIPTOR_st _CUDA_ARRAY3D_DESCRIPTOR_st__val;
  struct CUDA_ARRAY3D_DESCRIPTOR_st *_ptr;
};


/* "cuda/cuda.pxd":1599
 *     cdef ccuda.CUDA_ARRAY3D_DESCRIPTOR_st* _ptr
 * 
 * cdef class anon_struct3:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct3 {
  PyObject_HEAD
  struct CUDA_ARRAY_SPARSE_PROPERTIES_st *_ptr;
};


/* "cuda/cuda.pxd":1618
 *     cdef ccuda.CUDA_ARRAY_SPARSE_PROPERTIES_st* _ptr
 * 
 * cdef class CUDA_ARRAY_SPARSE_PROPERTIES_st:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA array sparse properties
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st {
  PyObject_HEAD
  struct CUDA_ARRAY_SPARSE_PROPERTIES_st _CUDA_ARRAY_SPARSE_PROPERTIES_st__val;
  struct CUDA_ARRAY_SPARSE_PROPERTIES_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct3 *_tileExtent;
};


/* "cuda/cuda.pxd":1646
 *     cdef anon_struct3 _tileExtent
 * 
 * cdef class CUDA_ARRAY_MEMORY_REQUIREMENTS_st:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA array memory requirements
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st {
  PyObject_HEAD
  struct CUDA_ARRAY_MEMORY_REQUIREMENTS_st _CUDA_ARRAY_MEMORY_REQUIREMENTS_st__val;
  struct CUDA_ARRAY_MEMORY_REQUIREMENTS_st *_ptr;
};


/* "cuda/cuda.pxd":1668
 *     cdef ccuda.CUDA_ARRAY_MEMORY_REQUIREMENTS_st* _ptr
 * 
 * cdef class anon_struct4:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct4 {
  PyObject_HEAD
  struct CUDA_RESOURCE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUarray *_hArray;
};


/* "cuda/cuda.pxd":1684
 *     cdef CUarray _hArray
 * 
 * cdef class anon_struct5:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct5 {
  PyObject_HEAD
  struct CUDA_RESOURCE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmipmappedArray *_hMipmappedArray;
};


/* "cuda/cuda.pxd":1700
 *     cdef CUmipmappedArray _hMipmappedArray
 * 
 * cdef class anon_struct6:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct6 {
  PyObject_HEAD
  struct CUDA_RESOURCE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_devPtr;
};


/* "cuda/cuda.pxd":1722
 *     cdef CUdeviceptr _devPtr
 * 
 * cdef class anon_struct7:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct7 {
  PyObject_HEAD
  struct CUDA_RESOURCE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_devPtr;
};


/* "cuda/cuda.pxd":1748
 *     cdef CUdeviceptr _devPtr
 * 
 * cdef class anon_struct8:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct8 {
  PyObject_HEAD
  struct CUDA_RESOURCE_DESC_st *_ptr;
};


/* "cuda/cuda.pxd":1763
 *     cdef ccuda.CUDA_RESOURCE_DESC_st* _ptr
 * 
 * cdef class anon_union3:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union3 {
  PyObject_HEAD
  struct CUDA_RESOURCE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct4 *_array;
  struct __pyx_obj_4cuda_4cuda_anon_struct5 *_mipmap;
  struct __pyx_obj_4cuda_4cuda_anon_struct6 *_linear;
  struct __pyx_obj_4cuda_4cuda_anon_struct7 *_pitch2D;
  struct __pyx_obj_4cuda_4cuda_anon_struct8 *_reserved;
};


/* "cuda/cuda.pxd":1791
 *     cdef anon_struct8 _reserved
 * 
 * cdef class CUDA_RESOURCE_DESC_st:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA Resource descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_st {
  PyObject_HEAD
  struct CUDA_RESOURCE_DESC_st _CUDA_RESOURCE_DESC_st__val;
  struct CUDA_RESOURCE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_union3 *_res;
};


/* "cuda/cuda.pxd":1814
 *     cdef anon_union3 _res
 * 
 * cdef class CUDA_TEXTURE_DESC_st:             # <<<<<<<<<<<<<<
 *     """
 *     Texture descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_st {
  PyObject_HEAD
  struct CUDA_TEXTURE_DESC_st _CUDA_TEXTURE_DESC_st__val;
  struct CUDA_TEXTURE_DESC_st *_ptr;
};


/* "cuda/cuda.pxd":1850
 *     cdef ccuda.CUDA_TEXTURE_DESC_st* _ptr
 * 
 * cdef class CUDA_RESOURCE_VIEW_DESC_st:             # <<<<<<<<<<<<<<
 *     """
 *     Resource view descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st {
  PyObject_HEAD
  struct CUDA_RESOURCE_VIEW_DESC_st _CUDA_RESOURCE_VIEW_DESC_st__val;
  struct CUDA_RESOURCE_VIEW_DESC_st *_ptr;
};


/* "cuda/cuda.pxd":1884
 *     cdef ccuda.CUDA_RESOURCE_VIEW_DESC_st* _ptr
 * 
 * cdef class CUtensorMap_st:             # <<<<<<<<<<<<<<
 *     """
 *     Tensor map descriptor. Requires compiler support for aligning to 64
 */
struct __pyx_obj_4cuda_4cuda_CUtensorMap_st {
  PyObject_HEAD
  struct CUtensorMap_st _CUtensorMap_st__val;
  struct CUtensorMap_st *_ptr;
};


/* "cuda/cuda.pxd":1903
 *     cdef ccuda.CUtensorMap_st* _ptr
 * 
 * cdef class CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st:             # <<<<<<<<<<<<<<
 *     """
 *     GPU Direct v3 tokens
 */
struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
  PyObject_HEAD
  struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st _CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st__val;
  struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st *_ptr;
};


/* "cuda/cuda.pxd":1923
 *     cdef ccuda.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st* _ptr
 * 
 * cdef class CUDA_LAUNCH_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Kernel launch parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st {
  PyObject_HEAD
  struct CUDA_LAUNCH_PARAMS_st _CUDA_LAUNCH_PARAMS_st__val;
  struct CUDA_LAUNCH_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUfunction *_function;
  struct __pyx_obj_4cuda_4cuda_CUstream *_hStream;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *_ckernelParams;
};


/* "cuda/cuda.pxd":1962
 *     cdef utils.HelperKernelParams _ckernelParams
 * 
 * cdef class anon_struct9:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct9 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st *_ptr;
};


/* "cuda/cuda.pxd":1979
 *     cdef ccuda.CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st* _ptr
 * 
 * cdef class anon_union4:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union4 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct9 *_win32;
};


/* "cuda/cuda.pxd":1999
 *     cdef anon_struct9 _win32
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st:             # <<<<<<<<<<<<<<
 *     """
 *     External memory handle descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st {
  PyObject_HEAD
  struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st _CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st__val;
  struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_union4 *_handle;
};


/* "cuda/cuda.pxd":2026
 *     cdef anon_union4 _handle
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st:             # <<<<<<<<<<<<<<
 *     """
 *     External memory buffer descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st {
  PyObject_HEAD
  struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st _CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st__val;
  struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st *_ptr;
};


/* "cuda/cuda.pxd":2050
 *     cdef ccuda.CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st* _ptr
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st:             # <<<<<<<<<<<<<<
 *     """
 *     External memory mipmap descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st {
  PyObject_HEAD
  struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st _CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st__val;
  struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR *_arrayDesc;
};


/* "cuda/cuda.pxd":2076
 *     cdef CUDA_ARRAY3D_DESCRIPTOR _arrayDesc
 * 
 * cdef class anon_struct10:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct10 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st *_ptr;
};


/* "cuda/cuda.pxd":2093
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st* _ptr
 * 
 * cdef class anon_union5:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union5 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct10 *_win32;
};


/* "cuda/cuda.pxd":2113
 *     cdef anon_struct10 _win32
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st:             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore handle descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st _CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st__val;
  struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_union5 *_handle;
};


/* "cuda/cuda.pxd":2138
 *     cdef anon_union5 _handle
 * 
 * cdef class anon_struct11:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct11 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st *_ptr;
};


/* "cuda/cuda.pxd":2153
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st* _ptr
 * 
 * cdef class anon_union6:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union6 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st *_ptr;
};


/* "cuda/cuda.pxd":2170
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st* _ptr
 * 
 * cdef class anon_struct12:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct12 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st *_ptr;
};


/* "cuda/cuda.pxd":2185
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st* _ptr
 * 
 * cdef class anon_struct13:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct13 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct11 *_fence;
  struct __pyx_obj_4cuda_4cuda_anon_union6 *_nvSciSync;
  struct __pyx_obj_4cuda_4cuda_anon_struct12 *_keyedMutex;
};


/* "cuda/cuda.pxd":2209
 *     cdef anon_struct12 _keyedMutex
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore signal parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st _CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st__val;
  struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct13 *_params;
};


/* "cuda/cuda.pxd":2239
 *     cdef anon_struct13 _params
 * 
 * cdef class anon_struct14:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct14 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st *_ptr;
};


/* "cuda/cuda.pxd":2254
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st* _ptr
 * 
 * cdef class anon_union7:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union7 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st *_ptr;
};


/* "cuda/cuda.pxd":2271
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st* _ptr
 * 
 * cdef class anon_struct15:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct15 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st *_ptr;
};


/* "cuda/cuda.pxd":2288
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st* _ptr
 * 
 * cdef class anon_struct16:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct16 {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct14 *_fence;
  struct __pyx_obj_4cuda_4cuda_anon_union7 *_nvSciSync;
  struct __pyx_obj_4cuda_4cuda_anon_struct15 *_keyedMutex;
};


/* "cuda/cuda.pxd":2312
 *     cdef anon_struct15 _keyedMutex
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore wait parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st {
  PyObject_HEAD
  struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st _CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st__val;
  struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct16 *_params;
};


/* "cuda/cuda.pxd":2342
 *     cdef anon_struct16 _params
 * 
 * cdef class CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore signal node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st _CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st__val;
  struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st *_ptr;
  size_t _extSemArray_length;
  CUexternalSemaphore *_extSemArray;
  size_t _paramsArray_length;
  CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *_paramsArray;
};


/* "cuda/cuda.pxd":2370
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS* _paramsArray
 * 
 * cdef class CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st:             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore signal node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st {
  PyObject_HEAD
  struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st _CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st__val;
  struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st *_ptr;
  size_t _extSemArray_length;
  CUexternalSemaphore *_extSemArray;
  size_t _paramsArray_length;
  CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *_paramsArray;
};


/* "cuda/cuda.pxd":2398
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS* _paramsArray
 * 
 * cdef class CUDA_EXT_SEM_WAIT_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore wait node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st _CUDA_EXT_SEM_WAIT_NODE_PARAMS_st__val;
  struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st *_ptr;
  size_t _extSemArray_length;
  CUexternalSemaphore *_extSemArray;
  size_t _paramsArray_length;
  CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *_paramsArray;
};


/* "cuda/cuda.pxd":2426
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS* _paramsArray
 * 
 * cdef class CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st:             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore wait node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st {
  PyObject_HEAD
  struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st _CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st__val;
  struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st *_ptr;
  size_t _extSemArray_length;
  CUexternalSemaphore *_extSemArray;
  size_t _paramsArray_length;
  CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *_paramsArray;
};


/* "cuda/cuda.pxd":2454
 *     cdef ccuda.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS* _paramsArray
 * 
 * cdef class anon_union8:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union8 {
  PyObject_HEAD
  struct CUarrayMapInfo_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmipmappedArray *_mipmap;
  struct __pyx_obj_4cuda_4cuda_CUarray *_array;
};


/* "cuda/cuda.pxd":2473
 *     cdef CUarray _array
 * 
 * cdef class anon_struct17:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct17 {
  PyObject_HEAD
  struct CUarrayMapInfo_st *_ptr;
};


/* "cuda/cuda.pxd":2502
 *     cdef ccuda.CUarrayMapInfo_st* _ptr
 * 
 * cdef class anon_struct18:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct18 {
  PyObject_HEAD
  struct CUarrayMapInfo_st *_ptr;
};


/* "cuda/cuda.pxd":2521
 *     cdef ccuda.CUarrayMapInfo_st* _ptr
 * 
 * cdef class anon_union9:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union9 {
  PyObject_HEAD
  struct CUarrayMapInfo_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_struct17 *_sparseLevel;
  struct __pyx_obj_4cuda_4cuda_anon_struct18 *_miptail;
};


/* "cuda/cuda.pxd":2540
 *     cdef anon_struct18 _miptail
 * 
 * cdef class anon_union10:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union10 {
  PyObject_HEAD
  struct CUarrayMapInfo_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle *_memHandle;
};


/* "cuda/cuda.pxd":2556
 *     cdef CUmemGenericAllocationHandle _memHandle
 * 
 * cdef class CUarrayMapInfo_st:             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the CUDA array or CUDA mipmapped array memory mapping
 */
struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_st {
  PyObject_HEAD
  struct CUarrayMapInfo_st _CUarrayMapInfo_st__val;
  struct CUarrayMapInfo_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_union8 *_resource;
  struct __pyx_obj_4cuda_4cuda_anon_union9 *_subresource;
  struct __pyx_obj_4cuda_4cuda_anon_union10 *_memHandle;
};


/* "cuda/cuda.pxd":2598
 *     cdef anon_union10 _memHandle
 * 
 * cdef class CUmemLocation_st:             # <<<<<<<<<<<<<<
 *     """
 *     Specifies a memory location.
 */
struct __pyx_obj_4cuda_4cuda_CUmemLocation_st {
  PyObject_HEAD
  struct CUmemLocation_st _CUmemLocation_st__val;
  struct CUmemLocation_st *_ptr;
};


/* "cuda/cuda.pxd":2618
 *     cdef ccuda.CUmemLocation_st* _ptr
 * 
 * cdef class anon_struct19:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_struct19 {
  PyObject_HEAD
  struct CUmemAllocationProp_st *_ptr;
};


/* "cuda/cuda.pxd":2639
 *     cdef ccuda.CUmemAllocationProp_st* _ptr
 * 
 * cdef class CUmemAllocationProp_st:             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the allocation properties for a allocation.
 */
struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_st {
  PyObject_HEAD
  struct CUmemAllocationProp_st _CUmemAllocationProp_st__val;
  struct CUmemAllocationProp_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmemLocation *_location;
  struct __pyx_obj_4cuda_4cuda_anon_struct19 *_allocFlags;
};


/* "cuda/cuda.pxd":2671
 *     cdef anon_struct19 _allocFlags
 * 
 * cdef class CUmulticastObjectProp_st:             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the properties for a multicast object.
 */
struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_st {
  PyObject_HEAD
  struct CUmulticastObjectProp_st _CUmulticastObjectProp_st__val;
  struct CUmulticastObjectProp_st *_ptr;
};


/* "cuda/cuda.pxd":2698
 *     cdef ccuda.CUmulticastObjectProp_st* _ptr
 * 
 * cdef class CUmemAccessDesc_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memory access descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_st {
  PyObject_HEAD
  struct CUmemAccessDesc_st _CUmemAccessDesc_st__val;
  struct CUmemAccessDesc_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmemLocation *_location;
};


/* "cuda/cuda.pxd":2719
 *     cdef CUmemLocation _location
 * 
 * cdef class CUgraphExecUpdateResultInfo_st:             # <<<<<<<<<<<<<<
 *     """
 *     Result information returned by cuGraphExecUpdate
 */
struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_st {
  PyObject_HEAD
  struct CUgraphExecUpdateResultInfo_st _CUgraphExecUpdateResultInfo_st__val;
  struct CUgraphExecUpdateResultInfo_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUgraphNode *_errorNode;
  struct __pyx_obj_4cuda_4cuda_CUgraphNode *_errorFromNode;
};


/* "cuda/cuda.pxd":2746
 *     cdef CUgraphNode _errorFromNode
 * 
 * cdef class CUmemPoolProps_st:             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the properties of allocations made from the pool.
 */
struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_st {
  PyObject_HEAD
  struct CUmemPoolProps_st _CUmemPoolProps_st__val;
  struct CUmemPoolProps_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmemLocation *_location;
};


/* "cuda/cuda.pxd":2781
 *     cdef CUmemLocation _location
 * 
 * cdef class CUmemPoolPtrExportData_st:             # <<<<<<<<<<<<<<
 *     """
 *     Opaque data for exporting a pool allocation
 */
struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_st {
  PyObject_HEAD
  struct CUmemPoolPtrExportData_st _CUmemPoolPtrExportData_st__val;
  struct CUmemPoolPtrExportData_st *_ptr;
};


/* "cuda/cuda.pxd":2799
 *     cdef ccuda.CUmemPoolPtrExportData_st* _ptr
 * 
 * cdef class CUDA_MEM_ALLOC_NODE_PARAMS_v1_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memory allocation node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st {
  PyObject_HEAD
  struct CUDA_MEM_ALLOC_NODE_PARAMS_v1_st _CUDA_MEM_ALLOC_NODE_PARAMS_v1_st__val;
  struct CUDA_MEM_ALLOC_NODE_PARAMS_v1_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmemPoolProps *_poolProps;
  size_t _accessDescs_length;
  CUmemAccessDesc *_accessDescs;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dptr;
};


/* "cuda/cuda.pxd":2834
 *     cdef CUdeviceptr _dptr
 * 
 * cdef class CUDA_MEM_ALLOC_NODE_PARAMS_v2_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memory allocation node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st {
  PyObject_HEAD
  struct CUDA_MEM_ALLOC_NODE_PARAMS_v2_st _CUDA_MEM_ALLOC_NODE_PARAMS_v2_st__val;
  struct CUDA_MEM_ALLOC_NODE_PARAMS_v2_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUmemPoolProps *_poolProps;
  size_t _accessDescs_length;
  CUmemAccessDesc *_accessDescs;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dptr;
};


/* "cuda/cuda.pxd":2869
 *     cdef CUdeviceptr _dptr
 * 
 * cdef class CUDA_MEM_FREE_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Memory free node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_MEM_FREE_NODE_PARAMS_st _CUDA_MEM_FREE_NODE_PARAMS_st__val;
  struct CUDA_MEM_FREE_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_dptr;
};


/* "cuda/cuda.pxd":2888
 *     cdef CUdeviceptr _dptr
 * 
 * cdef class CUDA_CHILD_GRAPH_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Child graph node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_CHILD_GRAPH_NODE_PARAMS_st _CUDA_CHILD_GRAPH_NODE_PARAMS_st__val;
  struct CUDA_CHILD_GRAPH_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUgraph *_graph;
};


/* "cuda/cuda.pxd":2908
 *     cdef CUgraph _graph
 * 
 * cdef class CUDA_EVENT_RECORD_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Event record node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_EVENT_RECORD_NODE_PARAMS_st _CUDA_EVENT_RECORD_NODE_PARAMS_st__val;
  struct CUDA_EVENT_RECORD_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUevent *_event;
};


/* "cuda/cuda.pxd":2927
 *     cdef CUevent _event
 * 
 * cdef class CUDA_EVENT_WAIT_NODE_PARAMS_st:             # <<<<<<<<<<<<<<
 *     """
 *     Event wait node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st {
  PyObject_HEAD
  struct CUDA_EVENT_WAIT_NODE_PARAMS_st _CUDA_EVENT_WAIT_NODE_PARAMS_st__val;
  struct CUDA_EVENT_WAIT_NODE_PARAMS_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUevent *_event;
};


/* "cuda/cuda.pxd":2946
 *     cdef CUevent _event
 * 
 * cdef class CUgraphNodeParams_st:             # <<<<<<<<<<<<<<
 *     """
 *     Graph node parameters. See cuGraphAddNode.
 */
struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams_st {
  PyObject_HEAD
  struct CUgraphNodeParams_st _CUgraphNodeParams_st__val;
  struct CUgraphNodeParams_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3 *_kernel;
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS *_memcpy;
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2 *_memset;
  struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2 *_host;
  struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS *_graph;
  struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS *_eventWait;
  struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS *_eventRecord;
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2 *_extSemSignal;
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2 *_extSemWait;
  struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2 *_alloc;
  struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS *_free;
  struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2 *_memOp;
  struct __pyx_obj_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS *_conditional;
};


/* "cuda/cuda.pxd":3009
 *     cdef CUDA_CONDITIONAL_NODE_PARAMS _conditional
 * 
 * cdef class anon_union12:             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_anon_union12 {
  PyObject_HEAD
  struct __pyx_t_4cuda_5ccuda_CUeglFrame_st *_ptr;
};


/* "cuda/cuda.pxd":3026
 *     cdef ccuda.CUeglFrame_st* _ptr
 * 
 * cdef class CUeglFrame_st:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA EGLFrame structure Descriptor - structure defining one frame
 */
struct __pyx_obj_4cuda_4cuda_CUeglFrame_st {
  PyObject_HEAD
  struct __pyx_t_4cuda_5ccuda_CUeglFrame_st _CUeglFrame_st__val;
  struct __pyx_t_4cuda_5ccuda_CUeglFrame_st *_ptr;
  struct __pyx_obj_4cuda_4cuda_anon_union12 *_frame;
};


/* "cuda/cuda.pxd":3065
 *     cdef anon_union12 _frame
 * 
 * cdef class CUdeviceptr:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUdeviceptr {
  PyObject_HEAD
  CUdeviceptr _CUdeviceptr__val;
  CUdeviceptr *_ptr;
};


/* "cuda/cuda.pxd":3079
 *     cdef ccuda.CUdeviceptr* _ptr
 * 
 * cdef class CUdevice:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUdevice {
  PyObject_HEAD
  CUdevice _CUdevice__val;
  CUdevice *_ptr;
};


/* "cuda/cuda.pxd":3093
 *     cdef ccuda.CUdevice* _ptr
 * 
 * cdef class CUtexObject:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUtexObject {
  PyObject_HEAD
  CUtexObject _CUtexObject__val;
  CUtexObject *_ptr;
};


/* "cuda/cuda.pxd":3107
 *     cdef ccuda.CUtexObject* _ptr
 * 
 * cdef class CUsurfObject:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUsurfObject {
  PyObject_HEAD
  CUsurfObject _CUsurfObject__val;
  CUsurfObject *_ptr;
};


/* "cuda/cuda.pxd":3121
 *     cdef ccuda.CUsurfObject* _ptr
 * 
 * cdef class CUgraphConditionalHandle:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUgraphConditionalHandle {
  PyObject_HEAD
  CUgraphConditionalHandle _CUgraphConditionalHandle__val;
  CUgraphConditionalHandle *_ptr;
};


/* "cuda/cuda.pxd":3133
 *     cdef ccuda.CUgraphConditionalHandle* _ptr
 * 
 * cdef class CUuuid(CUuuid_st):             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUuuid {
  struct __pyx_obj_4cuda_4cuda_CUuuid_st __pyx_base;
};


/* "cuda/cuda.pxd":3148
 *     pass
 * 
 * cdef class CUmemFabricHandle_v1(CUmemFabricHandle_st):             # <<<<<<<<<<<<<<
 *     """
 *     Fabric handle - An opaque handle representing a memory allocation
 */
struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_v1 {
  struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_st __pyx_base;
};


/* "cuda/cuda.pxd":3167
 *     pass
 * 
 * cdef class CUmemFabricHandle(CUmemFabricHandle_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Fabric handle - An opaque handle representing a memory allocation
 */
struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle {
  struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3186
 *     pass
 * 
 * cdef class CUipcEventHandle_v1(CUipcEventHandle_st):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA IPC event handle
 */
struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_v1 {
  struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_st __pyx_base;
};


/* "cuda/cuda.pxd":3203
 *     pass
 * 
 * cdef class CUipcEventHandle(CUipcEventHandle_v1):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA IPC event handle
 */
struct __pyx_obj_4cuda_4cuda_CUipcEventHandle {
  struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3220
 *     pass
 * 
 * cdef class CUipcMemHandle_v1(CUipcMemHandle_st):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA IPC mem handle
 */
struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_v1 {
  struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_st __pyx_base;
};


/* "cuda/cuda.pxd":3237
 *     pass
 * 
 * cdef class CUipcMemHandle(CUipcMemHandle_v1):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA IPC mem handle
 */
struct __pyx_obj_4cuda_4cuda_CUipcMemHandle {
  struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3254
 *     pass
 * 
 * cdef class CUstreamBatchMemOpParams_v1(CUstreamBatchMemOpParams_union):             # <<<<<<<<<<<<<<
 *     """
 *     Per-operation parameters for cuStreamBatchMemOp
 */
struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_v1 {
  struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_union __pyx_base;
};


/* "cuda/cuda.pxd":3281
 *     pass
 * 
 * cdef class CUstreamBatchMemOpParams(CUstreamBatchMemOpParams_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Per-operation parameters for cuStreamBatchMemOp
 */
struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams {
  struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3308
 *     pass
 * 
 * cdef class CUDA_BATCH_MEM_OP_NODE_PARAMS_v1(CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st):             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st __pyx_base;
};


/* "cuda/cuda.pxd":3329
 *     pass
 * 
 * cdef class CUDA_BATCH_MEM_OP_NODE_PARAMS(CUDA_BATCH_MEM_OP_NODE_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3350
 *     pass
 * 
 * cdef class CUDA_BATCH_MEM_OP_NODE_PARAMS_v2(CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st):             # <<<<<<<<<<<<<<
 *     """
 *     Batch memory operation node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st __pyx_base;
};


/* "cuda/cuda.pxd":3373
 *     pass
 * 
 * cdef class CUdevprop_v1(CUdevprop_st):             # <<<<<<<<<<<<<<
 *     """
 *     Legacy device properties
 */
struct __pyx_obj_4cuda_4cuda_CUdevprop_v1 {
  struct __pyx_obj_4cuda_4cuda_CUdevprop_st __pyx_base;
};


/* "cuda/cuda.pxd":3408
 *     pass
 * 
 * cdef class CUdevprop(CUdevprop_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Legacy device properties
 */
struct __pyx_obj_4cuda_4cuda_CUdevprop {
  struct __pyx_obj_4cuda_4cuda_CUdevprop_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3443
 *     pass
 * 
 * cdef class CUaccessPolicyWindow_v1(CUaccessPolicyWindow_st):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies an access policy for a window, a contiguous extent of
 */
struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_v1 {
  struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_st __pyx_base;
};


/* "cuda/cuda.pxd":3480
 *     pass
 * 
 * cdef class CUaccessPolicyWindow(CUaccessPolicyWindow_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies an access policy for a window, a contiguous extent of
 */
struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow {
  struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3517
 *     pass
 * 
 * cdef class CUDA_KERNEL_NODE_PARAMS_v1(CUDA_KERNEL_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     GPU kernel node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":3552
 *     pass
 * 
 * cdef class CUDA_KERNEL_NODE_PARAMS_v2(CUDA_KERNEL_NODE_PARAMS_v2_st):             # <<<<<<<<<<<<<<
 *     """
 *     GPU kernel node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st __pyx_base;
};


/* "cuda/cuda.pxd":3593
 *     pass
 * 
 * cdef class CUDA_KERNEL_NODE_PARAMS(CUDA_KERNEL_NODE_PARAMS_v2):             # <<<<<<<<<<<<<<
 *     """
 *     GPU kernel node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2 __pyx_base;
};


/* "cuda/cuda.pxd":3634
 *     pass
 * 
 * cdef class CUDA_KERNEL_NODE_PARAMS_v3(CUDA_KERNEL_NODE_PARAMS_v3_st):             # <<<<<<<<<<<<<<
 *     """
 *     GPU kernel node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3 {
  struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st __pyx_base;
};


/* "cuda/cuda.pxd":3675
 *     pass
 * 
 * cdef class CUDA_MEMSET_NODE_PARAMS_v1(CUDA_MEMSET_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memset node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":3702
 *     pass
 * 
 * cdef class CUDA_MEMSET_NODE_PARAMS(CUDA_MEMSET_NODE_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Memset node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3729
 *     pass
 * 
 * cdef class CUDA_MEMSET_NODE_PARAMS_v2(CUDA_MEMSET_NODE_PARAMS_v2_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memset node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st __pyx_base;
};


/* "cuda/cuda.pxd":3758
 *     pass
 * 
 * cdef class CUDA_HOST_NODE_PARAMS_v1(CUDA_HOST_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Host node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":3777
 *     pass
 * 
 * cdef class CUDA_HOST_NODE_PARAMS(CUDA_HOST_NODE_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Host node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":3796
 *     pass
 * 
 * cdef class CUDA_HOST_NODE_PARAMS_v2(CUDA_HOST_NODE_PARAMS_v2_st):             # <<<<<<<<<<<<<<
 *     """
 *     Host node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st __pyx_base;
};


/* "cuda/cuda.pxd":3815
 *     pass
 * 
 * cdef class CUgraphEdgeData(CUgraphEdgeData_st):             # <<<<<<<<<<<<<<
 *     """
 *     Optional annotation for edges in a CUDA graph. Note, all edges
 */
struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData {
  struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData_st __pyx_base;
};


/* "cuda/cuda.pxd":3857
 *     pass
 * 
 * cdef class CUDA_GRAPH_INSTANTIATE_PARAMS(CUDA_GRAPH_INSTANTIATE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Graph instantiation parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":3880
 *     pass
 * 
 * cdef class CUlaunchMemSyncDomainMap(CUlaunchMemSyncDomainMap_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memory Synchronization Domain map  See ::cudaLaunchMemSyncDomain.
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap {
  struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap_st __pyx_base;
};


/* "cuda/cuda.pxd":3905
 *     pass
 * 
 * cdef class CUlaunchAttributeValue(CUlaunchAttributeValue_union):             # <<<<<<<<<<<<<<
 *     """
 *     Launch attributes union; used as value field of CUlaunchAttribute
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue {
  struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue_union __pyx_base;
};


/* "cuda/cuda.pxd":3960
 *     pass
 * 
 * cdef class CUlaunchAttribute(CUlaunchAttribute_st):             # <<<<<<<<<<<<<<
 *     """
 *     Launch attribute
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute {
  struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute_st __pyx_base;
};


/* "cuda/cuda.pxd":3979
 *     pass
 * 
 * cdef class CUlaunchConfig(CUlaunchConfig_st):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA extensible launch configuration
 */
struct __pyx_obj_4cuda_4cuda_CUlaunchConfig {
  struct __pyx_obj_4cuda_4cuda_CUlaunchConfig_st __pyx_base;
};


/* "cuda/cuda.pxd":4014
 *     pass
 * 
 * cdef class CUkernelNodeAttrValue_v1(CUlaunchAttributeValue):             # <<<<<<<<<<<<<<
 *     """
 *     Launch attributes union; used as value field of CUlaunchAttribute
 */
struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue_v1 {
  struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue __pyx_base;
};


/* "cuda/cuda.pxd":4069
 *     pass
 * 
 * cdef class CUkernelNodeAttrValue(CUkernelNodeAttrValue_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Launch attributes union; used as value field of CUlaunchAttribute
 */
struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue {
  struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4124
 *     pass
 * 
 * cdef class CUstreamAttrValue_v1(CUlaunchAttributeValue):             # <<<<<<<<<<<<<<
 *     """
 *     Launch attributes union; used as value field of CUlaunchAttribute
 */
struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue_v1 {
  struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue __pyx_base;
};


/* "cuda/cuda.pxd":4179
 *     pass
 * 
 * cdef class CUstreamAttrValue(CUstreamAttrValue_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Launch attributes union; used as value field of CUlaunchAttribute
 */
struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue {
  struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4234
 *     pass
 * 
 * cdef class CUexecAffinitySmCount_v1(CUexecAffinitySmCount_st):             # <<<<<<<<<<<<<<
 *     """
 *     Value for CU_EXEC_AFFINITY_TYPE_SM_COUNT
 */
struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_v1 {
  struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_st __pyx_base;
};


/* "cuda/cuda.pxd":4251
 *     pass
 * 
 * cdef class CUexecAffinitySmCount(CUexecAffinitySmCount_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Value for CU_EXEC_AFFINITY_TYPE_SM_COUNT
 */
struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount {
  struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4268
 *     pass
 * 
 * cdef class CUexecAffinityParam_v1(CUexecAffinityParam_st):             # <<<<<<<<<<<<<<
 *     """
 *     Execution Affinity Parameters
 */
struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_v1 {
  struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_st __pyx_base;
};


/* "cuda/cuda.pxd":4287
 *     pass
 * 
 * cdef class CUexecAffinityParam(CUexecAffinityParam_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Execution Affinity Parameters
 */
struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam {
  struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4306
 *     pass
 * 
 * cdef class CUlibraryHostUniversalFunctionAndDataTable(CUlibraryHostUniversalFunctionAndDataTable_st):             # <<<<<<<<<<<<<<
 *     """
 *     Attributes
 */
struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable {
  struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st __pyx_base;
};


/* "cuda/cuda.pxd":4327
 *     pass
 * 
 * cdef class CUDA_MEMCPY2D_v2(CUDA_MEMCPY2D_st):             # <<<<<<<<<<<<<<
 *     """
 *     2D memory copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_st __pyx_base;
};


/* "cuda/cuda.pxd":4374
 *     pass
 * 
 * cdef class CUDA_MEMCPY2D(CUDA_MEMCPY2D_v2):             # <<<<<<<<<<<<<<
 *     """
 *     2D memory copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_v2 __pyx_base;
};


/* "cuda/cuda.pxd":4421
 *     pass
 * 
 * cdef class CUDA_MEMCPY3D_v2(CUDA_MEMCPY3D_st):             # <<<<<<<<<<<<<<
 *     """
 *     3D memory copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_st __pyx_base;
};


/* "cuda/cuda.pxd":4487
 *     pass
 * 
 * cdef class CUDA_MEMCPY3D(CUDA_MEMCPY3D_v2):             # <<<<<<<<<<<<<<
 *     """
 *     3D memory copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_v2 __pyx_base;
};


/* "cuda/cuda.pxd":4553
 *     pass
 * 
 * cdef class CUDA_MEMCPY3D_PEER_v1(CUDA_MEMCPY3D_PEER_st):             # <<<<<<<<<<<<<<
 *     """
 *     3D memory cross-context copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st __pyx_base;
};


/* "cuda/cuda.pxd":4620
 *     pass
 * 
 * cdef class CUDA_MEMCPY3D_PEER(CUDA_MEMCPY3D_PEER_v1):             # <<<<<<<<<<<<<<
 *     """
 *     3D memory cross-context copy parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4687
 *     pass
 * 
 * cdef class CUDA_MEMCPY_NODE_PARAMS(CUDA_MEMCPY_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memcpy node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":4710
 *     pass
 * 
 * cdef class CUDA_ARRAY_DESCRIPTOR_v2(CUDA_ARRAY_DESCRIPTOR_st):             # <<<<<<<<<<<<<<
 *     """
 *     Array descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st __pyx_base;
};


/* "cuda/cuda.pxd":4733
 *     pass
 * 
 * cdef class CUDA_ARRAY_DESCRIPTOR(CUDA_ARRAY_DESCRIPTOR_v2):             # <<<<<<<<<<<<<<
 *     """
 *     Array descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2 __pyx_base;
};


/* "cuda/cuda.pxd":4756
 *     pass
 * 
 * cdef class CUDA_ARRAY3D_DESCRIPTOR_v2(CUDA_ARRAY3D_DESCRIPTOR_st):             # <<<<<<<<<<<<<<
 *     """
 *     3D array descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st __pyx_base;
};


/* "cuda/cuda.pxd":4783
 *     pass
 * 
 * cdef class CUDA_ARRAY3D_DESCRIPTOR(CUDA_ARRAY3D_DESCRIPTOR_v2):             # <<<<<<<<<<<<<<
 *     """
 *     3D array descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2 __pyx_base;
};


/* "cuda/cuda.pxd":4810
 *     pass
 * 
 * cdef class CUDA_ARRAY_SPARSE_PROPERTIES_v1(CUDA_ARRAY_SPARSE_PROPERTIES_st):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA array sparse properties
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st __pyx_base;
};


/* "cuda/cuda.pxd":4836
 *     pass
 * 
 * cdef class CUDA_ARRAY_SPARSE_PROPERTIES(CUDA_ARRAY_SPARSE_PROPERTIES_v1):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA array sparse properties
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4862
 *     pass
 * 
 * cdef class CUDA_ARRAY_MEMORY_REQUIREMENTS_v1(CUDA_ARRAY_MEMORY_REQUIREMENTS_st):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA array memory requirements
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st __pyx_base;
};


/* "cuda/cuda.pxd":4883
 *     pass
 * 
 * cdef class CUDA_ARRAY_MEMORY_REQUIREMENTS(CUDA_ARRAY_MEMORY_REQUIREMENTS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA array memory requirements
 */
struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS {
  struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4904
 *     pass
 * 
 * cdef class CUDA_RESOURCE_DESC_v1(CUDA_RESOURCE_DESC_st):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA Resource descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_st __pyx_base;
};


/* "cuda/cuda.pxd":4925
 *     pass
 * 
 * cdef class CUDA_RESOURCE_DESC(CUDA_RESOURCE_DESC_v1):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA Resource descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC {
  struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_v1 __pyx_base;
};


/* "cuda/cuda.pxd":4946
 *     pass
 * 
 * cdef class CUDA_TEXTURE_DESC_v1(CUDA_TEXTURE_DESC_st):             # <<<<<<<<<<<<<<
 *     """
 *     Texture descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_st __pyx_base;
};


/* "cuda/cuda.pxd":4981
 *     pass
 * 
 * cdef class CUDA_TEXTURE_DESC(CUDA_TEXTURE_DESC_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Texture descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC {
  struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5016
 *     pass
 * 
 * cdef class CUDA_RESOURCE_VIEW_DESC_v1(CUDA_RESOURCE_VIEW_DESC_st):             # <<<<<<<<<<<<<<
 *     """
 *     Resource view descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st __pyx_base;
};


/* "cuda/cuda.pxd":5049
 *     pass
 * 
 * cdef class CUDA_RESOURCE_VIEW_DESC(CUDA_RESOURCE_VIEW_DESC_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Resource view descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC {
  struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5082
 *     pass
 * 
 * cdef class CUtensorMap(CUtensorMap_st):             # <<<<<<<<<<<<<<
 *     """
 *     Tensor map descriptor. Requires compiler support for aligning to 64
 */
struct __pyx_obj_4cuda_4cuda_CUtensorMap {
  struct __pyx_obj_4cuda_4cuda_CUtensorMap_st __pyx_base;
};


/* "cuda/cuda.pxd":5100
 *     pass
 * 
 * cdef class CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st):             # <<<<<<<<<<<<<<
 *     """
 *     GPU Direct v3 tokens
 */
struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st __pyx_base;
};


/* "cuda/cuda.pxd":5119
 *     pass
 * 
 * cdef class CUDA_POINTER_ATTRIBUTE_P2P_TOKENS(CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     GPU Direct v3 tokens
 */
struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS {
  struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5138
 *     pass
 * 
 * cdef class CUDA_LAUNCH_PARAMS_v1(CUDA_LAUNCH_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Kernel launch parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":5173
 *     pass
 * 
 * cdef class CUDA_LAUNCH_PARAMS(CUDA_LAUNCH_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Kernel launch parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5208
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st):             # <<<<<<<<<<<<<<
 *     """
 *     External memory handle descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st __pyx_base;
};


/* "cuda/cuda.pxd":5233
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_HANDLE_DESC(CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1):             # <<<<<<<<<<<<<<
 *     """
 *     External memory handle descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5258
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st):             # <<<<<<<<<<<<<<
 *     """
 *     External memory buffer descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st __pyx_base;
};


/* "cuda/cuda.pxd":5281
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_BUFFER_DESC(CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1):             # <<<<<<<<<<<<<<
 *     """
 *     External memory buffer descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5304
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st):             # <<<<<<<<<<<<<<
 *     """
 *     External memory mipmap descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st __pyx_base;
};


/* "cuda/cuda.pxd":5328
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC(CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1):             # <<<<<<<<<<<<<<
 *     """
 *     External memory mipmap descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5352
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st):             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore handle descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st __pyx_base;
};


/* "cuda/cuda.pxd":5375
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC(CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1):             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore handle descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5398
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore signal parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":5426
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS(CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore signal parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5454
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore wait parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":5482
 *     pass
 * 
 * cdef class CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS(CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     External semaphore wait parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5510
 *     pass
 * 
 * cdef class CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore signal node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":5532
 *     pass
 * 
 * cdef class CUDA_EXT_SEM_SIGNAL_NODE_PARAMS(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore signal node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5554
 *     pass
 * 
 * cdef class CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st):             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore signal node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st __pyx_base;
};


/* "cuda/cuda.pxd":5576
 *     pass
 * 
 * cdef class CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1(CUDA_EXT_SEM_WAIT_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore wait node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":5598
 *     pass
 * 
 * cdef class CUDA_EXT_SEM_WAIT_NODE_PARAMS(CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore wait node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5620
 *     pass
 * 
 * cdef class CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2(CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st):             # <<<<<<<<<<<<<<
 *     """
 *     Semaphore wait node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st __pyx_base;
};


/* "cuda/cuda.pxd":5642
 *     pass
 * 
 * cdef class CUmemGenericAllocationHandle:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle {
  PyObject_HEAD
  CUmemGenericAllocationHandle _CUmemGenericAllocationHandle__val;
  CUmemGenericAllocationHandle *_ptr;
};


/* "cuda/cuda.pxd":5654
 *     cdef ccuda.CUmemGenericAllocationHandle* _ptr
 * 
 * cdef class CUarrayMapInfo_v1(CUarrayMapInfo_st):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the CUDA array or CUDA mipmapped array memory mapping
 */
struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_v1 {
  struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_st __pyx_base;
};


/* "cuda/cuda.pxd":5692
 *     pass
 * 
 * cdef class CUarrayMapInfo(CUarrayMapInfo_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the CUDA array or CUDA mipmapped array memory mapping
 */
struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo {
  struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5730
 *     pass
 * 
 * cdef class CUmemLocation_v1(CUmemLocation_st):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies a memory location.
 */
struct __pyx_obj_4cuda_4cuda_CUmemLocation_v1 {
  struct __pyx_obj_4cuda_4cuda_CUmemLocation_st __pyx_base;
};


/* "cuda/cuda.pxd":5749
 *     pass
 * 
 * cdef class CUmemLocation(CUmemLocation_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies a memory location.
 */
struct __pyx_obj_4cuda_4cuda_CUmemLocation {
  struct __pyx_obj_4cuda_4cuda_CUmemLocation_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5768
 *     pass
 * 
 * cdef class CUmemAllocationProp_v1(CUmemAllocationProp_st):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the allocation properties for a allocation.
 */
struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_v1 {
  struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_st __pyx_base;
};


/* "cuda/cuda.pxd":5797
 *     pass
 * 
 * cdef class CUmemAllocationProp(CUmemAllocationProp_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the allocation properties for a allocation.
 */
struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp {
  struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5826
 *     pass
 * 
 * cdef class CUmulticastObjectProp_v1(CUmulticastObjectProp_st):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the properties for a multicast object.
 */
struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_v1 {
  struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_st __pyx_base;
};


/* "cuda/cuda.pxd":5852
 *     pass
 * 
 * cdef class CUmulticastObjectProp(CUmulticastObjectProp_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the properties for a multicast object.
 */
struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp {
  struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5878
 *     pass
 * 
 * cdef class CUmemAccessDesc_v1(CUmemAccessDesc_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memory access descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_v1 {
  struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_st __pyx_base;
};


/* "cuda/cuda.pxd":5897
 *     pass
 * 
 * cdef class CUmemAccessDesc(CUmemAccessDesc_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Memory access descriptor
 */
struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc {
  struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5916
 *     pass
 * 
 * cdef class CUgraphExecUpdateResultInfo_v1(CUgraphExecUpdateResultInfo_st):             # <<<<<<<<<<<<<<
 *     """
 *     Result information returned by cuGraphExecUpdate
 */
struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1 {
  struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_st __pyx_base;
};


/* "cuda/cuda.pxd":5940
 *     pass
 * 
 * cdef class CUgraphExecUpdateResultInfo(CUgraphExecUpdateResultInfo_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Result information returned by cuGraphExecUpdate
 */
struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo {
  struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1 __pyx_base;
};


/* "cuda/cuda.pxd":5964
 *     pass
 * 
 * cdef class CUmemPoolProps_v1(CUmemPoolProps_st):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the properties of allocations made from the pool.
 */
struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_v1 {
  struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_st __pyx_base;
};


/* "cuda/cuda.pxd":5997
 *     pass
 * 
 * cdef class CUmemPoolProps(CUmemPoolProps_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Specifies the properties of allocations made from the pool.
 */
struct __pyx_obj_4cuda_4cuda_CUmemPoolProps {
  struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_v1 __pyx_base;
};


/* "cuda/cuda.pxd":6030
 *     pass
 * 
 * cdef class CUmemPoolPtrExportData_v1(CUmemPoolPtrExportData_st):             # <<<<<<<<<<<<<<
 *     """
 *     Opaque data for exporting a pool allocation
 */
struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_v1 {
  struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_st __pyx_base;
};


/* "cuda/cuda.pxd":6047
 *     pass
 * 
 * cdef class CUmemPoolPtrExportData(CUmemPoolPtrExportData_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Opaque data for exporting a pool allocation
 */
struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData {
  struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_v1 __pyx_base;
};


/* "cuda/cuda.pxd":6064
 *     pass
 * 
 * cdef class CUDA_MEM_ALLOC_NODE_PARAMS_v1(CUDA_MEM_ALLOC_NODE_PARAMS_v1_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memory allocation node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1 {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st __pyx_base;
};


/* "cuda/cuda.pxd":6093
 *     pass
 * 
 * cdef class CUDA_MEM_ALLOC_NODE_PARAMS(CUDA_MEM_ALLOC_NODE_PARAMS_v1):             # <<<<<<<<<<<<<<
 *     """
 *     Memory allocation node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1 __pyx_base;
};


/* "cuda/cuda.pxd":6122
 *     pass
 * 
 * cdef class CUDA_MEM_ALLOC_NODE_PARAMS_v2(CUDA_MEM_ALLOC_NODE_PARAMS_v2_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memory allocation node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2 {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st __pyx_base;
};


/* "cuda/cuda.pxd":6151
 *     pass
 * 
 * cdef class CUDA_MEM_FREE_NODE_PARAMS(CUDA_MEM_FREE_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Memory free node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":6168
 *     pass
 * 
 * cdef class CUDA_CHILD_GRAPH_NODE_PARAMS(CUDA_CHILD_GRAPH_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Child graph node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":6186
 *     pass
 * 
 * cdef class CUDA_EVENT_RECORD_NODE_PARAMS(CUDA_EVENT_RECORD_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Event record node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":6203
 *     pass
 * 
 * cdef class CUDA_EVENT_WAIT_NODE_PARAMS(CUDA_EVENT_WAIT_NODE_PARAMS_st):             # <<<<<<<<<<<<<<
 *     """
 *     Event wait node parameters
 */
struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS {
  struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st __pyx_base;
};


/* "cuda/cuda.pxd":6220
 *     pass
 * 
 * cdef class CUgraphNodeParams(CUgraphNodeParams_st):             # <<<<<<<<<<<<<<
 *     """
 *     Graph node parameters. See cuGraphAddNode.
 */
struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams {
  struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams_st __pyx_base;
};


/* "cuda/cuda.pxd":6269
 *     pass
 * 
 * cdef class CUeglFrame_v1(CUeglFrame_st):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA EGLFrame structure Descriptor - structure defining one frame
 */
struct __pyx_obj_4cuda_4cuda_CUeglFrame_v1 {
  struct __pyx_obj_4cuda_4cuda_CUeglFrame_st __pyx_base;
};


/* "cuda/cuda.pxd":6306
 *     pass
 * 
 * cdef class CUeglFrame(CUeglFrame_v1):             # <<<<<<<<<<<<<<
 *     """
 *     CUDA EGLFrame structure Descriptor - structure defining one frame
 */
struct __pyx_obj_4cuda_4cuda_CUeglFrame {
  struct __pyx_obj_4cuda_4cuda_CUeglFrame_v1 __pyx_base;
};


/* "cuda/cuda.pxd":6343
 *     pass
 * 
 * cdef class cuuint32_t:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_cuuint32_t {
  PyObject_HEAD
  cuuint32_t _cuuint32_t__val;
  cuuint32_t *_ptr;
};


/* "cuda/cuda.pxd":6355
 *     cdef ccuda.cuuint32_t* _ptr
 * 
 * cdef class cuuint64_t:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_cuuint64_t {
  PyObject_HEAD
  cuuint64_t _cuuint64_t__val;
  cuuint64_t *_ptr;
};


/* "cuda/cuda.pxd":6367
 *     cdef ccuda.cuuint64_t* _ptr
 * 
 * cdef class CUdeviceptr_v2:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUdeviceptr_v2 {
  PyObject_HEAD
  CUdeviceptr_v2 _CUdeviceptr_v2__val;
  CUdeviceptr_v2 *_ptr;
};


/* "cuda/cuda.pxd":6381
 *     cdef ccuda.CUdeviceptr_v2* _ptr
 * 
 * cdef class CUdevice_v1:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUdevice_v1 {
  PyObject_HEAD
  CUdevice_v1 _CUdevice_v1__val;
  CUdevice_v1 *_ptr;
};


/* "cuda/cuda.pxd":6395
 *     cdef ccuda.CUdevice_v1* _ptr
 * 
 * cdef class CUtexObject_v1:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUtexObject_v1 {
  PyObject_HEAD
  CUtexObject_v1 _CUtexObject_v1__val;
  CUtexObject_v1 *_ptr;
};


/* "cuda/cuda.pxd":6409
 *     cdef ccuda.CUtexObject_v1* _ptr
 * 
 * cdef class CUsurfObject_v1:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUsurfObject_v1 {
  PyObject_HEAD
  CUsurfObject_v1 _CUsurfObject_v1__val;
  CUsurfObject_v1 *_ptr;
};


/* "cuda/cuda.pxd":6423
 *     cdef ccuda.CUsurfObject_v1* _ptr
 * 
 * cdef class CUmemGenericAllocationHandle_v1:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle_v1 {
  PyObject_HEAD
  CUmemGenericAllocationHandle_v1 _CUmemGenericAllocationHandle_v1__val;
  CUmemGenericAllocationHandle_v1 *_ptr;
};


/* "cuda/cuda.pxd":6435
 *     cdef ccuda.CUmemGenericAllocationHandle_v1* _ptr
 * 
 * cdef class GLenum:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_GLenum {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_GLenum _GLenum__val;
  __pyx_t_4cuda_5ccuda_GLenum *_ptr;
};


/* "cuda/cuda.pxd":6447
 *     cdef ccuda.GLenum* _ptr
 * 
 * cdef class GLuint:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_GLuint {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_GLuint _GLuint__val;
  __pyx_t_4cuda_5ccuda_GLuint *_ptr;
};


/* "cuda/cuda.pxd":6459
 *     cdef ccuda.GLuint* _ptr
 * 
 * cdef class EGLint:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_EGLint {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_EGLint _EGLint__val;
  __pyx_t_4cuda_5ccuda_EGLint *_ptr;
};


/* "cuda/cuda.pxd":6471
 *     cdef ccuda.EGLint* _ptr
 * 
 * cdef class VdpDevice:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_VdpDevice {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_VdpDevice _VdpDevice__val;
  __pyx_t_4cuda_5ccuda_VdpDevice *_ptr;
};


/* "cuda/cuda.pxd":6483
 *     cdef ccuda.VdpDevice* _ptr
 * 
 * cdef class VdpGetProcAddress:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_VdpGetProcAddress {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_VdpGetProcAddress _VdpGetProcAddress__val;
  __pyx_t_4cuda_5ccuda_VdpGetProcAddress *_ptr;
};


/* "cuda/cuda.pxd":6495
 *     cdef ccuda.VdpGetProcAddress* _ptr
 * 
 * cdef class VdpVideoSurface:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_VdpVideoSurface {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_VdpVideoSurface _VdpVideoSurface__val;
  __pyx_t_4cuda_5ccuda_VdpVideoSurface *_ptr;
};


/* "cuda/cuda.pxd":6507
 *     cdef ccuda.VdpVideoSurface* _ptr
 * 
 * cdef class VdpOutputSurface:             # <<<<<<<<<<<<<<
 *     """
 * 
 */
struct __pyx_obj_4cuda_4cuda_VdpOutputSurface {
  PyObject_HEAD
  __pyx_t_4cuda_5ccuda_VdpOutputSurface _VdpOutputSurface__val;
  __pyx_t_4cuda_5ccuda_VdpOutputSurface *_ptr;
};


/* "cuda/_lib/utils.pxd":12
 * from libcpp.vector cimport vector
 * 
 * cdef class HelperKernelParams:             # <<<<<<<<<<<<<<
 *     cdef Py_buffer _pybuffer
 *     cdef bint _pyobj_acquired
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams {
  PyObject_HEAD
  Py_buffer _pybuffer;
  int _pyobj_acquired;
  void **_ckernelParams;
  char *_ckernelParamsData;
  int _length;
  int _malloc_list_created;
};


/* "cuda/_lib/utils.pxd":20
 *     cdef bint _malloc_list_created
 * 
 * cdef class HelperInputVoidPtr:             # <<<<<<<<<<<<<<
 *     cdef Py_buffer _pybuffer
 *     cdef void* _cptr
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr {
  PyObject_HEAD
  Py_buffer _pybuffer;
  void *_cptr;
  int _pyobj_acquired;
};


/* "cuda/_lib/utils.pxd":25
 *     cdef bint _pyobj_acquired
 * 
 * cdef class HelperCUmemPool_attribute:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUmemPool_attribute_enum _attr
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute {
  PyObject_HEAD
  void *_cptr;
  enum CUmemPool_attribute_enum _attr;
  int _is_getter;
  int _int_val;
  struct __pyx_obj_4cuda_4cuda_cuuint64_t *_cuuint64_t_val;
};


/* "cuda/_lib/utils.pxd":34
 *     cdef cuda.cuuint64_t _cuuint64_t_val
 * 
 * cdef class HelperCUmem_range_attribute:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUmem_range_attribute_enum _attr
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute {
  PyObject_HEAD
  void *_cptr;
  enum CUmem_range_attribute_enum _attr;
  size_t _data_size;
  int _int_val;
  int *_int_val_list;
};


/* "cuda/_lib/utils.pxd":43
 *     cdef int* _int_val_list # 32 bit integer array
 * 
 * cdef class HelperCUpointer_attribute:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUpointer_attribute_enum _attr
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute {
  PyObject_HEAD
  void *_cptr;
  enum CUpointer_attribute_enum _attr;
  int _is_getter;
  struct __pyx_obj_4cuda_4cuda_CUcontext *_ctx;
  unsigned int _uint;
  struct __pyx_obj_4cuda_4cuda_CUdeviceptr *_devptr;
  void **_void;
  struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS *_token;
  int _bool;
  unsigned PY_LONG_LONG _ull;
  size_t _size;
  struct __pyx_obj_4cuda_4cuda_CUmemoryPool *_mempool;
};


/* "cuda/_lib/utils.pxd":59
 *     cdef cuda.CUmemoryPool _mempool
 * 
 * cdef class HelperCUgraphMem_attribute:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUgraphMem_attribute_enum _attr
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute {
  PyObject_HEAD
  void *_cptr;
  enum CUgraphMem_attribute_enum _attr;
  int _is_getter;
  struct __pyx_obj_4cuda_4cuda_cuuint64_t *_cuuint64_t_val;
};


/* "cuda/_lib/utils.pxd":67
 *     cdef cuda.cuuint64_t _cuuint64_t_val
 * 
 * cdef class HelperCUjit_option:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUjit_option_enum _attr
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option {
  PyObject_HEAD
  void *_cptr;
  enum CUjit_option_enum _attr;
  unsigned int _uint;
  float _float;
  char *_charstar;
  enum CUjit_target_enum _target;
  enum CUjit_fallback_enum _fallback;
  int _int;
  enum CUjit_cacheMode_enum _cacheMode;
  std::vector<char *>  _charstarstar;
  struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *_voidstarstar;
};


/* "cuda/_lib/utils.pxd":82
 *     cdef InputVoidPtrPtrHelper _voidstarstar # list of addresses
 * 
 * cdef class HelperCUlibraryOption:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUlibraryOption_enum _attr
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption {
  PyObject_HEAD
  void *_cptr;
  enum CUlibraryOption_enum _attr;
  unsigned int _uint;
};


/* "cuda/_lib/utils.pxd":89
 *     cdef unsigned int _uint
 * 
 * cdef class HelperCUmemAllocationHandleType:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUmemAllocationHandleType_enum _type
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType {
  PyObject_HEAD
  void *_cptr;
  enum CUmemAllocationHandleType_enum _type;
  int _int;
  void *_handle;
  unsigned int _d3dkmt_handle;
  struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle *_mem_fabric_handle;
};


/* "cuda/_lib/utils.pxd":99
 *     cdef cuda.CUmemFabricHandle _mem_fabric_handle
 * 
 * cdef class InputVoidPtrPtrHelper:             # <<<<<<<<<<<<<<
 *     cdef void** _cptr
 * 
 */
struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper {
  PyObject_HEAD
  void **_cptr;
};


/* "cuda/_lib/utils.pxd":102
 *     cdef void** _cptr
 * 
 * cdef class HelperCUcoredumpSettings:             # <<<<<<<<<<<<<<
 *     cdef void* _cptr
 *     cdef ccuda.CUcoredumpSettings_enum _attrib
 */
struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings {
  PyObject_HEAD
  void *_cptr;
  enum CUcoredumpSettings_enum _attrib;
  int _is_getter;
  size_t _size;
  int _bool;
  char *_charstar;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #if PY_VERSION_HEX >= 0x030C00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     ((!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #endif
  #define __Pyx_EnterTracing(tstate)  PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate)  PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = __Pyx_PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              __Pyx_PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg // no-op
    #define __Pyx_Arg_XDECREF_VARARGS(arg) // no-op - arg is borrowed
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg // no-op, __Pyx_Arg_FASTCALL is direct and this needs
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)  // no-op - arg was returned from array
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   (Py_TYPE(obj)->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (1)
#elif CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_3
#define __PYX_HAVE_RT_ImportType_proto_3_0_3
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_3(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_3(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_3 {
   __Pyx_ImportType_CheckSize_Error_3_0_3 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_3 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_3 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_3(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_3 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUmemPool_attribute_enum __Pyx_PyInt_As_enum__CUmemPool_attribute_enum(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUmemPool_attribute_enum(enum CUmemPool_attribute_enum value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUmem_range_attribute_enum __Pyx_PyInt_As_enum__CUmem_range_attribute_enum(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUmem_range_attribute_enum(enum CUmem_range_attribute_enum value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUpointer_attribute_enum __Pyx_PyInt_As_enum__CUpointer_attribute_enum(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUpointer_attribute_enum(enum CUpointer_attribute_enum value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUgraphMem_attribute_enum __Pyx_PyInt_As_enum__CUgraphMem_attribute_enum(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUgraphMem_attribute_enum(enum CUgraphMem_attribute_enum value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUjit_option_enum __Pyx_PyInt_As_enum__CUjit_option_enum(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUjit_target_enum __Pyx_PyInt_As_enum__CUjit_target_enum(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUjit_fallback_enum __Pyx_PyInt_As_enum__CUjit_fallback_enum(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUjit_cacheMode_enum __Pyx_PyInt_As_enum__CUjit_cacheMode_enum(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUlibraryOption_enum __Pyx_PyInt_As_enum__CUlibraryOption_enum(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUmemAllocationHandleType_enum __Pyx_PyInt_As_enum__CUmemAllocationHandleType_enum(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUmemAllocationHandleType_enum(enum CUmemAllocationHandleType_enum value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum CUcoredumpSettings_enum __Pyx_PyInt_As_enum__CUcoredumpSettings_enum(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUcoredumpSettings_enum(enum CUcoredumpSettings_enum value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version();
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.stdint" */

/* Module declarations from "cuda.ccuda" */

/* Module declarations from "cuda.cuda" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cuda._lib.param_packer" */

/* Module declarations from "cuda._lib.utils" */
static void *__pyx_f_4cuda_4_lib_5utils_callocWrapper(PyObject *, PyObject *); /*proto*/
static std::vector<char *>  __pyx_convert_vector_from_py_char___2a_(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "cuda._lib.utils"
extern int __pyx_module_is_main_cuda___lib__utils;
int __pyx_module_is_main_cuda___lib__utils = 0;

/* Implementation of "cuda._lib.utils" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_range;
/* #### Code section: string_decls ### */
static const char __pyx_k_t[] = "t";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k__34[] = ".";
static const char __pyx_k__35[] = "*";
static const char __pyx_k__40[] = "?";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_lst[] = "lst";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_attr[] = "attr";
static const char __pyx_k_cptr[] = "cptr";
static const char __pyx_k_cuda[] = "cuda";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_c_int[] = "c_int";
static const char __pyx_k_pyObj[] = "pyObj";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_c_bool[] = "c_bool";
static const char __pyx_k_c_byte[] = "c_byte";
static const char __pyx_k_c_char[] = "c_char";
static const char __pyx_k_c_long[] = "c_long";
static const char __pyx_k_c_uint[] = "c_uint";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_getPtr[] = "getPtr";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sizeof[] = "sizeof";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_c_float[] = "c_float";
static const char __pyx_k_c_short[] = "c_short";
static const char __pyx_k_c_ubyte[] = "c_ubyte";
static const char __pyx_k_c_ulong[] = "c_ulong";
static const char __pyx_k_c_wchar[] = "c_wchar";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_c_double[] = "c_double";
static const char __pyx_k_c_size_t[] = "c_size_t";
static const char __pyx_k_c_ushort[] = "c_ushort";
static const char __pyx_k_c_void_p[] = "c_void_p";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Structure[] = "Structure";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_addressof[] = "addressof";
static const char __pyx_k_cuda_cuda[] = "cuda.cuda";
static const char __pyx_k_data_size[] = "data_size";
static const char __pyx_k_is_getter[] = "is_getter";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_c_longlong[] = "c_longlong";
static const char __pyx_k_init_value[] = "init_value";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_c_ulonglong[] = "c_ulonglong";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_kernelParams[] = "kernelParams";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_max_param_size[] = "max_param_size";
static const char __pyx_k_cuda__lib_utils[] = "cuda._lib.utils";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_supported_types[] = "supported_types";
static const char __pyx_k_Unsupported_type[] = "Unsupported type: ";
static const char __pyx_k_HelperCUjit_option[] = "HelperCUjit_option";
static const char __pyx_k_HelperInputVoidPtr[] = "HelperInputVoidPtr";
static const char __pyx_k_HelperKernelParams[] = "HelperKernelParams";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cuda__lib_utils_pyx[] = "cuda/_lib/utils.pyx";
static const char __pyx_k_HelperCUlibraryOption[] = "HelperCUlibraryOption";
static const char __pyx_k_InputVoidPtrPtrHelper[] = "InputVoidPtrPtrHelper";
static const char __pyx_k_Unsupported_attribute[] = "Unsupported attribute: {}";
static const char __pyx_k_HelperCUcoredumpSettings[] = "HelperCUcoredumpSettings";
static const char __pyx_k_HelperCUmemPool_attribute[] = "HelperCUmemPool_attribute";
static const char __pyx_k_HelperCUpointer_attribute[] = "HelperCUpointer_attribute";
static const char __pyx_k_HelperKernelParams_lambda[] = "HelperKernelParams.<lambda>";
static const char __pyx_k_HelperCUgraphMem_attribute[] = "HelperCUgraphMem_attribute";
static const char __pyx_k_HelperCUmem_range_attribute[] = "HelperCUmem_range_attribute";
static const char __pyx_k_Unsupported_attribute_value[] = "Unsupported attribute value: {}";
static const char __pyx_k_HelperCUcoredumpSettings_size[] = "HelperCUcoredumpSettings.size";
static const char __pyx_k_HelperCUcoredumpSettings_pyObj[] = "HelperCUcoredumpSettings.pyObj";
static const char __pyx_k_Argument_kernelParams_failed_to[] = "Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol";
static const char __pyx_k_HelperCUmemAllocationHandleType[] = "HelperCUmemAllocationHandleType";
static const char __pyx_k_HelperCUmemPool_attribute_pyObj[] = "HelperCUmemPool_attribute.pyObj";
static const char __pyx_k_HelperCUpointer_attribute_pyObj[] = "HelperCUpointer_attribute.pyObj";
static const char __pyx_k_Argument_kernelParams_has_tuples[] = "Argument 'kernelParams' has tuples with different length";
static const char __pyx_k_Argument_kernelParams_is_not_a_v[] = "Argument 'kernelParams' is not a valid type: Tuple[Tuple[Any, ...], Tuple[Any, ...]] or PyObject implimenting Buffer Protocol or Int";
static const char __pyx_k_Failed_to_allocated_length_x_siz[] = "Failed to allocated length x size memory: {}x{}";
static const char __pyx_k_Failed_to_retrieve_buffer_throug[] = "Failed to retrieve buffer through Buffer Protocol";
static const char __pyx_k_HelperCUcoredumpSettings___reduc[] = "HelperCUcoredumpSettings.__reduce_cython__";
static const char __pyx_k_HelperCUcoredumpSettings___setst[] = "HelperCUcoredumpSettings.__setstate_cython__";
static const char __pyx_k_HelperCUgraphMem_attribute___red[] = "HelperCUgraphMem_attribute.__reduce_cython__";
static const char __pyx_k_HelperCUgraphMem_attribute___set[] = "HelperCUgraphMem_attribute.__setstate_cython__";
static const char __pyx_k_HelperCUgraphMem_attribute_pyObj[] = "HelperCUgraphMem_attribute.pyObj";
static const char __pyx_k_HelperCUjit_option___reduce_cyth[] = "HelperCUjit_option.__reduce_cython__";
static const char __pyx_k_HelperCUjit_option___setstate_cy[] = "HelperCUjit_option.__setstate_cython__";
static const char __pyx_k_HelperCUlibraryOption___reduce_c[] = "HelperCUlibraryOption.__reduce_cython__";
static const char __pyx_k_HelperCUlibraryOption___setstate[] = "HelperCUlibraryOption.__setstate_cython__";
static const char __pyx_k_HelperCUmemPool_attribute___redu[] = "HelperCUmemPool_attribute.__reduce_cython__";
static const char __pyx_k_HelperCUmemPool_attribute___sets[] = "HelperCUmemPool_attribute.__setstate_cython__";
static const char __pyx_k_HelperCUmem_range_attribute___re[] = "HelperCUmem_range_attribute.__reduce_cython__";
static const char __pyx_k_HelperCUmem_range_attribute___se[] = "HelperCUmem_range_attribute.__setstate_cython__";
static const char __pyx_k_HelperCUmem_range_attribute_pyOb[] = "HelperCUmem_range_attribute.pyObj";
static const char __pyx_k_HelperCUpointer_attribute___redu[] = "HelperCUpointer_attribute.__reduce_cython__";
static const char __pyx_k_HelperCUpointer_attribute___sets[] = "HelperCUpointer_attribute.__setstate_cython__";
static const char __pyx_k_HelperInputVoidPtr___reduce_cyth[] = "HelperInputVoidPtr.__reduce_cython__";
static const char __pyx_k_HelperInputVoidPtr___setstate_cy[] = "HelperInputVoidPtr.__setstate_cython__";
static const char __pyx_k_HelperKernelParams___reduce_cyth[] = "HelperKernelParams.__reduce_cython__";
static const char __pyx_k_HelperKernelParams___setstate_cy[] = "HelperKernelParams.__setstate_cython__";
static const char __pyx_k_InputVoidPtrPtrHelper___reduce_c[] = "InputVoidPtrPtrHelper.__reduce_cython__";
static const char __pyx_k_InputVoidPtrPtrHelper___setstate[] = "InputVoidPtrPtrHelper.__setstate_cython__";
static const char __pyx_k_Provided_argument_is_of_type_but[] = "Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_HelperCUmemAllocationHandleType_2[] = "HelperCUmemAllocationHandleType.pyObj";
static const char __pyx_k_HelperCUmemAllocationHandleType_3[] = "HelperCUmemAllocationHandleType.__reduce_cython__";
static const char __pyx_k_HelperCUmemAllocationHandleType_4[] = "HelperCUmemAllocationHandleType.__setstate_cython__";
static const char __pyx_k_Provided_argument_is_of_type_but_2[] = "Provided argument is of type {} but expected Type {}, {} or object with Buffer Protocol";
/* #### Code section: decls ### */
static PyObject *__pyx_lambda_funcdef_4cuda_4_lib_5utils_18HelperKernelParams_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self, PyObject *__pyx_v_kernelParams); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_13ckernelParams___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self, PyObject *__pyx_v_ptr); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_data_size); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self, PyObject *__pyx_v_lst); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter); /* proto */
static void __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4size(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_6pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperKernelParams(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperInputVoidPtr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemPool_attribute(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmem_range_attribute(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUpointer_attribute(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUgraphMem_attribute(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUjit_option(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUlibraryOption(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_InputVoidPtrPtrHelper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUcoredumpSettings(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUcontext;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmodule;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUfunction;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlibrary;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUkernel;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUarray;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmipmappedArray;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUtexref;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUsurfref;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUevent;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstream;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphicsResource;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexternalMemory;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexternalSemaphore;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraph;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphNode;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphExec;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemoryPool;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUuserObject;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlinkState;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUeglStreamConnection;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_EGLImageKHR;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_EGLStreamKHR;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_EGLSyncKHR;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUhostFn;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamCallback;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUoccupancyB2DSize;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUuuid_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUipcEventHandle_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUipcMemHandle_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamMemOpWaitValueParams_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamMemOpWriteValueParams_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_union;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUdevprop_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphEdgeData_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct0;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue_union;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchAttribute_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchConfig_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct3;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct4;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct5;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct6;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct7;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct8;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union3;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUtensorMap_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct9;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union4;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct10;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union5;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct11;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union6;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct12;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct13;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct14;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union7;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct15;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct16;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union8;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct17;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct18;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union9;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union10;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemLocation_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_struct19;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemPoolProps_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphNodeParams_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_anon_union12;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUeglFrame_st;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUdeviceptr;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUdevice;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUtexObject;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUsurfObject;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphConditionalHandle;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUuuid;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemFabricHandle;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUipcEventHandle_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUipcEventHandle;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUipcMemHandle_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUipcMemHandle;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUdevprop_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUdevprop;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphEdgeData;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchAttribute;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlaunchConfig;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamAttrValue_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUstreamAttrValue;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUexecAffinityParam;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUtensorMap;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUarrayMapInfo;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemLocation_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemLocation;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemAllocationProp;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemAccessDesc;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemPoolProps_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemPoolProps;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUgraphNodeParams;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUeglFrame_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUeglFrame;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_cuuint32_t;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_cuuint64_t;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUdeviceptr_v2;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUdevice_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUtexObject_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUsurfObject_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle_v1;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_GLenum;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_GLuint;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_EGLint;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_VdpDevice;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_VdpGetProcAddress;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_VdpVideoSurface;
  PyTypeObject *__pyx_ptype_4cuda_4cuda_VdpOutputSurface;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperKernelParams;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUjit_option;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType;
  PyObject *__pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper;
  PyObject *__pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings;
  #endif
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper;
  PyTypeObject *__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings;
  PyObject *__pyx_kp_u_Argument_kernelParams_failed_to;
  PyObject *__pyx_kp_u_Argument_kernelParams_has_tuples;
  PyObject *__pyx_kp_u_Argument_kernelParams_is_not_a_v;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_Enum;
  PyObject *__pyx_kp_u_Failed_to_allocated_length_x_siz;
  PyObject *__pyx_kp_u_Failed_to_retrieve_buffer_throug;
  PyObject *__pyx_n_s_HelperCUcoredumpSettings;
  PyObject *__pyx_n_s_HelperCUcoredumpSettings___reduc;
  PyObject *__pyx_n_s_HelperCUcoredumpSettings___setst;
  PyObject *__pyx_n_s_HelperCUcoredumpSettings_pyObj;
  PyObject *__pyx_n_s_HelperCUcoredumpSettings_size;
  PyObject *__pyx_n_s_HelperCUgraphMem_attribute;
  PyObject *__pyx_n_s_HelperCUgraphMem_attribute___red;
  PyObject *__pyx_n_s_HelperCUgraphMem_attribute___set;
  PyObject *__pyx_n_s_HelperCUgraphMem_attribute_pyObj;
  PyObject *__pyx_n_s_HelperCUjit_option;
  PyObject *__pyx_n_s_HelperCUjit_option___reduce_cyth;
  PyObject *__pyx_n_s_HelperCUjit_option___setstate_cy;
  PyObject *__pyx_n_s_HelperCUlibraryOption;
  PyObject *__pyx_n_s_HelperCUlibraryOption___reduce_c;
  PyObject *__pyx_n_s_HelperCUlibraryOption___setstate;
  PyObject *__pyx_n_s_HelperCUmemAllocationHandleType;
  PyObject *__pyx_n_s_HelperCUmemAllocationHandleType_2;
  PyObject *__pyx_n_s_HelperCUmemAllocationHandleType_3;
  PyObject *__pyx_n_s_HelperCUmemAllocationHandleType_4;
  PyObject *__pyx_n_s_HelperCUmemPool_attribute;
  PyObject *__pyx_n_s_HelperCUmemPool_attribute___redu;
  PyObject *__pyx_n_s_HelperCUmemPool_attribute___sets;
  PyObject *__pyx_n_s_HelperCUmemPool_attribute_pyObj;
  PyObject *__pyx_n_s_HelperCUmem_range_attribute;
  PyObject *__pyx_n_s_HelperCUmem_range_attribute___re;
  PyObject *__pyx_n_s_HelperCUmem_range_attribute___se;
  PyObject *__pyx_n_s_HelperCUmem_range_attribute_pyOb;
  PyObject *__pyx_n_s_HelperCUpointer_attribute;
  PyObject *__pyx_n_s_HelperCUpointer_attribute___redu;
  PyObject *__pyx_n_s_HelperCUpointer_attribute___sets;
  PyObject *__pyx_n_s_HelperCUpointer_attribute_pyObj;
  PyObject *__pyx_n_s_HelperInputVoidPtr;
  PyObject *__pyx_n_s_HelperInputVoidPtr___reduce_cyth;
  PyObject *__pyx_n_s_HelperInputVoidPtr___setstate_cy;
  PyObject *__pyx_n_s_HelperKernelParams;
  PyObject *__pyx_n_s_HelperKernelParams___reduce_cyth;
  PyObject *__pyx_n_s_HelperKernelParams___setstate_cy;
  PyObject *__pyx_n_s_HelperKernelParams_lambda;
  PyObject *__pyx_n_s_InputVoidPtrPtrHelper;
  PyObject *__pyx_n_s_InputVoidPtrPtrHelper___reduce_c;
  PyObject *__pyx_n_s_InputVoidPtrPtrHelper___setstate;
  PyObject *__pyx_n_s_List;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_u_Provided_argument_is_of_type_but;
  PyObject *__pyx_kp_u_Provided_argument_is_of_type_but_2;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_Structure;
  PyObject *__pyx_n_s_Tuple;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_Unsupported_attribute;
  PyObject *__pyx_kp_u_Unsupported_attribute_value;
  PyObject *__pyx_kp_u_Unsupported_type;
  PyObject *__pyx_kp_u__34;
  PyObject *__pyx_n_s__35;
  PyObject *__pyx_n_s__40;
  PyObject *__pyx_n_s_addressof;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_attr;
  PyObject *__pyx_n_s_c_bool;
  PyObject *__pyx_n_s_c_byte;
  PyObject *__pyx_n_s_c_char;
  PyObject *__pyx_n_s_c_double;
  PyObject *__pyx_n_s_c_float;
  PyObject *__pyx_n_s_c_int;
  PyObject *__pyx_n_s_c_long;
  PyObject *__pyx_n_s_c_longlong;
  PyObject *__pyx_n_s_c_short;
  PyObject *__pyx_n_s_c_size_t;
  PyObject *__pyx_n_s_c_ubyte;
  PyObject *__pyx_n_s_c_uint;
  PyObject *__pyx_n_s_c_ulong;
  PyObject *__pyx_n_s_c_ulonglong;
  PyObject *__pyx_n_s_c_ushort;
  PyObject *__pyx_n_s_c_void_p;
  PyObject *__pyx_n_s_c_wchar;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_cptr;
  PyObject *__pyx_n_s_ctypes;
  PyObject *__pyx_n_s_cuda;
  PyObject *__pyx_n_s_cuda__lib_utils;
  PyObject *__pyx_kp_s_cuda__lib_utils_pyx;
  PyObject *__pyx_n_s_cuda_cuda;
  PyObject *__pyx_n_s_data_size;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_enum;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_getPtr;
  PyObject *__pyx_n_u_getPtr;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_idx;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init_value;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_getter;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_kernelParams;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_lst;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_max_param_size;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_ptr;
  PyObject *__pyx_n_s_pyObj;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_sizeof;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_supported_types;
  PyObject *__pyx_n_s_t;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_typing;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_zip;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_1024;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_codeobj__4;
  PyObject *__pyx_codeobj__5;
  PyObject *__pyx_codeobj__7;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_codeobj__9;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__11;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUcontext);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmodule);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUfunction);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlibrary);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUkernel);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmipmappedArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUtexref);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUsurfref);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUevent);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstream);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphicsResource);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexternalMemory);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexternalSemaphore);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraph);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphNode);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExec);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemoryPool);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUuserObject);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlinkState);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUeglStreamConnection);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_EGLImageKHR);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_EGLStreamKHR);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_EGLSyncKHR);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUhostFn);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamCallback);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUoccupancyB2DSize);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUuuid_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUipcEventHandle_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUipcMemHandle_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpWaitValueParams_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpWriteValueParams_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_union);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUdevprop_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphEdgeData_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct0);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue_union);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttribute_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchConfig_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct3);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct4);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct5);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct6);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct7);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct8);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union3);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUtensorMap_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct9);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union4);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct10);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union5);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct11);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union6);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct12);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct13);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct14);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union7);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct15);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct16);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union8);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct17);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct18);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union9);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union10);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemLocation_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_struct19);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolProps_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphNodeParams_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_anon_union12);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUeglFrame_st);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUdeviceptr);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUdevice);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUtexObject);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUsurfObject);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphConditionalHandle);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUuuid);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUipcEventHandle_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUipcEventHandle);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUipcMemHandle_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUipcMemHandle);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUdevprop_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUdevprop);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphEdgeData);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchConfig);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamAttrValue_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUstreamAttrValue);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUtensorMap);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemLocation_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemLocation);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolProps_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolProps);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUgraphNodeParams);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUeglFrame_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUeglFrame);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_cuuint32_t);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_cuuint64_t);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUdeviceptr_v2);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUdevice_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUtexObject_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUsurfObject_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle_v1);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_GLenum);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_GLuint);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_EGLint);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_VdpDevice);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_VdpGetProcAddress);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_VdpVideoSurface);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4cuda_VdpOutputSurface);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperKernelParams);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUjit_option);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper);
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings);
  Py_CLEAR(clear_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Argument_kernelParams_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Argument_kernelParams_has_tuples);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Argument_kernelParams_is_not_a_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Enum);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_allocated_length_x_siz);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_retrieve_buffer_throug);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUcoredumpSettings);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUcoredumpSettings___reduc);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUcoredumpSettings___setst);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUcoredumpSettings_pyObj);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUcoredumpSettings_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUgraphMem_attribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUgraphMem_attribute___red);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUgraphMem_attribute___set);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUgraphMem_attribute_pyObj);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUjit_option);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUjit_option___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUjit_option___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUlibraryOption);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUlibraryOption___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUlibraryOption___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemAllocationHandleType);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemAllocationHandleType_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemAllocationHandleType_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemAllocationHandleType_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemPool_attribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemPool_attribute___redu);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemPool_attribute___sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmemPool_attribute_pyObj);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmem_range_attribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmem_range_attribute___re);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmem_range_attribute___se);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUmem_range_attribute_pyOb);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUpointer_attribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUpointer_attribute___redu);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUpointer_attribute___sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperCUpointer_attribute_pyObj);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperInputVoidPtr);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperInputVoidPtr___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperInputVoidPtr___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperKernelParams);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperKernelParams___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperKernelParams___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_HelperKernelParams_lambda);
  Py_CLEAR(clear_module_state->__pyx_n_s_InputVoidPtrPtrHelper);
  Py_CLEAR(clear_module_state->__pyx_n_s_InputVoidPtrPtrHelper___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_InputVoidPtrPtrHelper___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_List);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Provided_argument_is_of_type_but);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Provided_argument_is_of_type_but_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Structure);
  Py_CLEAR(clear_module_state->__pyx_n_s_Tuple);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unsupported_attribute);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unsupported_attribute_value);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unsupported_type);
  Py_CLEAR(clear_module_state->__pyx_kp_u__34);
  Py_CLEAR(clear_module_state->__pyx_n_s__35);
  Py_CLEAR(clear_module_state->__pyx_n_s__40);
  Py_CLEAR(clear_module_state->__pyx_n_s_addressof);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_attr);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_bool);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_byte);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_char);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_double);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_long);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_longlong);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_short);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_size_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_ubyte);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_uint);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_ulong);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_ulonglong);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_ushort);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_void_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_wchar);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_cptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_ctypes);
  Py_CLEAR(clear_module_state->__pyx_n_s_cuda);
  Py_CLEAR(clear_module_state->__pyx_n_s_cuda__lib_utils);
  Py_CLEAR(clear_module_state->__pyx_kp_s_cuda__lib_utils_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_cuda_cuda);
  Py_CLEAR(clear_module_state->__pyx_n_s_data_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_getPtr);
  Py_CLEAR(clear_module_state->__pyx_n_u_getPtr);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_getter);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_kernelParams);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_lst);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_param_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyObj);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_sizeof);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_supported_types);
  Py_CLEAR(clear_module_state->__pyx_n_s_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_typing);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_zip);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_1024);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__4);
  Py_CLEAR(clear_module_state->__pyx_codeobj__5);
  Py_CLEAR(clear_module_state->__pyx_codeobj__7);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_codeobj__9);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__11);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUcontext);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmodule);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUfunction);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlibrary);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUkernel);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmipmappedArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUtexref);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUsurfref);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUevent);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstream);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphicsResource);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexternalMemory);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexternalSemaphore);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraph);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphNode);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExec);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemoryPool);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUuserObject);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlinkState);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUeglStreamConnection);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_EGLImageKHR);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_EGLStreamKHR);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_EGLSyncKHR);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUhostFn);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamCallback);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUoccupancyB2DSize);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUuuid_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUipcEventHandle_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUipcMemHandle_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpWaitValueParams_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpWriteValueParams_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_union);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUdevprop_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphEdgeData_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct0);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue_union);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttribute_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchConfig_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct3);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct4);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct5);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct6);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct7);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct8);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union3);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUtensorMap_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct9);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union4);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct10);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union5);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct11);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union6);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct12);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct13);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct14);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union7);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct15);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct16);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union8);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct17);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct18);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union9);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union10);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemLocation_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_struct19);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolProps_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphNodeParams_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_anon_union12);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUeglFrame_st);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUdeviceptr);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUdevice);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUtexObject);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUsurfObject);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphConditionalHandle);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUuuid);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUipcEventHandle_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUipcEventHandle);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUipcMemHandle_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUipcMemHandle);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUdevprop_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUdevprop);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphEdgeData);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlaunchConfig);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamAttrValue_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUstreamAttrValue);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUtensorMap);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemLocation_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemLocation);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolProps_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolProps);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUgraphNodeParams);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUeglFrame_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUeglFrame);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_cuuint32_t);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_cuuint64_t);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUdeviceptr_v2);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUdevice_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUtexObject_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUsurfObject_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle_v1);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_GLenum);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_GLuint);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_EGLint);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_VdpDevice);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_VdpGetProcAddress);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_VdpVideoSurface);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4cuda_VdpOutputSurface);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperKernelParams);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUjit_option);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper);
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings);
  Py_VISIT(traverse_module_state->__pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Argument_kernelParams_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Argument_kernelParams_has_tuples);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Argument_kernelParams_is_not_a_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Enum);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_allocated_length_x_siz);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_retrieve_buffer_throug);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUcoredumpSettings);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUcoredumpSettings___reduc);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUcoredumpSettings___setst);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUcoredumpSettings_pyObj);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUcoredumpSettings_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUgraphMem_attribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUgraphMem_attribute___red);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUgraphMem_attribute___set);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUgraphMem_attribute_pyObj);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUjit_option);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUjit_option___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUjit_option___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUlibraryOption);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUlibraryOption___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUlibraryOption___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemAllocationHandleType);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemAllocationHandleType_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemAllocationHandleType_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemAllocationHandleType_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemPool_attribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemPool_attribute___redu);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemPool_attribute___sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmemPool_attribute_pyObj);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmem_range_attribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmem_range_attribute___re);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmem_range_attribute___se);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUmem_range_attribute_pyOb);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUpointer_attribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUpointer_attribute___redu);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUpointer_attribute___sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperCUpointer_attribute_pyObj);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperInputVoidPtr);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperInputVoidPtr___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperInputVoidPtr___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperKernelParams);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperKernelParams___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperKernelParams___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_HelperKernelParams_lambda);
  Py_VISIT(traverse_module_state->__pyx_n_s_InputVoidPtrPtrHelper);
  Py_VISIT(traverse_module_state->__pyx_n_s_InputVoidPtrPtrHelper___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_InputVoidPtrPtrHelper___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_List);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Provided_argument_is_of_type_but);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Provided_argument_is_of_type_but_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Structure);
  Py_VISIT(traverse_module_state->__pyx_n_s_Tuple);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unsupported_attribute);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unsupported_attribute_value);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unsupported_type);
  Py_VISIT(traverse_module_state->__pyx_kp_u__34);
  Py_VISIT(traverse_module_state->__pyx_n_s__35);
  Py_VISIT(traverse_module_state->__pyx_n_s__40);
  Py_VISIT(traverse_module_state->__pyx_n_s_addressof);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_attr);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_bool);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_byte);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_char);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_double);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_long);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_longlong);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_short);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_size_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_ubyte);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_uint);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_ulong);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_ulonglong);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_ushort);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_void_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_wchar);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_cptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_ctypes);
  Py_VISIT(traverse_module_state->__pyx_n_s_cuda);
  Py_VISIT(traverse_module_state->__pyx_n_s_cuda__lib_utils);
  Py_VISIT(traverse_module_state->__pyx_kp_s_cuda__lib_utils_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_cuda_cuda);
  Py_VISIT(traverse_module_state->__pyx_n_s_data_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_getPtr);
  Py_VISIT(traverse_module_state->__pyx_n_u_getPtr);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_getter);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_kernelParams);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_lst);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_param_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyObj);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_sizeof);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_supported_types);
  Py_VISIT(traverse_module_state->__pyx_n_s_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_typing);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_zip);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_1024);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__4);
  Py_VISIT(traverse_module_state->__pyx_codeobj__5);
  Py_VISIT(traverse_module_state->__pyx_codeobj__7);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_codeobj__9);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__11);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_4cuda_4cuda_CUcontext __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUcontext
#define __pyx_ptype_4cuda_4cuda_CUmodule __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmodule
#define __pyx_ptype_4cuda_4cuda_CUfunction __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUfunction
#define __pyx_ptype_4cuda_4cuda_CUlibrary __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlibrary
#define __pyx_ptype_4cuda_4cuda_CUkernel __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUkernel
#define __pyx_ptype_4cuda_4cuda_CUarray __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUarray
#define __pyx_ptype_4cuda_4cuda_CUmipmappedArray __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmipmappedArray
#define __pyx_ptype_4cuda_4cuda_CUtexref __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUtexref
#define __pyx_ptype_4cuda_4cuda_CUsurfref __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUsurfref
#define __pyx_ptype_4cuda_4cuda_CUevent __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUevent
#define __pyx_ptype_4cuda_4cuda_CUstream __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstream
#define __pyx_ptype_4cuda_4cuda_CUgraphicsResource __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphicsResource
#define __pyx_ptype_4cuda_4cuda_CUexternalMemory __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexternalMemory
#define __pyx_ptype_4cuda_4cuda_CUexternalSemaphore __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexternalSemaphore
#define __pyx_ptype_4cuda_4cuda_CUgraph __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraph
#define __pyx_ptype_4cuda_4cuda_CUgraphNode __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphNode
#define __pyx_ptype_4cuda_4cuda_CUgraphExec __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphExec
#define __pyx_ptype_4cuda_4cuda_CUmemoryPool __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemoryPool
#define __pyx_ptype_4cuda_4cuda_CUuserObject __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUuserObject
#define __pyx_ptype_4cuda_4cuda_CUlinkState __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlinkState
#define __pyx_ptype_4cuda_4cuda_CUeglStreamConnection __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUeglStreamConnection
#define __pyx_ptype_4cuda_4cuda_EGLImageKHR __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_EGLImageKHR
#define __pyx_ptype_4cuda_4cuda_EGLStreamKHR __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_EGLStreamKHR
#define __pyx_ptype_4cuda_4cuda_EGLSyncKHR __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_EGLSyncKHR
#define __pyx_ptype_4cuda_4cuda_CUhostFn __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUhostFn
#define __pyx_ptype_4cuda_4cuda_CUstreamCallback __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamCallback
#define __pyx_ptype_4cuda_4cuda_CUoccupancyB2DSize __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUoccupancyB2DSize
#define __pyx_ptype_4cuda_4cuda_CUuuid_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUuuid_st
#define __pyx_ptype_4cuda_4cuda_CUmemFabricHandle_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_st
#define __pyx_ptype_4cuda_4cuda_CUipcEventHandle_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUipcEventHandle_st
#define __pyx_ptype_4cuda_4cuda_CUipcMemHandle_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUipcMemHandle_st
#define __pyx_ptype_4cuda_4cuda_CUstreamMemOpWaitValueParams_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamMemOpWaitValueParams_st
#define __pyx_ptype_4cuda_4cuda_CUstreamMemOpWriteValueParams_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamMemOpWriteValueParams_st
#define __pyx_ptype_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st
#define __pyx_ptype_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st
#define __pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_union __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_union
#define __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st
#define __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st
#define __pyx_ptype_4cuda_4cuda_CUdevprop_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUdevprop_st
#define __pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_st
#define __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st
#define __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st
#define __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st
#define __pyx_ptype_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUgraphEdgeData_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphEdgeData_st
#define __pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap_st
#define __pyx_ptype_4cuda_4cuda_anon_struct0 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct0
#define __pyx_ptype_4cuda_4cuda_anon_struct1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct1
#define __pyx_ptype_4cuda_4cuda_anon_struct2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct2
#define __pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue_union __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue_union
#define __pyx_ptype_4cuda_4cuda_CUlaunchAttribute_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchAttribute_st
#define __pyx_ptype_4cuda_4cuda_CUlaunchConfig_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchConfig_st
#define __pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_st
#define __pyx_ptype_4cuda_4cuda_anon_union2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union2
#define __pyx_ptype_4cuda_4cuda_CUexecAffinityParam_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_st
#define __pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st
#define __pyx_ptype_4cuda_4cuda_anon_struct3 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct3
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st
#define __pyx_ptype_4cuda_4cuda_anon_struct4 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct4
#define __pyx_ptype_4cuda_4cuda_anon_struct5 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct5
#define __pyx_ptype_4cuda_4cuda_anon_struct6 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct6
#define __pyx_ptype_4cuda_4cuda_anon_struct7 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct7
#define __pyx_ptype_4cuda_4cuda_anon_struct8 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct8
#define __pyx_ptype_4cuda_4cuda_anon_union3 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union3
#define __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_st
#define __pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_st
#define __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st
#define __pyx_ptype_4cuda_4cuda_CUtensorMap_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUtensorMap_st
#define __pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_anon_struct9 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct9
#define __pyx_ptype_4cuda_4cuda_anon_union4 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union4
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st
#define __pyx_ptype_4cuda_4cuda_anon_struct10 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct10
#define __pyx_ptype_4cuda_4cuda_anon_union5 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union5
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st
#define __pyx_ptype_4cuda_4cuda_anon_struct11 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct11
#define __pyx_ptype_4cuda_4cuda_anon_union6 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union6
#define __pyx_ptype_4cuda_4cuda_anon_struct12 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct12
#define __pyx_ptype_4cuda_4cuda_anon_struct13 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct13
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_anon_struct14 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct14
#define __pyx_ptype_4cuda_4cuda_anon_union7 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union7
#define __pyx_ptype_4cuda_4cuda_anon_struct15 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct15
#define __pyx_ptype_4cuda_4cuda_anon_struct16 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct16
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st
#define __pyx_ptype_4cuda_4cuda_anon_union8 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union8
#define __pyx_ptype_4cuda_4cuda_anon_struct17 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct17
#define __pyx_ptype_4cuda_4cuda_anon_struct18 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct18
#define __pyx_ptype_4cuda_4cuda_anon_union9 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union9
#define __pyx_ptype_4cuda_4cuda_anon_union10 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union10
#define __pyx_ptype_4cuda_4cuda_CUarrayMapInfo_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_st
#define __pyx_ptype_4cuda_4cuda_CUmemLocation_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemLocation_st
#define __pyx_ptype_4cuda_4cuda_anon_struct19 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_struct19
#define __pyx_ptype_4cuda_4cuda_CUmemAllocationProp_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_st
#define __pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_st
#define __pyx_ptype_4cuda_4cuda_CUmemAccessDesc_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_st
#define __pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_st
#define __pyx_ptype_4cuda_4cuda_CUmemPoolProps_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemPoolProps_st
#define __pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st
#define __pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st
#define __pyx_ptype_4cuda_4cuda_CUgraphNodeParams_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphNodeParams_st
#define __pyx_ptype_4cuda_4cuda_anon_union12 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_anon_union12
#define __pyx_ptype_4cuda_4cuda_CUeglFrame_st __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUeglFrame_st
#define __pyx_ptype_4cuda_4cuda_CUdeviceptr __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUdeviceptr
#define __pyx_ptype_4cuda_4cuda_CUdevice __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUdevice
#define __pyx_ptype_4cuda_4cuda_CUtexObject __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUtexObject
#define __pyx_ptype_4cuda_4cuda_CUsurfObject __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUsurfObject
#define __pyx_ptype_4cuda_4cuda_CUgraphConditionalHandle __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphConditionalHandle
#define __pyx_ptype_4cuda_4cuda_CUuuid __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUuuid
#define __pyx_ptype_4cuda_4cuda_CUmemFabricHandle_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_v1
#define __pyx_ptype_4cuda_4cuda_CUmemFabricHandle __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemFabricHandle
#define __pyx_ptype_4cuda_4cuda_CUipcEventHandle_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUipcEventHandle_v1
#define __pyx_ptype_4cuda_4cuda_CUipcEventHandle __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUipcEventHandle
#define __pyx_ptype_4cuda_4cuda_CUipcMemHandle_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUipcMemHandle_v1
#define __pyx_ptype_4cuda_4cuda_CUipcMemHandle __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUipcMemHandle
#define __pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_v1
#define __pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams
#define __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2
#define __pyx_ptype_4cuda_4cuda_CUdevprop_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUdevprop_v1
#define __pyx_ptype_4cuda_4cuda_CUdevprop __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUdevprop
#define __pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_v1
#define __pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow
#define __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2
#define __pyx_ptype_4cuda_4cuda_CUgraphEdgeData __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphEdgeData
#define __pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap
#define __pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue
#define __pyx_ptype_4cuda_4cuda_CUlaunchAttribute __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchAttribute
#define __pyx_ptype_4cuda_4cuda_CUlaunchConfig __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlaunchConfig
#define __pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue_v1
#define __pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue
#define __pyx_ptype_4cuda_4cuda_CUstreamAttrValue_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamAttrValue_v1
#define __pyx_ptype_4cuda_4cuda_CUstreamAttrValue __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUstreamAttrValue
#define __pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_v1
#define __pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount
#define __pyx_ptype_4cuda_4cuda_CUexecAffinityParam_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_v1
#define __pyx_ptype_4cuda_4cuda_CUexecAffinityParam __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUexecAffinityParam
#define __pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER
#define __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS
#define __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC
#define __pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC
#define __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC
#define __pyx_ptype_4cuda_4cuda_CUtensorMap __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUtensorMap
#define __pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS
#define __pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2
#define __pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle
#define __pyx_ptype_4cuda_4cuda_CUarrayMapInfo_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_v1
#define __pyx_ptype_4cuda_4cuda_CUarrayMapInfo __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUarrayMapInfo
#define __pyx_ptype_4cuda_4cuda_CUmemLocation_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemLocation_v1
#define __pyx_ptype_4cuda_4cuda_CUmemLocation __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemLocation
#define __pyx_ptype_4cuda_4cuda_CUmemAllocationProp_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_v1
#define __pyx_ptype_4cuda_4cuda_CUmemAllocationProp __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemAllocationProp
#define __pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_v1
#define __pyx_ptype_4cuda_4cuda_CUmulticastObjectProp __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp
#define __pyx_ptype_4cuda_4cuda_CUmemAccessDesc_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_v1
#define __pyx_ptype_4cuda_4cuda_CUmemAccessDesc __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemAccessDesc
#define __pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1
#define __pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo
#define __pyx_ptype_4cuda_4cuda_CUmemPoolProps_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemPoolProps_v1
#define __pyx_ptype_4cuda_4cuda_CUmemPoolProps __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemPoolProps
#define __pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_v1
#define __pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData
#define __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1
#define __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2
#define __pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS
#define __pyx_ptype_4cuda_4cuda_CUgraphNodeParams __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUgraphNodeParams
#define __pyx_ptype_4cuda_4cuda_CUeglFrame_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUeglFrame_v1
#define __pyx_ptype_4cuda_4cuda_CUeglFrame __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUeglFrame
#define __pyx_ptype_4cuda_4cuda_cuuint32_t __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_cuuint32_t
#define __pyx_ptype_4cuda_4cuda_cuuint64_t __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_cuuint64_t
#define __pyx_ptype_4cuda_4cuda_CUdeviceptr_v2 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUdeviceptr_v2
#define __pyx_ptype_4cuda_4cuda_CUdevice_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUdevice_v1
#define __pyx_ptype_4cuda_4cuda_CUtexObject_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUtexObject_v1
#define __pyx_ptype_4cuda_4cuda_CUsurfObject_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUsurfObject_v1
#define __pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle_v1 __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle_v1
#define __pyx_ptype_4cuda_4cuda_GLenum __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_GLenum
#define __pyx_ptype_4cuda_4cuda_GLuint __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_GLuint
#define __pyx_ptype_4cuda_4cuda_EGLint __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_EGLint
#define __pyx_ptype_4cuda_4cuda_VdpDevice __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_VdpDevice
#define __pyx_ptype_4cuda_4cuda_VdpGetProcAddress __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_VdpGetProcAddress
#define __pyx_ptype_4cuda_4cuda_VdpVideoSurface __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_VdpVideoSurface
#define __pyx_ptype_4cuda_4cuda_VdpOutputSurface __pyx_mstate_global->__pyx_ptype_4cuda_4cuda_VdpOutputSurface
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_4cuda_4_lib_5utils_HelperKernelParams __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperKernelParams
#define __pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr
#define __pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute
#define __pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute
#define __pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute
#define __pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute
#define __pyx_type_4cuda_4_lib_5utils_HelperCUjit_option __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUjit_option
#define __pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption
#define __pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType
#define __pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper
#define __pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings __pyx_mstate_global->__pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings
#endif
#define __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams
#define __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType
#define __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper
#define __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings __pyx_mstate_global->__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings
#define __pyx_kp_u_Argument_kernelParams_failed_to __pyx_mstate_global->__pyx_kp_u_Argument_kernelParams_failed_to
#define __pyx_kp_u_Argument_kernelParams_has_tuples __pyx_mstate_global->__pyx_kp_u_Argument_kernelParams_has_tuples
#define __pyx_kp_u_Argument_kernelParams_is_not_a_v __pyx_mstate_global->__pyx_kp_u_Argument_kernelParams_is_not_a_v
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_Enum __pyx_mstate_global->__pyx_n_s_Enum
#define __pyx_kp_u_Failed_to_allocated_length_x_siz __pyx_mstate_global->__pyx_kp_u_Failed_to_allocated_length_x_siz
#define __pyx_kp_u_Failed_to_retrieve_buffer_throug __pyx_mstate_global->__pyx_kp_u_Failed_to_retrieve_buffer_throug
#define __pyx_n_s_HelperCUcoredumpSettings __pyx_mstate_global->__pyx_n_s_HelperCUcoredumpSettings
#define __pyx_n_s_HelperCUcoredumpSettings___reduc __pyx_mstate_global->__pyx_n_s_HelperCUcoredumpSettings___reduc
#define __pyx_n_s_HelperCUcoredumpSettings___setst __pyx_mstate_global->__pyx_n_s_HelperCUcoredumpSettings___setst
#define __pyx_n_s_HelperCUcoredumpSettings_pyObj __pyx_mstate_global->__pyx_n_s_HelperCUcoredumpSettings_pyObj
#define __pyx_n_s_HelperCUcoredumpSettings_size __pyx_mstate_global->__pyx_n_s_HelperCUcoredumpSettings_size
#define __pyx_n_s_HelperCUgraphMem_attribute __pyx_mstate_global->__pyx_n_s_HelperCUgraphMem_attribute
#define __pyx_n_s_HelperCUgraphMem_attribute___red __pyx_mstate_global->__pyx_n_s_HelperCUgraphMem_attribute___red
#define __pyx_n_s_HelperCUgraphMem_attribute___set __pyx_mstate_global->__pyx_n_s_HelperCUgraphMem_attribute___set
#define __pyx_n_s_HelperCUgraphMem_attribute_pyObj __pyx_mstate_global->__pyx_n_s_HelperCUgraphMem_attribute_pyObj
#define __pyx_n_s_HelperCUjit_option __pyx_mstate_global->__pyx_n_s_HelperCUjit_option
#define __pyx_n_s_HelperCUjit_option___reduce_cyth __pyx_mstate_global->__pyx_n_s_HelperCUjit_option___reduce_cyth
#define __pyx_n_s_HelperCUjit_option___setstate_cy __pyx_mstate_global->__pyx_n_s_HelperCUjit_option___setstate_cy
#define __pyx_n_s_HelperCUlibraryOption __pyx_mstate_global->__pyx_n_s_HelperCUlibraryOption
#define __pyx_n_s_HelperCUlibraryOption___reduce_c __pyx_mstate_global->__pyx_n_s_HelperCUlibraryOption___reduce_c
#define __pyx_n_s_HelperCUlibraryOption___setstate __pyx_mstate_global->__pyx_n_s_HelperCUlibraryOption___setstate
#define __pyx_n_s_HelperCUmemAllocationHandleType __pyx_mstate_global->__pyx_n_s_HelperCUmemAllocationHandleType
#define __pyx_n_s_HelperCUmemAllocationHandleType_2 __pyx_mstate_global->__pyx_n_s_HelperCUmemAllocationHandleType_2
#define __pyx_n_s_HelperCUmemAllocationHandleType_3 __pyx_mstate_global->__pyx_n_s_HelperCUmemAllocationHandleType_3
#define __pyx_n_s_HelperCUmemAllocationHandleType_4 __pyx_mstate_global->__pyx_n_s_HelperCUmemAllocationHandleType_4
#define __pyx_n_s_HelperCUmemPool_attribute __pyx_mstate_global->__pyx_n_s_HelperCUmemPool_attribute
#define __pyx_n_s_HelperCUmemPool_attribute___redu __pyx_mstate_global->__pyx_n_s_HelperCUmemPool_attribute___redu
#define __pyx_n_s_HelperCUmemPool_attribute___sets __pyx_mstate_global->__pyx_n_s_HelperCUmemPool_attribute___sets
#define __pyx_n_s_HelperCUmemPool_attribute_pyObj __pyx_mstate_global->__pyx_n_s_HelperCUmemPool_attribute_pyObj
#define __pyx_n_s_HelperCUmem_range_attribute __pyx_mstate_global->__pyx_n_s_HelperCUmem_range_attribute
#define __pyx_n_s_HelperCUmem_range_attribute___re __pyx_mstate_global->__pyx_n_s_HelperCUmem_range_attribute___re
#define __pyx_n_s_HelperCUmem_range_attribute___se __pyx_mstate_global->__pyx_n_s_HelperCUmem_range_attribute___se
#define __pyx_n_s_HelperCUmem_range_attribute_pyOb __pyx_mstate_global->__pyx_n_s_HelperCUmem_range_attribute_pyOb
#define __pyx_n_s_HelperCUpointer_attribute __pyx_mstate_global->__pyx_n_s_HelperCUpointer_attribute
#define __pyx_n_s_HelperCUpointer_attribute___redu __pyx_mstate_global->__pyx_n_s_HelperCUpointer_attribute___redu
#define __pyx_n_s_HelperCUpointer_attribute___sets __pyx_mstate_global->__pyx_n_s_HelperCUpointer_attribute___sets
#define __pyx_n_s_HelperCUpointer_attribute_pyObj __pyx_mstate_global->__pyx_n_s_HelperCUpointer_attribute_pyObj
#define __pyx_n_s_HelperInputVoidPtr __pyx_mstate_global->__pyx_n_s_HelperInputVoidPtr
#define __pyx_n_s_HelperInputVoidPtr___reduce_cyth __pyx_mstate_global->__pyx_n_s_HelperInputVoidPtr___reduce_cyth
#define __pyx_n_s_HelperInputVoidPtr___setstate_cy __pyx_mstate_global->__pyx_n_s_HelperInputVoidPtr___setstate_cy
#define __pyx_n_s_HelperKernelParams __pyx_mstate_global->__pyx_n_s_HelperKernelParams
#define __pyx_n_s_HelperKernelParams___reduce_cyth __pyx_mstate_global->__pyx_n_s_HelperKernelParams___reduce_cyth
#define __pyx_n_s_HelperKernelParams___setstate_cy __pyx_mstate_global->__pyx_n_s_HelperKernelParams___setstate_cy
#define __pyx_n_s_HelperKernelParams_lambda __pyx_mstate_global->__pyx_n_s_HelperKernelParams_lambda
#define __pyx_n_s_InputVoidPtrPtrHelper __pyx_mstate_global->__pyx_n_s_InputVoidPtrPtrHelper
#define __pyx_n_s_InputVoidPtrPtrHelper___reduce_c __pyx_mstate_global->__pyx_n_s_InputVoidPtrPtrHelper___reduce_c
#define __pyx_n_s_InputVoidPtrPtrHelper___setstate __pyx_mstate_global->__pyx_n_s_InputVoidPtrPtrHelper___setstate
#define __pyx_n_s_List __pyx_mstate_global->__pyx_n_s_List
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_u_Provided_argument_is_of_type_but __pyx_mstate_global->__pyx_kp_u_Provided_argument_is_of_type_but
#define __pyx_kp_u_Provided_argument_is_of_type_but_2 __pyx_mstate_global->__pyx_kp_u_Provided_argument_is_of_type_but_2
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_Structure __pyx_mstate_global->__pyx_n_s_Structure
#define __pyx_n_s_Tuple __pyx_mstate_global->__pyx_n_s_Tuple
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_Unsupported_attribute __pyx_mstate_global->__pyx_kp_u_Unsupported_attribute
#define __pyx_kp_u_Unsupported_attribute_value __pyx_mstate_global->__pyx_kp_u_Unsupported_attribute_value
#define __pyx_kp_u_Unsupported_type __pyx_mstate_global->__pyx_kp_u_Unsupported_type
#define __pyx_kp_u__34 __pyx_mstate_global->__pyx_kp_u__34
#define __pyx_n_s__35 __pyx_mstate_global->__pyx_n_s__35
#define __pyx_n_s__40 __pyx_mstate_global->__pyx_n_s__40
#define __pyx_n_s_addressof __pyx_mstate_global->__pyx_n_s_addressof
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_attr __pyx_mstate_global->__pyx_n_s_attr
#define __pyx_n_s_c_bool __pyx_mstate_global->__pyx_n_s_c_bool
#define __pyx_n_s_c_byte __pyx_mstate_global->__pyx_n_s_c_byte
#define __pyx_n_s_c_char __pyx_mstate_global->__pyx_n_s_c_char
#define __pyx_n_s_c_double __pyx_mstate_global->__pyx_n_s_c_double
#define __pyx_n_s_c_float __pyx_mstate_global->__pyx_n_s_c_float
#define __pyx_n_s_c_int __pyx_mstate_global->__pyx_n_s_c_int
#define __pyx_n_s_c_long __pyx_mstate_global->__pyx_n_s_c_long
#define __pyx_n_s_c_longlong __pyx_mstate_global->__pyx_n_s_c_longlong
#define __pyx_n_s_c_short __pyx_mstate_global->__pyx_n_s_c_short
#define __pyx_n_s_c_size_t __pyx_mstate_global->__pyx_n_s_c_size_t
#define __pyx_n_s_c_ubyte __pyx_mstate_global->__pyx_n_s_c_ubyte
#define __pyx_n_s_c_uint __pyx_mstate_global->__pyx_n_s_c_uint
#define __pyx_n_s_c_ulong __pyx_mstate_global->__pyx_n_s_c_ulong
#define __pyx_n_s_c_ulonglong __pyx_mstate_global->__pyx_n_s_c_ulonglong
#define __pyx_n_s_c_ushort __pyx_mstate_global->__pyx_n_s_c_ushort
#define __pyx_n_s_c_void_p __pyx_mstate_global->__pyx_n_s_c_void_p
#define __pyx_n_s_c_wchar __pyx_mstate_global->__pyx_n_s_c_wchar
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_cptr __pyx_mstate_global->__pyx_n_s_cptr
#define __pyx_n_s_ctypes __pyx_mstate_global->__pyx_n_s_ctypes
#define __pyx_n_s_cuda __pyx_mstate_global->__pyx_n_s_cuda
#define __pyx_n_s_cuda__lib_utils __pyx_mstate_global->__pyx_n_s_cuda__lib_utils
#define __pyx_kp_s_cuda__lib_utils_pyx __pyx_mstate_global->__pyx_kp_s_cuda__lib_utils_pyx
#define __pyx_n_s_cuda_cuda __pyx_mstate_global->__pyx_n_s_cuda_cuda
#define __pyx_n_s_data_size __pyx_mstate_global->__pyx_n_s_data_size
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_enum __pyx_mstate_global->__pyx_n_s_enum
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_getPtr __pyx_mstate_global->__pyx_n_s_getPtr
#define __pyx_n_u_getPtr __pyx_mstate_global->__pyx_n_u_getPtr
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_idx __pyx_mstate_global->__pyx_n_s_idx
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init_value __pyx_mstate_global->__pyx_n_s_init_value
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_getter __pyx_mstate_global->__pyx_n_s_is_getter
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_kernelParams __pyx_mstate_global->__pyx_n_s_kernelParams
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_lst __pyx_mstate_global->__pyx_n_s_lst
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_max_param_size __pyx_mstate_global->__pyx_n_s_max_param_size
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_ptr __pyx_mstate_global->__pyx_n_s_ptr
#define __pyx_n_s_pyObj __pyx_mstate_global->__pyx_n_s_pyObj
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_sizeof __pyx_mstate_global->__pyx_n_s_sizeof
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_supported_types __pyx_mstate_global->__pyx_n_s_supported_types
#define __pyx_n_s_t __pyx_mstate_global->__pyx_n_s_t
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_typing __pyx_mstate_global->__pyx_n_s_typing
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_zip __pyx_mstate_global->__pyx_n_s_zip
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_1024 __pyx_mstate_global->__pyx_int_1024
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_codeobj__4 __pyx_mstate_global->__pyx_codeobj__4
#define __pyx_codeobj__5 __pyx_mstate_global->__pyx_codeobj__5
#define __pyx_codeobj__7 __pyx_mstate_global->__pyx_codeobj__7
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_codeobj__9 __pyx_mstate_global->__pyx_codeobj__9
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__11 __pyx_mstate_global->__pyx_codeobj__11
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
/* #### Code section: module_code ### */

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_char___2a_")
 * cdef vector[X] __pyx_convert_vector_from_py_char___2a_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<char *>  __pyx_convert_vector_from_py_char___2a_(PyObject *__pyx_v_o) {
  std::vector<char *>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<char *>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_char___2a_", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_char___2a_(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_item); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((char *)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_char___2a_(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_char___2a_")
 * cdef vector[X] __pyx_convert_vector_from_py_char___2a_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_char___2a_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":22
 * ctypedef unsigned long long void_ptr
 * 
 * cdef void* callocWrapper(length, size):             # <<<<<<<<<<<<<<
 *     cdef void* out = calloc(length, size)
 *     if out is NULL:
 */

static void *__pyx_f_4cuda_4_lib_5utils_callocWrapper(PyObject *__pyx_v_length, PyObject *__pyx_v_size) {
  void *__pyx_v_out;
  void *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("callocWrapper", 1);
  __Pyx_TraceCall("callocWrapper", __pyx_f[0], 22, 0, __PYX_ERR(0, 22, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":23
 * 
 * cdef void* callocWrapper(length, size):
 *     cdef void* out = calloc(length, size)             # <<<<<<<<<<<<<<
 *     if out is NULL:
 *         raise MemoryError('Failed to allocated length x size memory: {}x{}'.format(length, size))
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_length); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_size); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_v_out = calloc(__pyx_t_1, __pyx_t_2);

  /* "cuda/_lib/utils.pyx":24
 * cdef void* callocWrapper(length, size):
 *     cdef void* out = calloc(length, size)
 *     if out is NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError('Failed to allocated length x size memory: {}x{}'.format(length, size))
 *     return out
 */
  __pyx_t_3 = (__pyx_v_out == NULL);
  if (unlikely(__pyx_t_3)) {

    /* "cuda/_lib/utils.pyx":25
 *     cdef void* out = calloc(length, size)
 *     if out is NULL:
 *         raise MemoryError('Failed to allocated length x size memory: {}x{}'.format(length, size))             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Failed_to_allocated_length_x_siz, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_length, __pyx_v_size};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_MemoryError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 25, __pyx_L1_error)

    /* "cuda/_lib/utils.pyx":24
 * cdef void* callocWrapper(length, size):
 *     cdef void* out = calloc(length, size)
 *     if out is NULL:             # <<<<<<<<<<<<<<
 *         raise MemoryError('Failed to allocated length x size memory: {}x{}'.format(length, size))
 *     return out
 */
  }

  /* "cuda/_lib/utils.pyx":26
 *     if out is NULL:
 *         raise MemoryError('Failed to allocated length x size memory: {}x{}'.format(length, size))
 *     return out             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperKernelParams:
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":22
 * ctypedef unsigned long long void_ptr
 * 
 * cdef void* callocWrapper(length, size):             # <<<<<<<<<<<<<<
 *     cdef void* out = calloc(length, size)
 *     if out is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cuda._lib.utils.callocWrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":48
 *     }
 * 
 *     max_param_size = max(ctypes.sizeof(max(HelperKernelParams.supported_types, key=lambda t:ctypes.sizeof(t))), sizeof(void_ptr))             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, kernelParams):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_4lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_18HelperKernelParams_4lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_4lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_4lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 48, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 48, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_4cuda_4_lib_5utils_18HelperKernelParams_lambda(__pyx_self, __pyx_v_t);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_4cuda_4_lib_5utils_18HelperKernelParams_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 1);
  __Pyx_TraceCall("lambda", __pyx_f[0], 48, 0, __PYX_ERR(0, 48, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sizeof); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":50
 *     max_param_size = max(ctypes.sizeof(max(HelperKernelParams.supported_types, key=lambda t:ctypes.sizeof(t))), sizeof(void_ptr))
 * 
 *     def __cinit__(self, kernelParams):             # <<<<<<<<<<<<<<
 *         self._pyobj_acquired = False
 *         self._malloc_list_created = False
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kernelParams = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kernelParams,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_kernelParams)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 50, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 50, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_kernelParams = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 50, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *)__pyx_v_self), __pyx_v_kernelParams);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self, PyObject *__pyx_v_kernelParams) {
  int __pyx_v_err_buffer;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_data_idx = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_ctype = NULL;
  PyObject *__pyx_v_size = NULL;
  void *__pyx_v_addr;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  void *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  size_t __pyx_t_17;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 50, 0, __PYX_ERR(0, 50, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":51
 * 
 *     def __cinit__(self, kernelParams):
 *         self._pyobj_acquired = False             # <<<<<<<<<<<<<<
 *         self._malloc_list_created = False
 *         if kernelParams is None:
 */
  __pyx_v_self->_pyobj_acquired = 0;

  /* "cuda/_lib/utils.pyx":52
 *     def __cinit__(self, kernelParams):
 *         self._pyobj_acquired = False
 *         self._malloc_list_created = False             # <<<<<<<<<<<<<<
 *         if kernelParams is None:
 *             self._ckernelParams = NULL
 */
  __pyx_v_self->_malloc_list_created = 0;

  /* "cuda/_lib/utils.pyx":53
 *         self._pyobj_acquired = False
 *         self._malloc_list_created = False
 *         if kernelParams is None:             # <<<<<<<<<<<<<<
 *             self._ckernelParams = NULL
 *         elif isinstance(kernelParams, (int)):
 */
  __pyx_t_1 = (__pyx_v_kernelParams == Py_None);
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":54
 *         self._malloc_list_created = False
 *         if kernelParams is None:
 *             self._ckernelParams = NULL             # <<<<<<<<<<<<<<
 *         elif isinstance(kernelParams, (int)):
 *             # Easy run, user gave us an already configured void** address
 */
    __pyx_v_self->_ckernelParams = NULL;

    /* "cuda/_lib/utils.pyx":53
 *         self._pyobj_acquired = False
 *         self._malloc_list_created = False
 *         if kernelParams is None:             # <<<<<<<<<<<<<<
 *             self._ckernelParams = NULL
 *         elif isinstance(kernelParams, (int)):
 */
    goto __pyx_L3;
  }

  /* "cuda/_lib/utils.pyx":55
 *         if kernelParams is None:
 *             self._ckernelParams = NULL
 *         elif isinstance(kernelParams, (int)):             # <<<<<<<<<<<<<<
 *             # Easy run, user gave us an already configured void** address
 *             self._ckernelParams = <void**><void_ptr>kernelParams
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_kernelParams); 
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":57
 *         elif isinstance(kernelParams, (int)):
 *             # Easy run, user gave us an already configured void** address
 *             self._ckernelParams = <void**><void_ptr>kernelParams             # <<<<<<<<<<<<<<
 *         elif PyObject_CheckBuffer(kernelParams):
 *             # Easy run, get address from Python Buffer Protocol
 */
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_v_kernelParams); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 57, __pyx_L1_error)
    __pyx_v_self->_ckernelParams = ((void **)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_2));

    /* "cuda/_lib/utils.pyx":55
 *         if kernelParams is None:
 *             self._ckernelParams = NULL
 *         elif isinstance(kernelParams, (int)):             # <<<<<<<<<<<<<<
 *             # Easy run, user gave us an already configured void** address
 *             self._ckernelParams = <void**><void_ptr>kernelParams
 */
    goto __pyx_L3;
  }

  /* "cuda/_lib/utils.pyx":58
 *             # Easy run, user gave us an already configured void** address
 *             self._ckernelParams = <void**><void_ptr>kernelParams
 *         elif PyObject_CheckBuffer(kernelParams):             # <<<<<<<<<<<<<<
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(kernelParams, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 */
  __pyx_t_1 = PyObject_CheckBuffer(__pyx_v_kernelParams);
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":60
 *         elif PyObject_CheckBuffer(kernelParams):
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(kernelParams, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *             if err_buffer == -1:
 *                 raise RuntimeError("Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol")
 */
    __pyx_t_3 = PyObject_GetBuffer(__pyx_v_kernelParams, (&__pyx_v_self->_pybuffer), (PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 60, __pyx_L1_error)
    __pyx_v_err_buffer = __pyx_t_3;

    /* "cuda/_lib/utils.pyx":61
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(kernelParams, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True
 */
    __pyx_t_1 = (__pyx_v_err_buffer == -1L);
    if (unlikely(__pyx_t_1)) {

      /* "cuda/_lib/utils.pyx":62
 *             err_buffer = PyObject_GetBuffer(kernelParams, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:
 *                 raise RuntimeError("Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol")             # <<<<<<<<<<<<<<
 *             self._pyobj_acquired = True
 *             self._ckernelParams = <void**><void_ptr>self._pybuffer.buf
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 62, __pyx_L1_error)

      /* "cuda/_lib/utils.pyx":61
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(kernelParams, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True
 */
    }

    /* "cuda/_lib/utils.pyx":63
 *             if err_buffer == -1:
 *                 raise RuntimeError("Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True             # <<<<<<<<<<<<<<
 *             self._ckernelParams = <void**><void_ptr>self._pybuffer.buf
 *         elif isinstance(kernelParams, (Tuple)) and len(kernelParams) == 2 and isinstance(kernelParams[0], (Tuple)) and isinstance(kernelParams[1], (Tuple)):
 */
    __pyx_v_self->_pyobj_acquired = 1;

    /* "cuda/_lib/utils.pyx":64
 *                 raise RuntimeError("Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True
 *             self._ckernelParams = <void**><void_ptr>self._pybuffer.buf             # <<<<<<<<<<<<<<
 *         elif isinstance(kernelParams, (Tuple)) and len(kernelParams) == 2 and isinstance(kernelParams[0], (Tuple)) and isinstance(kernelParams[1], (Tuple)):
 *             # Hard run, construct and fill out contigues memory using provided kernel values and types based
 */
    __pyx_v_self->_ckernelParams = ((void **)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_pybuffer.buf));

    /* "cuda/_lib/utils.pyx":58
 *             # Easy run, user gave us an already configured void** address
 *             self._ckernelParams = <void**><void_ptr>kernelParams
 *         elif PyObject_CheckBuffer(kernelParams):             # <<<<<<<<<<<<<<
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(kernelParams, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 */
    goto __pyx_L3;
  }

  /* "cuda/_lib/utils.pyx":65
 *             self._pyobj_acquired = True
 *             self._ckernelParams = <void**><void_ptr>self._pybuffer.buf
 *         elif isinstance(kernelParams, (Tuple)) and len(kernelParams) == 2 and isinstance(kernelParams[0], (Tuple)) and isinstance(kernelParams[1], (Tuple)):             # <<<<<<<<<<<<<<
 *             # Hard run, construct and fill out contigues memory using provided kernel values and types based
 *             if len(kernelParams[0]) != len(kernelParams[1]):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_kernelParams, __pyx_t_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyObject_Length(__pyx_v_kernelParams); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_6 == 2);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_kernelParams, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyObject_IsInstance(__pyx_t_4, __pyx_t_7); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_kernelParams, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_IsInstance(__pyx_t_7, __pyx_t_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "cuda/_lib/utils.pyx":67
 *         elif isinstance(kernelParams, (Tuple)) and len(kernelParams) == 2 and isinstance(kernelParams[0], (Tuple)) and isinstance(kernelParams[1], (Tuple)):
 *             # Hard run, construct and fill out contigues memory using provided kernel values and types based
 *             if len(kernelParams[0]) != len(kernelParams[1]):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Argument 'kernelParams' has tuples with different length")
 *             if len(kernelParams[0]) != 0:
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_kernelParams, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_kernelParams, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_6 != __pyx_t_8);
    if (unlikely(__pyx_t_1)) {

      /* "cuda/_lib/utils.pyx":68
 *             # Hard run, construct and fill out contigues memory using provided kernel values and types based
 *             if len(kernelParams[0]) != len(kernelParams[1]):
 *                 raise TypeError("Argument 'kernelParams' has tuples with different length")             # <<<<<<<<<<<<<<
 *             if len(kernelParams[0]) != 0:
 *                 self._length = len(kernelParams[0])
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 68, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 68, __pyx_L1_error)

      /* "cuda/_lib/utils.pyx":67
 *         elif isinstance(kernelParams, (Tuple)) and len(kernelParams) == 2 and isinstance(kernelParams[0], (Tuple)) and isinstance(kernelParams[1], (Tuple)):
 *             # Hard run, construct and fill out contigues memory using provided kernel values and types based
 *             if len(kernelParams[0]) != len(kernelParams[1]):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Argument 'kernelParams' has tuples with different length")
 *             if len(kernelParams[0]) != 0:
 */
    }

    /* "cuda/_lib/utils.pyx":69
 *             if len(kernelParams[0]) != len(kernelParams[1]):
 *                 raise TypeError("Argument 'kernelParams' has tuples with different length")
 *             if len(kernelParams[0]) != 0:             # <<<<<<<<<<<<<<
 *                 self._length = len(kernelParams[0])
 *                 self._ckernelParams = <void**>callocWrapper(len(kernelParams[0]), sizeof(void*))
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_kernelParams, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_8 != 0);
    if (__pyx_t_1) {

      /* "cuda/_lib/utils.pyx":70
 *                 raise TypeError("Argument 'kernelParams' has tuples with different length")
 *             if len(kernelParams[0]) != 0:
 *                 self._length = len(kernelParams[0])             # <<<<<<<<<<<<<<
 *                 self._ckernelParams = <void**>callocWrapper(len(kernelParams[0]), sizeof(void*))
 *                 self._ckernelParamsData = <char*>callocWrapper(len(kernelParams[0]), HelperKernelParams.max_param_size)
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_kernelParams, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_length = __pyx_t_8;

      /* "cuda/_lib/utils.pyx":71
 *             if len(kernelParams[0]) != 0:
 *                 self._length = len(kernelParams[0])
 *                 self._ckernelParams = <void**>callocWrapper(len(kernelParams[0]), sizeof(void*))             # <<<<<<<<<<<<<<
 *                 self._ckernelParamsData = <char*>callocWrapper(len(kernelParams[0]), HelperKernelParams.max_param_size)
 *                 self._malloc_list_created = True
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_kernelParams, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 71, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(void *))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __pyx_f_4cuda_4_lib_5utils_callocWrapper(__pyx_t_4, __pyx_t_7); if (unlikely(__pyx_t_9 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_self->_ckernelParams = ((void **)__pyx_t_9);

      /* "cuda/_lib/utils.pyx":72
 *                 self._length = len(kernelParams[0])
 *                 self._ckernelParams = <void**>callocWrapper(len(kernelParams[0]), sizeof(void*))
 *                 self._ckernelParamsData = <char*>callocWrapper(len(kernelParams[0]), HelperKernelParams.max_param_size)             # <<<<<<<<<<<<<<
 *                 self._malloc_list_created = True
 * 
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_kernelParams, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams), __pyx_n_s_max_param_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __pyx_f_4cuda_4_lib_5utils_callocWrapper(__pyx_t_7, __pyx_t_4); if (unlikely(__pyx_t_9 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_ckernelParamsData = ((char *)__pyx_t_9);

      /* "cuda/_lib/utils.pyx":73
 *                 self._ckernelParams = <void**>callocWrapper(len(kernelParams[0]), sizeof(void*))
 *                 self._ckernelParamsData = <char*>callocWrapper(len(kernelParams[0]), HelperKernelParams.max_param_size)
 *                 self._malloc_list_created = True             # <<<<<<<<<<<<<<
 * 
 *             idx = 0
 */
      __pyx_v_self->_malloc_list_created = 1;

      /* "cuda/_lib/utils.pyx":69
 *             if len(kernelParams[0]) != len(kernelParams[1]):
 *                 raise TypeError("Argument 'kernelParams' has tuples with different length")
 *             if len(kernelParams[0]) != 0:             # <<<<<<<<<<<<<<
 *                 self._length = len(kernelParams[0])
 *                 self._ckernelParams = <void**>callocWrapper(len(kernelParams[0]), sizeof(void*))
 */
    }

    /* "cuda/_lib/utils.pyx":75
 *                 self._malloc_list_created = True
 * 
 *             idx = 0             # <<<<<<<<<<<<<<
 *             data_idx = 0
 *             for value, ctype in zip(kernelParams[0], kernelParams[1]):
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_idx = __pyx_int_0;

    /* "cuda/_lib/utils.pyx":76
 * 
 *             idx = 0
 *             data_idx = 0             # <<<<<<<<<<<<<<
 *             for value, ctype in zip(kernelParams[0], kernelParams[1]):
 *                 if ctype is None:
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_data_idx = __pyx_int_0;

    /* "cuda/_lib/utils.pyx":77
 *             idx = 0
 *             data_idx = 0
 *             for value, ctype in zip(kernelParams[0], kernelParams[1]):             # <<<<<<<<<<<<<<
 *                 if ctype is None:
 *                     # special cases for None
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_kernelParams, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_kernelParams, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_10 = __pyx_t_7; __Pyx_INCREF(__pyx_t_10);
      __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 77, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_10);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 77, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 77, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_10);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 77, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 77, __pyx_L1_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_11(__pyx_t_10);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 77, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 77, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_12);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_13 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_13);
        index = 0; __pyx_t_4 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_4)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_12 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_12)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_12);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 2) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L14_unpacking_done;
        __pyx_L13_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 77, __pyx_L1_error)
        __pyx_L14_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ctype, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "cuda/_lib/utils.pyx":78
 *             data_idx = 0
 *             for value, ctype in zip(kernelParams[0], kernelParams[1]):
 *                 if ctype is None:             # <<<<<<<<<<<<<<
 *                     # special cases for None
 *                     if callable(getattr(value, 'getPtr', None)):
 */
      __pyx_t_1 = (__pyx_v_ctype == Py_None);
      if (__pyx_t_1) {

        /* "cuda/_lib/utils.pyx":80
 *                 if ctype is None:
 *                     # special cases for None
 *                     if callable(getattr(value, 'getPtr', None)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = <void*><void_ptr>value.getPtr()
 *                     elif isinstance(value, (ctypes.Structure)):
 */
        __pyx_t_7 = __Pyx_GetAttr3(__pyx_v_value, __pyx_n_u_getPtr, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_t_7); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (__pyx_t_1) {

          /* "cuda/_lib/utils.pyx":81
 *                     # special cases for None
 *                     if callable(getattr(value, 'getPtr', None)):
 *                         self._ckernelParams[idx] = <void*><void_ptr>value.getPtr()             # <<<<<<<<<<<<<<
 *                     elif isinstance(value, (ctypes.Structure)):
 *                         self._ckernelParams[idx] = <void*><void_ptr>ctypes.addressof(value)
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 81, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_4 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
            __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 81, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_7); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)
          (__pyx_v_self->_ckernelParams[__pyx_t_6]) = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_2));

          /* "cuda/_lib/utils.pyx":80
 *                 if ctype is None:
 *                     # special cases for None
 *                     if callable(getattr(value, 'getPtr', None)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = <void*><void_ptr>value.getPtr()
 *                     elif isinstance(value, (ctypes.Structure)):
 */
          goto __pyx_L16;
        }

        /* "cuda/_lib/utils.pyx":82
 *                     if callable(getattr(value, 'getPtr', None)):
 *                         self._ckernelParams[idx] = <void*><void_ptr>value.getPtr()
 *                     elif isinstance(value, (ctypes.Structure)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = <void*><void_ptr>ctypes.addressof(value)
 *                     elif isinstance(value, (Enum)):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Structure); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_value, __pyx_t_12); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__pyx_t_1) {

          /* "cuda/_lib/utils.pyx":83
 *                         self._ckernelParams[idx] = <void*><void_ptr>value.getPtr()
 *                     elif isinstance(value, (ctypes.Structure)):
 *                         self._ckernelParams[idx] = <void*><void_ptr>ctypes.addressof(value)             # <<<<<<<<<<<<<<
 *                     elif isinstance(value, (Enum)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 83, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_addressof); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_value};
            __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 83, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_12); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L1_error)
          (__pyx_v_self->_ckernelParams[__pyx_t_6]) = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_2));

          /* "cuda/_lib/utils.pyx":82
 *                     if callable(getattr(value, 'getPtr', None)):
 *                         self._ckernelParams[idx] = <void*><void_ptr>value.getPtr()
 *                     elif isinstance(value, (ctypes.Structure)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = <void*><void_ptr>ctypes.addressof(value)
 *                     elif isinstance(value, (Enum)):
 */
          goto __pyx_L16;
        }

        /* "cuda/_lib/utils.pyx":84
 *                     elif isinstance(value, (ctypes.Structure)):
 *                         self._ckernelParams[idx] = <void*><void_ptr>ctypes.addressof(value)
 *                     elif isinstance(value, (Enum)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<int*>self._ckernelParams[idx])[0] = value.value
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Enum); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_value, __pyx_t_12); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (likely(__pyx_t_1)) {

          /* "cuda/_lib/utils.pyx":85
 *                         self._ckernelParams[idx] = <void*><void_ptr>ctypes.addressof(value)
 *                     elif isinstance(value, (Enum)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])             # <<<<<<<<<<<<<<
 *                         (<int*>self._ckernelParams[idx])[0] = value.value
 *                         data_idx += sizeof(int)
 */
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_data_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
          __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
          (__pyx_v_self->_ckernelParams[__pyx_t_15]) = (&(__pyx_v_self->_ckernelParamsData[__pyx_t_6]));

          /* "cuda/_lib/utils.pyx":86
 *                     elif isinstance(value, (Enum)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<int*>self._ckernelParams[idx])[0] = value.value             # <<<<<<<<<<<<<<
 *                         data_idx += sizeof(int)
 *                     else:
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 86, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 86, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 86, __pyx_L1_error)
          (((int *)(__pyx_v_self->_ckernelParams[__pyx_t_6]))[0]) = __pyx_t_3;

          /* "cuda/_lib/utils.pyx":87
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<int*>self._ckernelParams[idx])[0] = value.value
 *                         data_idx += sizeof(int)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(ctypes.Structure), type(ctypes.c_void_p)))
 */
          __pyx_t_12 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 87, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_data_idx, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF_SET(__pyx_v_data_idx, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "cuda/_lib/utils.pyx":84
 *                     elif isinstance(value, (ctypes.Structure)):
 *                         self._ckernelParams[idx] = <void*><void_ptr>ctypes.addressof(value)
 *                     elif isinstance(value, (Enum)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<int*>self._ckernelParams[idx])[0] = value.value
 */
          goto __pyx_L16;
        }

        /* "cuda/_lib/utils.pyx":89
 *                         data_idx += sizeof(int)
 *                     else:
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(ctypes.Structure), type(ctypes.c_void_p)))             # <<<<<<<<<<<<<<
 *                 elif ctype in HelperKernelParams.supported_types:
 *                     self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 */
        /*else*/ {
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Provided_argument_is_of_type_but, __pyx_n_s_format); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 89, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 89, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Structure); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 89, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 89, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 89, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[4] = {__pyx_t_7, ((PyObject *)Py_TYPE(__pyx_v_value)), ((PyObject *)Py_TYPE(__pyx_t_13)), ((PyObject *)Py_TYPE(__pyx_t_16))};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_3, 3+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 89, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_Raise(__pyx_t_12, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __PYX_ERR(0, 89, __pyx_L1_error)
        }
        __pyx_L16:;

        /* "cuda/_lib/utils.pyx":78
 *             data_idx = 0
 *             for value, ctype in zip(kernelParams[0], kernelParams[1]):
 *                 if ctype is None:             # <<<<<<<<<<<<<<
 *                     # special cases for None
 *                     if callable(getattr(value, 'getPtr', None)):
 */
        goto __pyx_L15;
      }

      /* "cuda/_lib/utils.pyx":90
 *                     else:
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(ctypes.Structure), type(ctypes.c_void_p)))
 *                 elif ctype in HelperKernelParams.supported_types:             # <<<<<<<<<<<<<<
 *                     self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 * 
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams), __pyx_n_s_supported_types); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_ctype, __pyx_t_12, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_1) {

        /* "cuda/_lib/utils.pyx":91
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(ctypes.Structure), type(ctypes.c_void_p)))
 *                 elif ctype in HelperKernelParams.supported_types:
 *                     self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])             # <<<<<<<<<<<<<<
 * 
 *                     # handle case where a float is passed as a double
 */
        __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_data_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
        (__pyx_v_self->_ckernelParams[__pyx_t_15]) = (&(__pyx_v_self->_ckernelParamsData[__pyx_t_6]));

        /* "cuda/_lib/utils.pyx":94
 * 
 *                     # handle case where a float is passed as a double
 *                     if ctype == ctypes.c_double and isinstance(value, ctypes.c_float):             # <<<<<<<<<<<<<<
 *                         value = ctype(value.value)
 *                     if not isinstance(value, ctype): # make it a ctype
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_c_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyObject_RichCompare(__pyx_v_ctype, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__pyx_t_5) {
        } else {
          __pyx_t_1 = __pyx_t_5;
          goto __pyx_L18_bool_binop_done;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_c_float); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = __pyx_t_5;
        __pyx_L18_bool_binop_done:;
        if (__pyx_t_1) {

          /* "cuda/_lib/utils.pyx":95
 *                     # handle case where a float is passed as a double
 *                     if ctype == ctypes.c_double and isinstance(value, ctypes.c_float):
 *                         value = ctype(value.value)             # <<<<<<<<<<<<<<
 *                     if not isinstance(value, ctype): # make it a ctype
 *                         size = param_packer.feed(self._ckernelParams[idx], value, ctype)
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 95, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_v_ctype);
          __pyx_t_16 = __pyx_v_ctype; __pyx_t_13 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_12};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 95, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "cuda/_lib/utils.pyx":94
 * 
 *                     # handle case where a float is passed as a double
 *                     if ctype == ctypes.c_double and isinstance(value, ctypes.c_float):             # <<<<<<<<<<<<<<
 *                         value = ctype(value.value)
 *                     if not isinstance(value, ctype): # make it a ctype
 */
        }

        /* "cuda/_lib/utils.pyx":96
 *                     if ctype == ctypes.c_double and isinstance(value, ctypes.c_float):
 *                         value = ctype(value.value)
 *                     if not isinstance(value, ctype): # make it a ctype             # <<<<<<<<<<<<<<
 *                         size = param_packer.feed(self._ckernelParams[idx], value, ctype)
 *                         if size == 0: # feed failed
 */
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_value, __pyx_v_ctype); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 96, __pyx_L1_error)
        __pyx_t_5 = (!__pyx_t_1);
        if (__pyx_t_5) {

          /* "cuda/_lib/utils.pyx":97
 *                         value = ctype(value.value)
 *                     if not isinstance(value, ctype): # make it a ctype
 *                         size = param_packer.feed(self._ckernelParams[idx], value, ctype)             # <<<<<<<<<<<<<<
 *                         if size == 0: # feed failed
 *                             value = ctype(value)
 */
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
          __pyx_t_4 = __Pyx_PyInt_From_int(feed((__pyx_v_self->_ckernelParams[__pyx_t_6]), __pyx_v_value, __pyx_v_ctype)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_XDECREF_SET(__pyx_v_size, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "cuda/_lib/utils.pyx":98
 *                     if not isinstance(value, ctype): # make it a ctype
 *                         size = param_packer.feed(self._ckernelParams[idx], value, ctype)
 *                         if size == 0: # feed failed             # <<<<<<<<<<<<<<
 *                             value = ctype(value)
 *                             size = ctypes.sizeof(ctype)
 */
          __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_size, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 98, __pyx_L1_error)
          if (__pyx_t_5) {

            /* "cuda/_lib/utils.pyx":99
 *                         size = param_packer.feed(self._ckernelParams[idx], value, ctype)
 *                         if size == 0: # feed failed
 *                             value = ctype(value)             # <<<<<<<<<<<<<<
 *                             size = ctypes.sizeof(ctype)
 *                             addr = <void*>(<void_ptr>ctypes.addressof(value))
 */
            __Pyx_INCREF(__pyx_v_ctype);
            __pyx_t_16 = __pyx_v_ctype; __pyx_t_12 = NULL;
            __pyx_t_3 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_3 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_value};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "cuda/_lib/utils.pyx":100
 *                         if size == 0: # feed failed
 *                             value = ctype(value)
 *                             size = ctypes.sizeof(ctype)             # <<<<<<<<<<<<<<
 *                             addr = <void*>(<void_ptr>ctypes.addressof(value))
 *                             memcpy(self._ckernelParams[idx], addr, size)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 100, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_sizeof); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 100, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_16 = NULL;
            __pyx_t_3 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
                __pyx_t_3 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_ctype};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
            __Pyx_DECREF_SET(__pyx_v_size, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "cuda/_lib/utils.pyx":101
 *                             value = ctype(value)
 *                             size = ctypes.sizeof(ctype)
 *                             addr = <void*>(<void_ptr>ctypes.addressof(value))             # <<<<<<<<<<<<<<
 *                             memcpy(self._ckernelParams[idx], addr, size)
 *                     else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 101, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_addressof); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 101, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            __pyx_t_3 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_3 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_value};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_4); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_v_addr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_2));

            /* "cuda/_lib/utils.pyx":102
 *                             size = ctypes.sizeof(ctype)
 *                             addr = <void*>(<void_ptr>ctypes.addressof(value))
 *                             memcpy(self._ckernelParams[idx], addr, size)             # <<<<<<<<<<<<<<
 *                     else:
 *                         size = ctypes.sizeof(ctype)
 */
            __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
            __pyx_t_17 = __Pyx_PyInt_As_size_t(__pyx_v_size); if (unlikely((__pyx_t_17 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
            (void)(memcpy((__pyx_v_self->_ckernelParams[__pyx_t_6]), __pyx_v_addr, __pyx_t_17));

            /* "cuda/_lib/utils.pyx":98
 *                     if not isinstance(value, ctype): # make it a ctype
 *                         size = param_packer.feed(self._ckernelParams[idx], value, ctype)
 *                         if size == 0: # feed failed             # <<<<<<<<<<<<<<
 *                             value = ctype(value)
 *                             size = ctypes.sizeof(ctype)
 */
          }

          /* "cuda/_lib/utils.pyx":96
 *                     if ctype == ctypes.c_double and isinstance(value, ctypes.c_float):
 *                         value = ctype(value.value)
 *                     if not isinstance(value, ctype): # make it a ctype             # <<<<<<<<<<<<<<
 *                         size = param_packer.feed(self._ckernelParams[idx], value, ctype)
 *                         if size == 0: # feed failed
 */
          goto __pyx_L20;
        }

        /* "cuda/_lib/utils.pyx":104
 *                             memcpy(self._ckernelParams[idx], addr, size)
 *                     else:
 *                         size = ctypes.sizeof(ctype)             # <<<<<<<<<<<<<<
 *                         addr = <void*>(<void_ptr>ctypes.addressof(value))
 *                         memcpy(self._ckernelParams[idx], addr, size)
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_sizeof); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_ctype};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __Pyx_XDECREF_SET(__pyx_v_size, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "cuda/_lib/utils.pyx":105
 *                     else:
 *                         size = ctypes.sizeof(ctype)
 *                         addr = <void*>(<void_ptr>ctypes.addressof(value))             # <<<<<<<<<<<<<<
 *                         memcpy(self._ckernelParams[idx], addr, size)
 *                     data_idx += size
 */
          __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 105, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_addressof); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 105, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_value};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_4); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_v_addr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_2));

          /* "cuda/_lib/utils.pyx":106
 *                         size = ctypes.sizeof(ctype)
 *                         addr = <void*>(<void_ptr>ctypes.addressof(value))
 *                         memcpy(self._ckernelParams[idx], addr, size)             # <<<<<<<<<<<<<<
 *                     data_idx += size
 *                 elif ctype == ctypes.c_void_p:
 */
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
          __pyx_t_17 = __Pyx_PyInt_As_size_t(__pyx_v_size); if (unlikely((__pyx_t_17 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
          (void)(memcpy((__pyx_v_self->_ckernelParams[__pyx_t_6]), __pyx_v_addr, __pyx_t_17));
        }
        __pyx_L20:;

        /* "cuda/_lib/utils.pyx":107
 *                         addr = <void*>(<void_ptr>ctypes.addressof(value))
 *                         memcpy(self._ckernelParams[idx], addr, size)
 *                     data_idx += size             # <<<<<<<<<<<<<<
 *                 elif ctype == ctypes.c_void_p:
 *                     # special cases for void_p
 */
        __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_data_idx, __pyx_v_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF_SET(__pyx_v_data_idx, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "cuda/_lib/utils.pyx":90
 *                     else:
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(ctypes.Structure), type(ctypes.c_void_p)))
 *                 elif ctype in HelperKernelParams.supported_types:             # <<<<<<<<<<<<<<
 *                     self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 * 
 */
        goto __pyx_L15;
      }

      /* "cuda/_lib/utils.pyx":108
 *                         memcpy(self._ckernelParams[idx], addr, size)
 *                     data_idx += size
 *                 elif ctype == ctypes.c_void_p:             # <<<<<<<<<<<<<<
 *                     # special cases for void_p
 *                     if isinstance(value, (int, ctypes.c_void_p)):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_ctype, __pyx_t_16, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(__pyx_t_5)) {

        /* "cuda/_lib/utils.pyx":110
 *                 elif ctype == ctypes.c_void_p:
 *                     # special cases for void_p
 *                     if isinstance(value, (int, ctypes.c_void_p)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.value if isinstance(value, (ctypes.c_void_p)) else value
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = PyInt_Check(__pyx_v_value); 
        if (!__pyx_t_1) {
        } else {
          __pyx_t_5 = __pyx_t_1;
          goto __pyx_L23_bool_binop_done;
        }
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_value, __pyx_t_16); 
        __pyx_t_5 = __pyx_t_1;
        __pyx_L23_bool_binop_done:;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (__pyx_t_5) {

          /* "cuda/_lib/utils.pyx":111
 *                     # special cases for void_p
 *                     if isinstance(value, (int, ctypes.c_void_p)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])             # <<<<<<<<<<<<<<
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.value if isinstance(value, (ctypes.c_void_p)) else value
 *                         data_idx += sizeof(void_ptr)
 */
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_data_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
          __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
          (__pyx_v_self->_ckernelParams[__pyx_t_15]) = (&(__pyx_v_self->_ckernelParamsData[__pyx_t_6]));

          /* "cuda/_lib/utils.pyx":112
 *                     if isinstance(value, (int, ctypes.c_void_p)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.value if isinstance(value, (ctypes.c_void_p)) else value             # <<<<<<<<<<<<<<
 *                         data_idx += sizeof(void_ptr)
 *                     elif callable(getattr(value, 'getPtr', None)):
 */
          __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 112, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 112, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_5) {
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_18 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_4); if (unlikely((__pyx_t_18 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_2 = __pyx_t_18;
          } else {
            __pyx_t_18 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_v_value); if (unlikely((__pyx_t_18 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
            __pyx_t_2 = __pyx_t_18;
          }
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
          (((__pyx_t_4cuda_4_lib_5utils_void_ptr *)(__pyx_v_self->_ckernelParams[__pyx_t_6]))[0]) = __pyx_t_2;

          /* "cuda/_lib/utils.pyx":113
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.value if isinstance(value, (ctypes.c_void_p)) else value
 *                         data_idx += sizeof(void_ptr)             # <<<<<<<<<<<<<<
 *                     elif callable(getattr(value, 'getPtr', None)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 */
          __pyx_t_4 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_4cuda_4_lib_5utils_void_ptr))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_16 = PyNumber_InPlaceAdd(__pyx_v_data_idx, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 113, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF_SET(__pyx_v_data_idx, __pyx_t_16);
          __pyx_t_16 = 0;

          /* "cuda/_lib/utils.pyx":110
 *                 elif ctype == ctypes.c_void_p:
 *                     # special cases for void_p
 *                     if isinstance(value, (int, ctypes.c_void_p)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.value if isinstance(value, (ctypes.c_void_p)) else value
 */
          goto __pyx_L22;
        }

        /* "cuda/_lib/utils.pyx":114
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.value if isinstance(value, (ctypes.c_void_p)) else value
 *                         data_idx += sizeof(void_ptr)
 *                     elif callable(getattr(value, 'getPtr', None)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.getPtr()
 */
        __pyx_t_16 = __Pyx_GetAttr3(__pyx_v_value, __pyx_n_u_getPtr, Py_None); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_5 = __Pyx_PyCallable_Check(__pyx_t_16); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (likely(__pyx_t_5)) {

          /* "cuda/_lib/utils.pyx":115
 *                         data_idx += sizeof(void_ptr)
 *                     elif callable(getattr(value, 'getPtr', None)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])             # <<<<<<<<<<<<<<
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.getPtr()
 *                         data_idx += sizeof(void_ptr)
 */
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_data_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
          __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
          (__pyx_v_self->_ckernelParams[__pyx_t_15]) = (&(__pyx_v_self->_ckernelParamsData[__pyx_t_6]));

          /* "cuda/_lib/utils.pyx":116
 *                     elif callable(getattr(value, 'getPtr', None)):
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.getPtr()             # <<<<<<<<<<<<<<
 *                         data_idx += sizeof(void_ptr)
 *                     else:
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
            __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 116, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_16); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L1_error)
          (((__pyx_t_4cuda_4_lib_5utils_void_ptr *)(__pyx_v_self->_ckernelParams[__pyx_t_6]))[0]) = __pyx_t_2;

          /* "cuda/_lib/utils.pyx":117
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.getPtr()
 *                         data_idx += sizeof(void_ptr)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(int), type(ctypes.c_void_p)))
 */
          __pyx_t_16 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_4cuda_4_lib_5utils_void_ptr))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 117, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_data_idx, __pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF_SET(__pyx_v_data_idx, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "cuda/_lib/utils.pyx":114
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.value if isinstance(value, (ctypes.c_void_p)) else value
 *                         data_idx += sizeof(void_ptr)
 *                     elif callable(getattr(value, 'getPtr', None)):             # <<<<<<<<<<<<<<
 *                         self._ckernelParams[idx] = &(self._ckernelParamsData[data_idx])
 *                         (<void_ptr*>self._ckernelParams[idx])[0] = value.getPtr()
 */
          goto __pyx_L22;
        }

        /* "cuda/_lib/utils.pyx":119
 *                         data_idx += sizeof(void_ptr)
 *                     else:
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(int), type(ctypes.c_void_p)))             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise TypeError("Unsupported type: " + str(type(ctype)))
 */
        /*else*/ {
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Provided_argument_is_of_type_but, __pyx_n_s_format); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 119, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 119, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 119, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = NULL;
          __pyx_t_3 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
              __pyx_t_3 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[4] = {__pyx_t_12, ((PyObject *)Py_TYPE(__pyx_v_value)), ((PyObject *)Py_TYPE(((PyObject *)(&PyInt_Type)))), ((PyObject *)Py_TYPE(__pyx_t_13))};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_3, 3+__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 119, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_Raise(__pyx_t_16, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __PYX_ERR(0, 119, __pyx_L1_error)
        }
        __pyx_L22:;

        /* "cuda/_lib/utils.pyx":108
 *                         memcpy(self._ckernelParams[idx], addr, size)
 *                     data_idx += size
 *                 elif ctype == ctypes.c_void_p:             # <<<<<<<<<<<<<<
 *                     # special cases for void_p
 *                     if isinstance(value, (int, ctypes.c_void_p)):
 */
        goto __pyx_L15;
      }

      /* "cuda/_lib/utils.pyx":121
 *                         raise TypeError("Provided argument is of type {} but expected Type {}, {} or CUDA Binding structure with getPtr() attribute".format(type(value), type(int), type(ctypes.c_void_p)))
 *                 else:
 *                     raise TypeError("Unsupported type: " + str(type(ctype)))             # <<<<<<<<<<<<<<
 *                 idx += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_16 = __Pyx_PyObject_Str(((PyObject *)Py_TYPE(__pyx_v_ctype))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_4 = PyNumber_Add(__pyx_kp_u_Unsupported_type, __pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_16, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __PYX_ERR(0, 121, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "cuda/_lib/utils.pyx":122
 *                 else:
 *                     raise TypeError("Unsupported type: " + str(type(ctype)))
 *                 idx += 1             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument 'kernelParams' is not a valid type: Tuple[Tuple[Any, ...], Tuple[Any, ...]] or PyObject implimenting Buffer Protocol or Int")
 */
      __pyx_t_16 = __Pyx_PyInt_AddObjC(__pyx_v_idx, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF_SET(__pyx_v_idx, __pyx_t_16);
      __pyx_t_16 = 0;

      /* "cuda/_lib/utils.pyx":77
 *             idx = 0
 *             data_idx = 0
 *             for value, ctype in zip(kernelParams[0], kernelParams[1]):             # <<<<<<<<<<<<<<
 *                 if ctype is None:
 *                     # special cases for None
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "cuda/_lib/utils.pyx":65
 *             self._pyobj_acquired = True
 *             self._ckernelParams = <void**><void_ptr>self._pybuffer.buf
 *         elif isinstance(kernelParams, (Tuple)) and len(kernelParams) == 2 and isinstance(kernelParams[0], (Tuple)) and isinstance(kernelParams[1], (Tuple)):             # <<<<<<<<<<<<<<
 *             # Hard run, construct and fill out contigues memory using provided kernel values and types based
 *             if len(kernelParams[0]) != len(kernelParams[1]):
 */
    goto __pyx_L3;
  }

  /* "cuda/_lib/utils.pyx":124
 *                 idx += 1
 *         else:
 *             raise TypeError("Argument 'kernelParams' is not a valid type: Tuple[Tuple[Any, ...], Tuple[Any, ...]] or PyObject implimenting Buffer Protocol or Int")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cuda/_lib/utils.pyx":50
 *     max_param_size = max(ctypes.sizeof(max(HelperKernelParams.supported_types, key=lambda t:ctypes.sizeof(t))), sizeof(void_ptr))
 * 
 *     def __cinit__(self, kernelParams):             # <<<<<<<<<<<<<<
 *         self._pyobj_acquired = False
 *         self._malloc_list_created = False
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_data_idx);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_ctype);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":126
 *             raise TypeError("Argument 'kernelParams' is not a valid type: Tuple[Tuple[Any, ...], Tuple[Any, ...]] or PyObject implimenting Buffer Protocol or Int")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 126, 0, __PYX_ERR(0, 126, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":127
 * 
 *     def __dealloc__(self):
 *         if self._pyobj_acquired is True:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&self._pybuffer)
 *         if self._malloc_list_created is True:
 */
  __pyx_t_1 = (__pyx_v_self->_pyobj_acquired == 1);
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":128
 *     def __dealloc__(self):
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)             # <<<<<<<<<<<<<<
 *         if self._malloc_list_created is True:
 *             free(self._ckernelParams)
 */
    PyBuffer_Release((&__pyx_v_self->_pybuffer));

    /* "cuda/_lib/utils.pyx":127
 * 
 *     def __dealloc__(self):
 *         if self._pyobj_acquired is True:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&self._pybuffer)
 *         if self._malloc_list_created is True:
 */
  }

  /* "cuda/_lib/utils.pyx":129
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)
 *         if self._malloc_list_created is True:             # <<<<<<<<<<<<<<
 *             free(self._ckernelParams)
 *             free(self._ckernelParamsData)
 */
  __pyx_t_1 = (__pyx_v_self->_malloc_list_created == 1);
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":130
 *             PyBuffer_Release(&self._pybuffer)
 *         if self._malloc_list_created is True:
 *             free(self._ckernelParams)             # <<<<<<<<<<<<<<
 *             free(self._ckernelParamsData)
 * 
 */
    free(__pyx_v_self->_ckernelParams);

    /* "cuda/_lib/utils.pyx":131
 *         if self._malloc_list_created is True:
 *             free(self._ckernelParams)
 *             free(self._ckernelParamsData)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    free(__pyx_v_self->_ckernelParamsData);

    /* "cuda/_lib/utils.pyx":129
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)
 *         if self._malloc_list_created is True:             # <<<<<<<<<<<<<<
 *             free(self._ckernelParams)
 *             free(self._ckernelParamsData)
 */
  }

  /* "cuda/_lib/utils.pyx":126
 *             raise TypeError("Argument 'kernelParams' is not a valid type: Tuple[Tuple[Any, ...], Tuple[Any, ...]] or PyObject implimenting Buffer Protocol or Int")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperKernelParams.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":133
 *             free(self._ckernelParamsData)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ckernelParams(self):
 *         return <void_ptr>self._ckernelParams
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_13ckernelParams_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_13ckernelParams_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_13ckernelParams___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_13ckernelParams___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 133, 0, __PYX_ERR(0, 133, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":135
 *     @property
 *     def ckernelParams(self):
 *         return <void_ptr>self._ckernelParams             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperInputVoidPtr:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_ckernelParams)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":133
 *             free(self._ckernelParamsData)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ckernelParams(self):
 *         return <void_ptr>self._ckernelParams
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.ckernelParams.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_6__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_18HelperKernelParams_5__reduce_cython__, "HelperKernelParams.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_18HelperKernelParams_6__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_6__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperKernelParams_5__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_6__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_5__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_5__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_8__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_18HelperKernelParams_7__setstate_cython__, "HelperKernelParams.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_18HelperKernelParams_8__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_8__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperKernelParams_7__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_8__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_7__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperKernelParams_7__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperKernelParams.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":138
 * 
 * cdef class HelperInputVoidPtr:
 *     def __cinit__(self, ptr):             # <<<<<<<<<<<<<<
 *         self._pyobj_acquired = False
 *         if ptr is None:
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ptr = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 138, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_ptr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 138, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperInputVoidPtr.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *)__pyx_v_self), __pyx_v_ptr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self, PyObject *__pyx_v_ptr) {
  int __pyx_v_err_buffer;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 138, 0, __PYX_ERR(0, 138, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":139
 * cdef class HelperInputVoidPtr:
 *     def __cinit__(self, ptr):
 *         self._pyobj_acquired = False             # <<<<<<<<<<<<<<
 *         if ptr is None:
 *             self._cptr = NULL
 */
  __pyx_v_self->_pyobj_acquired = 0;

  /* "cuda/_lib/utils.pyx":140
 *     def __cinit__(self, ptr):
 *         self._pyobj_acquired = False
 *         if ptr is None:             # <<<<<<<<<<<<<<
 *             self._cptr = NULL
 *         elif isinstance(ptr, (int)):
 */
  __pyx_t_1 = (__pyx_v_ptr == Py_None);
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":141
 *         self._pyobj_acquired = False
 *         if ptr is None:
 *             self._cptr = NULL             # <<<<<<<<<<<<<<
 *         elif isinstance(ptr, (int)):
 *             # Easy run, user gave us an already configured void** address
 */
    __pyx_v_self->_cptr = NULL;

    /* "cuda/_lib/utils.pyx":140
 *     def __cinit__(self, ptr):
 *         self._pyobj_acquired = False
 *         if ptr is None:             # <<<<<<<<<<<<<<
 *             self._cptr = NULL
 *         elif isinstance(ptr, (int)):
 */
    goto __pyx_L3;
  }

  /* "cuda/_lib/utils.pyx":142
 *         if ptr is None:
 *             self._cptr = NULL
 *         elif isinstance(ptr, (int)):             # <<<<<<<<<<<<<<
 *             # Easy run, user gave us an already configured void** address
 *             self._cptr = <void*><void_ptr>ptr
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_ptr); 
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":144
 *         elif isinstance(ptr, (int)):
 *             # Easy run, user gave us an already configured void** address
 *             self._cptr = <void*><void_ptr>ptr             # <<<<<<<<<<<<<<
 *         elif PyObject_CheckBuffer(ptr):
 *             # Easy run, get address from Python Buffer Protocol
 */
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_v_ptr); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_2));

    /* "cuda/_lib/utils.pyx":142
 *         if ptr is None:
 *             self._cptr = NULL
 *         elif isinstance(ptr, (int)):             # <<<<<<<<<<<<<<
 *             # Easy run, user gave us an already configured void** address
 *             self._cptr = <void*><void_ptr>ptr
 */
    goto __pyx_L3;
  }

  /* "cuda/_lib/utils.pyx":145
 *             # Easy run, user gave us an already configured void** address
 *             self._cptr = <void*><void_ptr>ptr
 *         elif PyObject_CheckBuffer(ptr):             # <<<<<<<<<<<<<<
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(ptr, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 */
  __pyx_t_1 = PyObject_CheckBuffer(__pyx_v_ptr);
  if (likely(__pyx_t_1)) {

    /* "cuda/_lib/utils.pyx":147
 *         elif PyObject_CheckBuffer(ptr):
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(ptr, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *             if err_buffer == -1:
 *                 raise RuntimeError("Failed to retrieve buffer through Buffer Protocol")
 */
    __pyx_t_3 = PyObject_GetBuffer(__pyx_v_ptr, (&__pyx_v_self->_pybuffer), (PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 147, __pyx_L1_error)
    __pyx_v_err_buffer = __pyx_t_3;

    /* "cuda/_lib/utils.pyx":148
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(ptr, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True
 */
    __pyx_t_1 = (__pyx_v_err_buffer == -1L);
    if (unlikely(__pyx_t_1)) {

      /* "cuda/_lib/utils.pyx":149
 *             err_buffer = PyObject_GetBuffer(ptr, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:
 *                 raise RuntimeError("Failed to retrieve buffer through Buffer Protocol")             # <<<<<<<<<<<<<<
 *             self._pyobj_acquired = True
 *             self._cptr = <void*><void_ptr>self._pybuffer.buf
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 149, __pyx_L1_error)

      /* "cuda/_lib/utils.pyx":148
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(ptr, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True
 */
    }

    /* "cuda/_lib/utils.pyx":150
 *             if err_buffer == -1:
 *                 raise RuntimeError("Failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._pybuffer.buf
 *         else:
 */
    __pyx_v_self->_pyobj_acquired = 1;

    /* "cuda/_lib/utils.pyx":151
 *                 raise RuntimeError("Failed to retrieve buffer through Buffer Protocol")
 *             self._pyobj_acquired = True
 *             self._cptr = <void*><void_ptr>self._pybuffer.buf             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Provided argument is of type {} but expected Type {}, {} or object with Buffer Protocol".format(type(ptr), type(None), type(int)))
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_pybuffer.buf));

    /* "cuda/_lib/utils.pyx":145
 *             # Easy run, user gave us an already configured void** address
 *             self._cptr = <void*><void_ptr>ptr
 *         elif PyObject_CheckBuffer(ptr):             # <<<<<<<<<<<<<<
 *             # Easy run, get address from Python Buffer Protocol
 *             err_buffer = PyObject_GetBuffer(ptr, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 */
    goto __pyx_L3;
  }

  /* "cuda/_lib/utils.pyx":153
 *             self._cptr = <void*><void_ptr>self._pybuffer.buf
 *         else:
 *             raise TypeError("Provided argument is of type {} but expected Type {}, {} or object with Buffer Protocol".format(type(ptr), type(None), type(int)))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Provided_argument_is_of_type_but_2, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_3 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_3 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_6, ((PyObject *)Py_TYPE(__pyx_v_ptr)), ((PyObject *)Py_TYPE(Py_None)), ((PyObject *)Py_TYPE(((PyObject *)(&PyInt_Type))))};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_3, 3+__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 153, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cuda/_lib/utils.pyx":138
 * 
 * cdef class HelperInputVoidPtr:
 *     def __cinit__(self, ptr):             # <<<<<<<<<<<<<<
 *         self._pyobj_acquired = False
 *         if ptr is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cuda._lib.utils.HelperInputVoidPtr.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":155
 *             raise TypeError("Provided argument is of type {} but expected Type {}, {} or object with Buffer Protocol".format(type(ptr), type(None), type(int)))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 155, 0, __PYX_ERR(0, 155, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":156
 * 
 *     def __dealloc__(self):
 *         if self._pyobj_acquired is True:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&self._pybuffer)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_pyobj_acquired == 1);
  if (__pyx_t_1) {

    /* "cuda/_lib/utils.pyx":157
 *     def __dealloc__(self):
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    PyBuffer_Release((&__pyx_v_self->_pybuffer));

    /* "cuda/_lib/utils.pyx":156
 * 
 *     def __dealloc__(self):
 *         if self._pyobj_acquired is True:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&self._pybuffer)
 * 
 */
  }

  /* "cuda/_lib/utils.pyx":155
 *             raise TypeError("Provided argument is of type {} but expected Type {}, {} or object with Buffer Protocol".format(type(ptr), type(None), type(int)))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._pyobj_acquired is True:
 *             PyBuffer_Release(&self._pybuffer)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperInputVoidPtr.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":159
 *             PyBuffer_Release(&self._pybuffer)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 159, 0, __PYX_ERR(0, 159, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":161
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUmemPool_attribute:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":159
 *             PyBuffer_Release(&self._pybuffer)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperInputVoidPtr.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_18HelperInputVoidPtr_4__reduce_cython__, "HelperInputVoidPtr.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_18HelperInputVoidPtr_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperInputVoidPtr_4__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_4__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperInputVoidPtr.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_18HelperInputVoidPtr_6__setstate_cython__, "HelperInputVoidPtr.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_18HelperInputVoidPtr_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperInputVoidPtr_6__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperInputVoidPtr.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_6__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperInputVoidPtr_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__8)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperInputVoidPtr.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":164
 * 
 * cdef class HelperCUmemPool_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  PyObject *__pyx_v_init_value = 0;
  PyObject *__pyx_v_is_getter = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,&__pyx_n_s_init_value,&__pyx_n_s_is_getter,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 164, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_getter);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 164, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_attr = values[0];
    __pyx_v_init_value = values[1];
    __pyx_v_is_getter = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 164, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemPool_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)__pyx_v_self), __pyx_v_attr, __pyx_v_init_value, __pyx_v_is_getter);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  enum CUmemPool_attribute_enum __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 164, 0, __PYX_ERR(0, 164, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":165
 * cdef class HelperCUmemPool_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_getter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L1_error)
  __pyx_v_self->_is_getter = __pyx_t_1;

  /* "cuda/_lib/utils.pyx":166
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter
 *         self._attr = attr.value             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((enum CUmemPool_attribute_enum)__Pyx_PyInt_As_enum__CUmemPool_attribute_enum(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->_attr = __pyx_t_3;

  /* "cuda/_lib/utils.pyx":167
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 */
  switch (__pyx_v_self->_attr) {
    case CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES:
    case CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC:

    /* "cuda/_lib/utils.pyx":168
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 *             self._int_val = init_value
 */
    case CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES:

    /* "cuda/_lib/utils.pyx":170
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 *             self._int_val = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._int_val
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_init_value); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
    __pyx_v_self->_int_val = __pyx_t_4;

    /* "cuda/_lib/utils.pyx":171
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 *             self._int_val = init_value
 *             self._cptr = <void*>&self._int_val             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_int_val));

    /* "cuda/_lib/utils.pyx":167
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 */
    break;
    case CU_MEMPOOL_ATTR_RELEASE_THRESHOLD:

    /* "cuda/_lib/utils.pyx":172
 *             self._int_val = init_value
 *             self._cptr = <void*>&self._int_val
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 */
    case CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT:

    /* "cuda/_lib/utils.pyx":173
 *             self._cptr = <void*>&self._int_val
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,
 */
    case CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":174
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 */
    case CU_MEMPOOL_ATTR_USED_MEM_CURRENT:

    /* "cuda/_lib/utils.pyx":175
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 *             if self._is_getter:
 */
    case CU_MEMPOOL_ATTR_USED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":177
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._cuuint64_t_val = cuda.cuuint64_t()
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 */
    if (__pyx_v_self->_is_getter) {

      /* "cuda/_lib/utils.pyx":178
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 *             if self._is_getter:
 *                 self._cuuint64_t_val = cuda.cuuint64_t()             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cuda_4cuda_cuuint64_t)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->_cuuint64_t_val);
      __Pyx_DECREF((PyObject *)__pyx_v_self->_cuuint64_t_val);
      __pyx_v_self->_cuuint64_t_val = ((struct __pyx_obj_4cuda_4cuda_cuuint64_t *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cuda/_lib/utils.pyx":179
 *             if self._is_getter:
 *                 self._cuuint64_t_val = cuda.cuuint64_t()
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_cuuint64_t_val), __pyx_n_s_getPtr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));

      /* "cuda/_lib/utils.pyx":177
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._cuuint64_t_val = cuda.cuuint64_t()
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 */
      goto __pyx_L3;
    }

    /* "cuda/_lib/utils.pyx":181
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));
    }
    __pyx_L3:;

    /* "cuda/_lib/utils.pyx":172
 *             self._int_val = init_value
 *             self._cptr = <void*>&self._int_val
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":183
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 183, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":164
 * 
 * cdef class HelperCUmemPool_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemPool_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":185
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 185, 0, __PYX_ERR(0, 185, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUmemPool_attribute.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":188
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 188, 0, __PYX_ERR(0, 188, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":190
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 *     def pyObj(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":188
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemPool_attribute.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":192
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4pyObj, "HelperCUmemPool_attribute.pyObj(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_5pyObj = {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4pyObj};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyObj (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("pyObj", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "pyObj", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4pyObj(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__9)
  __Pyx_RefNannySetupContext("pyObj", 1);
  __Pyx_TraceCall("pyObj", __pyx_f[0], 192, 0, __PYX_ERR(0, 192, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":193
 * 
 *     def pyObj(self):
 *         assert(self._is_getter == True)             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_self->_is_getter == 1);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 193, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 193, __pyx_L1_error)
  #endif

  /* "cuda/_lib/utils.pyx":194
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 */
  switch (__pyx_v_self->_attr) {
    case CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES:
    case CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC:

    /* "cuda/_lib/utils.pyx":195
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 *             return self._int_val
 */
    case CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES:

    /* "cuda/_lib/utils.pyx":197
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 *             return self._int_val             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_int_val); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":194
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 */
    break;
    case CU_MEMPOOL_ATTR_RELEASE_THRESHOLD:

    /* "cuda/_lib/utils.pyx":198
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 *             return self._int_val
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 */
    case CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT:

    /* "cuda/_lib/utils.pyx":199
 *             return self._int_val
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,
 */
    case CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":200
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 */
    case CU_MEMPOOL_ATTR_USED_MEM_CURRENT:

    /* "cuda/_lib/utils.pyx":201
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 *             return self._cuuint64_t_val
 */
    case CU_MEMPOOL_ATTR_USED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":203
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_USED_MEM_HIGH,):
 *             return self._cuuint64_t_val             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self->_cuuint64_t_val);
    __pyx_r = ((PyObject *)__pyx_v_self->_cuuint64_t_val);
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":198
 *                           ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,):
 *             return self._int_val
 *         elif self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RELEASE_THRESHOLD,             # <<<<<<<<<<<<<<
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT,
 *                             ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH,
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":205
 *             return self._cuuint64_t_val
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUmem_range_attribute:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute_value, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_enum__CUmemPool_attribute_enum(__pyx_v_self->_attr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 205, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":192
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemPool_attribute.pyObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_6__reduce_cython__, "HelperCUmemPool_attribute.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_6__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_6__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__10)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemPool_attribute.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_8__setstate_cython__, "HelperCUmemPool_attribute.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_8__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemPool_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_8__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__11)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemPool_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":208
 * 
 * cdef class HelperCUmem_range_attribute:
 *     def __cinit__(self, attr, data_size):             # <<<<<<<<<<<<<<
 *         self._data_size = data_size
 *         self._attr = attr.value
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  PyObject *__pyx_v_data_size = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,&__pyx_n_s_data_size,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data_size)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 208, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 208, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_attr = values[0];
    __pyx_v_data_size = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 208, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmem_range_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *)__pyx_v_self), __pyx_v_attr, __pyx_v_data_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_data_size) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  enum CUmem_range_attribute_enum __pyx_t_3;
  void *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 208, 0, __PYX_ERR(0, 208, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":209
 * cdef class HelperCUmem_range_attribute:
 *     def __cinit__(self, attr, data_size):
 *         self._data_size = data_size             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_data_size); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_v_self->_data_size = __pyx_t_1;

  /* "cuda/_lib/utils.pyx":210
 *     def __cinit__(self, attr, data_size):
 *         self._data_size = data_size
 *         self._attr = attr.value             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((enum CUmem_range_attribute_enum)__Pyx_PyInt_As_enum__CUmem_range_attribute_enum(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->_attr = __pyx_t_3;

  /* "cuda/_lib/utils.pyx":211
 *         self._data_size = data_size
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 */
  switch (__pyx_v_self->_attr) {
    case CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY:
    case CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION:

    /* "cuda/_lib/utils.pyx":212
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 *             self._cptr = <void*>&self._int_val
 */
    case CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION:

    /* "cuda/_lib/utils.pyx":214
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 *             self._cptr = <void*>&self._int_val             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             self._cptr = callocWrapper(1, self._data_size)
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_int_val));

    /* "cuda/_lib/utils.pyx":211
 *         self._data_size = data_size
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 */
    break;
    case CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY:

    /* "cuda/_lib/utils.pyx":216
 *             self._cptr = <void*>&self._int_val
 *         elif self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             self._cptr = callocWrapper(1, self._data_size)             # <<<<<<<<<<<<<<
 *             self._int_val_list = <int*>self._cptr
 *         else:
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_data_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_f_4cuda_4_lib_5utils_callocWrapper(__pyx_int_1, __pyx_t_2); if (unlikely(__pyx_t_4 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->_cptr = __pyx_t_4;

    /* "cuda/_lib/utils.pyx":217
 *         elif self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             self._cptr = callocWrapper(1, self._data_size)
 *             self._int_val_list = <int*>self._cptr             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    __pyx_v_self->_int_val_list = ((int *)__pyx_v_self->_cptr);

    /* "cuda/_lib/utils.pyx":215
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 *             self._cptr = <void*>&self._int_val
 *         elif self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):             # <<<<<<<<<<<<<<
 *             self._cptr = callocWrapper(1, self._data_size)
 *             self._int_val_list = <int*>self._cptr
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":219
 *             self._int_val_list = <int*>self._cptr
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 219, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":208
 * 
 * cdef class HelperCUmem_range_attribute:
 *     def __cinit__(self, attr, data_size):             # <<<<<<<<<<<<<<
 *         self._data_size = data_size
 *         self._attr = attr.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmem_range_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":221
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             free(self._cptr)
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self) {
  __Pyx_TraceDeclarations
  enum CUmem_range_attribute_enum __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 221, 0, __PYX_ERR(0, 221, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":222
 * 
 *     def __dealloc__(self):
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):             # <<<<<<<<<<<<<<
 *             free(self._cptr)
 * 
 */
  __pyx_t_1 = __pyx_v_self->_attr;
  __pyx_t_2 = (__pyx_t_1 == CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY);
  if (__pyx_t_2) {

    /* "cuda/_lib/utils.pyx":223
 *     def __dealloc__(self):
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             free(self._cptr)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    free(__pyx_v_self->_cptr);

    /* "cuda/_lib/utils.pyx":222
 * 
 *     def __dealloc__(self):
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):             # <<<<<<<<<<<<<<
 *             free(self._cptr)
 * 
 */
  }

  /* "cuda/_lib/utils.pyx":221
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             free(self._cptr)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUmem_range_attribute.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":225
 *             free(self._cptr)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 225, 0, __PYX_ERR(0, 225, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":227
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 *     def pyObj(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":225
 *             free(self._cptr)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmem_range_attribute.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":229
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4pyObj, "HelperCUmem_range_attribute.pyObj(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_5pyObj = {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4pyObj};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyObj (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("pyObj", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "pyObj", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4pyObj(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self) {
  PyObject *__pyx_7genexpr__pyx_v_idx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__12)
  __Pyx_RefNannySetupContext("pyObj", 1);
  __Pyx_TraceCall("pyObj", __pyx_f[0], 229, 0, __PYX_ERR(0, 229, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":230
 * 
 *     def pyObj(self):
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 */
  switch (__pyx_v_self->_attr) {
    case CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY:
    case CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION:

    /* "cuda/_lib/utils.pyx":231
 *     def pyObj(self):
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 *             return self._int_val
 */
    case CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION:

    /* "cuda/_lib/utils.pyx":233
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 *             return self._int_val             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             return [self._int_val_list[idx] for idx in range(int(self._data_size/4))]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_int_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":230
 * 
 *     def pyObj(self):
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,             # <<<<<<<<<<<<<<
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 */
    break;
    case CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY:

    /* "cuda/_lib/utils.pyx":235
 *             return self._int_val
 *         elif self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):
 *             return [self._int_val_list[idx] for idx in range(int(self._data_size/4))]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyInt_FromDouble((((double)__pyx_v_self->_data_size) / 4.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
        __pyx_t_4 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L5_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 235, __pyx_L5_error)
              #endif
              if (__pyx_t_4 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 235, __pyx_L5_error)
            #else
            __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 235, __pyx_L5_error)
              #endif
              if (__pyx_t_4 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 235, __pyx_L5_error)
            #else
            __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_5(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 235, __pyx_L5_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_idx, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_7genexpr__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L5_error)
        __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->_int_val_list[__pyx_t_6])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 235, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_idx); __pyx_7genexpr__pyx_v_idx = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_idx); __pyx_7genexpr__pyx_v_idx = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":234
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION,):
 *             return self._int_val
 *         elif self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY,):             # <<<<<<<<<<<<<<
 *             return [self._int_val_list[idx] for idx in range(int(self._data_size/4))]
 *         else:
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":237
 *             return [self._int_val_list[idx] for idx in range(int(self._data_size/4))]
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUpointer_attribute:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute_value, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_enum__CUmem_range_attribute_enum(__pyx_v_self->_attr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 237, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":229
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmem_range_attribute.pyObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_6__reduce_cython__, "HelperCUmem_range_attribute.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_6__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_6__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__13)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmem_range_attribute.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_8__setstate_cython__, "HelperCUmem_range_attribute.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_8__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmem_range_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_8__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__14)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmem_range_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":240
 * 
 * cdef class HelperCUpointer_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  PyObject *__pyx_v_init_value = 0;
  PyObject *__pyx_v_is_getter = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,&__pyx_n_s_init_value,&__pyx_n_s_is_getter,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 240, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_getter);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 240, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_attr = values[0];
    __pyx_v_init_value = values[1];
    __pyx_v_is_getter = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 240, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUpointer_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)__pyx_v_self), __pyx_v_attr, __pyx_v_init_value, __pyx_v_is_getter);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  enum CUpointer_attribute_enum __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_7;
  unsigned int __pyx_t_8;
  unsigned PY_LONG_LONG __pyx_t_9;
  size_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 240, 0, __PYX_ERR(0, 240, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":241
 * cdef class HelperCUpointer_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_getter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_v_self->_is_getter = __pyx_t_1;

  /* "cuda/_lib/utils.pyx":242
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter
 *         self._attr = attr.value             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             if self._is_getter:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((enum CUpointer_attribute_enum)__Pyx_PyInt_As_enum__CUpointer_attribute_enum(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->_attr = __pyx_t_3;

  /* "cuda/_lib/utils.pyx":243
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):             # <<<<<<<<<<<<<<
 *             if self._is_getter:
 *                 self._ctx = cuda.CUcontext()
 */
  switch (__pyx_v_self->_attr) {
    case CU_POINTER_ATTRIBUTE_CONTEXT:

    /* "cuda/_lib/utils.pyx":244
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._ctx = cuda.CUcontext()
 *                 self._cptr = <void*><void_ptr>self._ctx.getPtr()
 */
    if (__pyx_v_self->_is_getter) {

      /* "cuda/_lib/utils.pyx":245
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             if self._is_getter:
 *                 self._ctx = cuda.CUcontext()             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._ctx.getPtr()
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cuda_4cuda_CUcontext)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->_ctx);
      __Pyx_DECREF((PyObject *)__pyx_v_self->_ctx);
      __pyx_v_self->_ctx = ((struct __pyx_obj_4cuda_4cuda_CUcontext *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cuda/_lib/utils.pyx":246
 *             if self._is_getter:
 *                 self._ctx = cuda.CUcontext()
 *                 self._cptr = <void*><void_ptr>self._ctx.getPtr()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_ctx), __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));

      /* "cuda/_lib/utils.pyx":244
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._ctx = cuda.CUcontext()
 *                 self._cptr = <void*><void_ptr>self._ctx.getPtr()
 */
      goto __pyx_L3;
    }

    /* "cuda/_lib/utils.pyx":248
 *                 self._cptr = <void*><void_ptr>self._ctx.getPtr()
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));
    }
    __pyx_L3:;

    /* "cuda/_lib/utils.pyx":243
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):             # <<<<<<<<<<<<<<
 *             if self._is_getter:
 *                 self._ctx = cuda.CUcontext()
 */
    break;
    case CU_POINTER_ATTRIBUTE_MEMORY_TYPE:

    /* "cuda/_lib/utils.pyx":249
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 */
    case CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL:

    /* "cuda/_lib/utils.pyx":250
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,
 */
    case CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES:

    /* "cuda/_lib/utils.pyx":251
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 */
    case CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE:

    /* "cuda/_lib/utils.pyx":252
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 *             self._uint = init_value
 */
    case CU_POINTER_ATTRIBUTE_ACCESS_FLAGS:

    /* "cuda/_lib/utils.pyx":254
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 *             self._uint = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._uint
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,
 */
    __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_v_init_value); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
    __pyx_v_self->_uint = __pyx_t_8;

    /* "cuda/_lib/utils.pyx":255
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 *             self._uint = init_value
 *             self._cptr = <void*>&self._uint             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_uint));

    /* "cuda/_lib/utils.pyx":249
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 */
    break;
    case CU_POINTER_ATTRIBUTE_DEVICE_POINTER:

    /* "cuda/_lib/utils.pyx":256
 *             self._uint = init_value
 *             self._cptr = <void*>&self._uint
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             if self._is_getter:
 */
    case CU_POINTER_ATTRIBUTE_RANGE_START_ADDR:

    /* "cuda/_lib/utils.pyx":258
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._devptr = cuda.CUdeviceptr()
 *                 self._cptr = <void*><void_ptr>self._devptr.getPtr()
 */
    if (__pyx_v_self->_is_getter) {

      /* "cuda/_lib/utils.pyx":259
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             if self._is_getter:
 *                 self._devptr = cuda.CUdeviceptr()             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._devptr.getPtr()
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cuda_4cuda_CUdeviceptr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->_devptr);
      __Pyx_DECREF((PyObject *)__pyx_v_self->_devptr);
      __pyx_v_self->_devptr = ((struct __pyx_obj_4cuda_4cuda_CUdeviceptr *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cuda/_lib/utils.pyx":260
 *             if self._is_getter:
 *                 self._devptr = cuda.CUdeviceptr()
 *                 self._cptr = <void*><void_ptr>self._devptr.getPtr()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_devptr), __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));

      /* "cuda/_lib/utils.pyx":258
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._devptr = cuda.CUdeviceptr()
 *                 self._cptr = <void*><void_ptr>self._devptr.getPtr()
 */
      goto __pyx_L4;
    }

    /* "cuda/_lib/utils.pyx":262
 *                 self._cptr = <void*><void_ptr>self._devptr.getPtr()
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):
 *             self._void = <void**><void_ptr>init_value
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));
    }
    __pyx_L4:;

    /* "cuda/_lib/utils.pyx":256
 *             self._uint = init_value
 *             self._cptr = <void*>&self._uint
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             if self._is_getter:
 */
    break;
    case CU_POINTER_ATTRIBUTE_HOST_POINTER:

    /* "cuda/_lib/utils.pyx":264
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):
 *             self._void = <void**><void_ptr>init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._void
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 */
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_v_init_value); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L1_error)
    __pyx_v_self->_void = ((void **)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));

    /* "cuda/_lib/utils.pyx":265
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):
 *             self._void = <void**><void_ptr>init_value
 *             self._cptr = <void*>&self._void             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             if self._is_getter:
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_void));

    /* "cuda/_lib/utils.pyx":263
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):             # <<<<<<<<<<<<<<
 *             self._void = <void**><void_ptr>init_value
 *             self._cptr = <void*>&self._void
 */
    break;
    case CU_POINTER_ATTRIBUTE_P2P_TOKENS:

    /* "cuda/_lib/utils.pyx":267
 *             self._cptr = <void*>&self._void
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._token = cuda.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS()
 *                 self._cptr = <void*><void_ptr>self._token.getPtr()
 */
    if (__pyx_v_self->_is_getter) {

      /* "cuda/_lib/utils.pyx":268
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             if self._is_getter:
 *                 self._token = cuda.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS()             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._token.getPtr()
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->_token);
      __Pyx_DECREF((PyObject *)__pyx_v_self->_token);
      __pyx_v_self->_token = ((struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cuda/_lib/utils.pyx":269
 *             if self._is_getter:
 *                 self._token = cuda.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS()
 *                 self._cptr = <void*><void_ptr>self._token.getPtr()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_token), __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));

      /* "cuda/_lib/utils.pyx":267
 *             self._cptr = <void*>&self._void
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._token = cuda.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS()
 *                 self._cptr = <void*><void_ptr>self._token.getPtr()
 */
      goto __pyx_L5;
    }

    /* "cuda/_lib/utils.pyx":271
 *                 self._cptr = <void*><void_ptr>self._token.getPtr()
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 271, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));
    }
    __pyx_L5:;

    /* "cuda/_lib/utils.pyx":266
 *             self._void = <void**><void_ptr>init_value
 *             self._cptr = <void*>&self._void
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):             # <<<<<<<<<<<<<<
 *             if self._is_getter:
 *                 self._token = cuda.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS()
 */
    break;
    case CU_POINTER_ATTRIBUTE_SYNC_MEMOPS:

    /* "cuda/_lib/utils.pyx":272
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 */
    case CU_POINTER_ATTRIBUTE_IS_MANAGED:

    /* "cuda/_lib/utils.pyx":273
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 */
    case CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE:

    /* "cuda/_lib/utils.pyx":274
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 *             self._bool = init_value
 */
    case CU_POINTER_ATTRIBUTE_MAPPED:

    /* "cuda/_lib/utils.pyx":276
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 *             self._bool = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._bool
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_init_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
    __pyx_v_self->_bool = __pyx_t_1;

    /* "cuda/_lib/utils.pyx":277
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 *             self._bool = init_value
 *             self._cptr = <void*>&self._bool             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):
 *             self._ull = init_value
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_bool));

    /* "cuda/_lib/utils.pyx":272
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 */
    break;
    case CU_POINTER_ATTRIBUTE_BUFFER_ID:

    /* "cuda/_lib/utils.pyx":279
 *             self._cptr = <void*>&self._bool
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):
 *             self._ull = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._ull
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 */
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_v_init_value); if (unlikely((__pyx_t_9 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
    __pyx_v_self->_ull = __pyx_t_9;

    /* "cuda/_lib/utils.pyx":280
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):
 *             self._ull = init_value
 *             self._cptr = <void*>&self._ull             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 *             self._size = init_value
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_ull));

    /* "cuda/_lib/utils.pyx":278
 *             self._bool = init_value
 *             self._cptr = <void*>&self._bool
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):             # <<<<<<<<<<<<<<
 *             self._ull = init_value
 *             self._cptr = <void*>&self._ull
 */
    break;
    case CU_POINTER_ATTRIBUTE_RANGE_SIZE:

    /* "cuda/_lib/utils.pyx":282
 *             self._cptr = <void*>&self._ull
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 *             self._size = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._size
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 */
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_init_value); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
    __pyx_v_self->_size = __pyx_t_10;

    /* "cuda/_lib/utils.pyx":283
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 *             self._size = init_value
 *             self._cptr = <void*>&self._size             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 *             if self._is_getter:
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_size));

    /* "cuda/_lib/utils.pyx":281
 *             self._ull = init_value
 *             self._cptr = <void*>&self._ull
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):             # <<<<<<<<<<<<<<
 *             self._size = init_value
 *             self._cptr = <void*>&self._size
 */
    break;
    case CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE:

    /* "cuda/_lib/utils.pyx":285
 *             self._cptr = <void*>&self._size
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._mempool = cuda.CUmemoryPool()
 *                 self._cptr = <void*><void_ptr>self._mempool.getPtr()
 */
    if (__pyx_v_self->_is_getter) {

      /* "cuda/_lib/utils.pyx":286
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 *             if self._is_getter:
 *                 self._mempool = cuda.CUmemoryPool()             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._mempool.getPtr()
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cuda_4cuda_CUmemoryPool)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->_mempool);
      __Pyx_DECREF((PyObject *)__pyx_v_self->_mempool);
      __pyx_v_self->_mempool = ((struct __pyx_obj_4cuda_4cuda_CUmemoryPool *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cuda/_lib/utils.pyx":287
 *             if self._is_getter:
 *                 self._mempool = cuda.CUmemoryPool()
 *                 self._cptr = <void*><void_ptr>self._mempool.getPtr()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_mempool), __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));

      /* "cuda/_lib/utils.pyx":285
 *             self._cptr = <void*>&self._size
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._mempool = cuda.CUmemoryPool()
 *                 self._cptr = <void*><void_ptr>self._mempool.getPtr()
 */
      goto __pyx_L6;
    }

    /* "cuda/_lib/utils.pyx":289
 *                 self._cptr = <void*><void_ptr>self._mempool.getPtr()
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));
    }
    __pyx_L6:;

    /* "cuda/_lib/utils.pyx":284
 *             self._size = init_value
 *             self._cptr = <void*>&self._size
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):             # <<<<<<<<<<<<<<
 *             if self._is_getter:
 *                 self._mempool = cuda.CUmemoryPool()
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":291
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 291, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":240
 * 
 * cdef class HelperCUpointer_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUpointer_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":293
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 293, 0, __PYX_ERR(0, 293, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUpointer_attribute.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":296
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 296, 0, __PYX_ERR(0, 296, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":298
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 *     def pyObj(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":296
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUpointer_attribute.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":300
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4pyObj, "HelperCUpointer_attribute.pyObj(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_25HelperCUpointer_attribute_5pyObj = {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4pyObj};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyObj (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("pyObj", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "pyObj", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4pyObj(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__15)
  __Pyx_RefNannySetupContext("pyObj", 1);
  __Pyx_TraceCall("pyObj", __pyx_f[0], 300, 0, __PYX_ERR(0, 300, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":301
 * 
 *     def pyObj(self):
 *         assert(self._is_getter == True)             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             return self._ctx
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_self->_is_getter == 1);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 301, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 301, __pyx_L1_error)
  #endif

  /* "cuda/_lib/utils.pyx":302
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):             # <<<<<<<<<<<<<<
 *             return self._ctx
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 */
  switch (__pyx_v_self->_attr) {
    case CU_POINTER_ATTRIBUTE_CONTEXT:

    /* "cuda/_lib/utils.pyx":303
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             return self._ctx             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self->_ctx);
    __pyx_r = ((PyObject *)__pyx_v_self->_ctx);
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":302
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):             # <<<<<<<<<<<<<<
 *             return self._ctx
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 */
    break;
    case CU_POINTER_ATTRIBUTE_MEMORY_TYPE:

    /* "cuda/_lib/utils.pyx":304
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             return self._ctx
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 */
    case CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL:

    /* "cuda/_lib/utils.pyx":305
 *             return self._ctx
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,
 */
    case CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES:

    /* "cuda/_lib/utils.pyx":306
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 */
    case CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE:

    /* "cuda/_lib/utils.pyx":307
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 *             return self._uint
 */
    case CU_POINTER_ATTRIBUTE_ACCESS_FLAGS:

    /* "cuda/_lib/utils.pyx":309
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 *             return self._uint             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_uint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":304
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 *             return self._ctx
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES,
 */
    break;
    case CU_POINTER_ATTRIBUTE_DEVICE_POINTER:

    /* "cuda/_lib/utils.pyx":310
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 *             return self._uint
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             return self._devptr
 */
    case CU_POINTER_ATTRIBUTE_RANGE_START_ADDR:

    /* "cuda/_lib/utils.pyx":312
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             return self._devptr             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):
 *             return <void_ptr>self._void
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self->_devptr);
    __pyx_r = ((PyObject *)__pyx_v_self->_devptr);
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":310
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_ACCESS_FLAGS,):
 *             return self._uint
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             return self._devptr
 */
    break;
    case CU_POINTER_ATTRIBUTE_HOST_POINTER:

    /* "cuda/_lib/utils.pyx":314
 *             return self._devptr
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):
 *             return <void_ptr>self._void             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             return self._token
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_void)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":313
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_START_ADDR,):
 *             return self._devptr
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):             # <<<<<<<<<<<<<<
 *             return <void_ptr>self._void
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 */
    break;
    case CU_POINTER_ATTRIBUTE_P2P_TOKENS:

    /* "cuda/_lib/utils.pyx":316
 *             return <void_ptr>self._void
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             return self._token             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self->_token);
    __pyx_r = ((PyObject *)__pyx_v_self->_token);
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":315
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER,):
 *             return <void_ptr>self._void
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):             # <<<<<<<<<<<<<<
 *             return self._token
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
 */
    break;
    case CU_POINTER_ATTRIBUTE_SYNC_MEMOPS:

    /* "cuda/_lib/utils.pyx":317
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             return self._token
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 */
    case CU_POINTER_ATTRIBUTE_IS_MANAGED:

    /* "cuda/_lib/utils.pyx":318
 *             return self._token
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 */
    case CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE:

    /* "cuda/_lib/utils.pyx":319
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 *             return self._bool
 */
    case CU_POINTER_ATTRIBUTE_MAPPED:

    /* "cuda/_lib/utils.pyx":321
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 *             return self._bool             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):
 *             return self._ull
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_bool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":317
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_P2P_TOKENS,):
 *             return self._token
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_SYNC_MEMOPS,             # <<<<<<<<<<<<<<
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED,
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE,
 */
    break;
    case CU_POINTER_ATTRIBUTE_BUFFER_ID:

    /* "cuda/_lib/utils.pyx":323
 *             return self._bool
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):
 *             return self._ull             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 *             return self._size
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_self->_ull); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":322
 *                             ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MAPPED,):
 *             return self._bool
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):             # <<<<<<<<<<<<<<
 *             return self._ull
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 */
    break;
    case CU_POINTER_ATTRIBUTE_RANGE_SIZE:

    /* "cuda/_lib/utils.pyx":325
 *             return self._ull
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 *             return self._size             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 *             return self._mempool
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":324
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_BUFFER_ID,):
 *             return self._ull
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):             # <<<<<<<<<<<<<<
 *             return self._size
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 */
    break;
    case CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE:

    /* "cuda/_lib/utils.pyx":327
 *             return self._size
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):
 *             return self._mempool             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self->_mempool);
    __pyx_r = ((PyObject *)__pyx_v_self->_mempool);
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":326
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_RANGE_SIZE,):
 *             return self._size
 *         elif self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE,):             # <<<<<<<<<<<<<<
 *             return self._mempool
 *         else:
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":329
 *             return self._mempool
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUgraphMem_attribute:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute_value, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_enum__CUpointer_attribute_enum(__pyx_v_self->_attr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 329, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":300
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUpointer_attribute.pyObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_6__reduce_cython__, "HelperCUpointer_attribute.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_25HelperCUpointer_attribute_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_6__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_6__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__16)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUpointer_attribute.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_8__setstate_cython__, "HelperCUpointer_attribute.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_25HelperCUpointer_attribute_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_8__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUpointer_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_8__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_25HelperCUpointer_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__17)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUpointer_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":332
 * 
 * cdef class HelperCUgraphMem_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  PyObject *__pyx_v_init_value = 0;
  PyObject *__pyx_v_is_getter = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,&__pyx_n_s_init_value,&__pyx_n_s_is_getter,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 332, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_getter);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 332, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_attr = values[0];
    __pyx_v_init_value = values[1];
    __pyx_v_is_getter = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 332, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUgraphMem_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)__pyx_v_self), __pyx_v_attr, __pyx_v_init_value, __pyx_v_is_getter);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  enum CUgraphMem_attribute_enum __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 332, 0, __PYX_ERR(0, 332, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":333
 * cdef class HelperCUgraphMem_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_getter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_v_self->_is_getter = __pyx_t_1;

  /* "cuda/_lib/utils.pyx":334
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter
 *         self._attr = attr.value             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((enum CUgraphMem_attribute_enum)__Pyx_PyInt_As_enum__CUgraphMem_attribute_enum(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->_attr = __pyx_t_3;

  /* "cuda/_lib/utils.pyx":335
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 */
  switch (__pyx_v_self->_attr) {
    case CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT:
    case CU_GRAPH_MEM_ATTR_USED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":336
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 */
    case CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT:

    /* "cuda/_lib/utils.pyx":337
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 *             if self._is_getter:
 */
    case CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":339
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._cuuint64_t_val = cuda.cuuint64_t()
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 */
    if (__pyx_v_self->_is_getter) {

      /* "cuda/_lib/utils.pyx":340
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 *             if self._is_getter:
 *                 self._cuuint64_t_val = cuda.cuuint64_t()             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cuda_4cuda_cuuint64_t)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->_cuuint64_t_val);
      __Pyx_DECREF((PyObject *)__pyx_v_self->_cuuint64_t_val);
      __pyx_v_self->_cuuint64_t_val = ((struct __pyx_obj_4cuda_4cuda_cuuint64_t *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "cuda/_lib/utils.pyx":341
 *             if self._is_getter:
 *                 self._cuuint64_t_val = cuda.cuuint64_t()
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_cuuint64_t_val), __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));

      /* "cuda/_lib/utils.pyx":339
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._cuuint64_t_val = cuda.cuuint64_t()
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 */
      goto __pyx_L3;
    }

    /* "cuda/_lib/utils.pyx":343
 *                 self._cptr = <void*><void_ptr>self._cuuint64_t_val.getPtr()
 *             else:
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));
    }
    __pyx_L3:;

    /* "cuda/_lib/utils.pyx":335
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":345
 *                 self._cptr = <void*><void_ptr>init_value.getPtr()
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 345, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":332
 * 
 * cdef class HelperCUgraphMem_attribute:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attr = attr.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUgraphMem_attribute.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":347
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 347, 0, __PYX_ERR(0, 347, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUgraphMem_attribute.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":350
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 350, 0, __PYX_ERR(0, 350, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":352
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 *     def pyObj(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":350
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUgraphMem_attribute.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":354
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4pyObj, "HelperCUgraphMem_attribute.pyObj(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_5pyObj = {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4pyObj};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyObj (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("pyObj", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "pyObj", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4pyObj(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__18)
  __Pyx_RefNannySetupContext("pyObj", 1);
  __Pyx_TraceCall("pyObj", __pyx_f[0], 354, 0, __PYX_ERR(0, 354, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":355
 * 
 *     def pyObj(self):
 *         assert(self._is_getter == True)             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_self->_is_getter == 1);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 355, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 355, __pyx_L1_error)
  #endif

  /* "cuda/_lib/utils.pyx":356
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 */
  switch (__pyx_v_self->_attr) {
    case CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT:
    case CU_GRAPH_MEM_ATTR_USED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":357
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 */
    case CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT:

    /* "cuda/_lib/utils.pyx":358
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 *             return self._cuuint64_t_val
 */
    case CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH:

    /* "cuda/_lib/utils.pyx":360
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH,):
 *             return self._cuuint64_t_val             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self->_cuuint64_t_val);
    __pyx_r = ((PyObject *)__pyx_v_self->_cuuint64_t_val);
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":356
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_HIGH,
 *                           ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT,
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":362
 *             return self._cuuint64_t_val
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attr))             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUjit_option:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute_value, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_enum__CUgraphMem_attribute_enum(__pyx_v_self->_attr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 362, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":354
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUgraphMem_attribute.pyObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_6__reduce_cython__, "HelperCUgraphMem_attribute.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_6__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_6__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__19)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUgraphMem_attribute.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_8__setstate_cython__, "HelperCUgraphMem_attribute.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_8__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUgraphMem_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_8__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__20)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUgraphMem_attribute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":365
 * 
 * cdef class HelperCUjit_option:
 *     def __cinit__(self, attr, init_value):             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUjit_option_enum.CU_JIT_MAX_REGISTERS,
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  PyObject *__pyx_v_init_value = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,&__pyx_n_s_init_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 365, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 365, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 365, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 365, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_attr = values[0];
    __pyx_v_init_value = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 365, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUjit_option.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)__pyx_v_self), __pyx_v_attr, __pyx_v_init_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value) {
  PyObject *__pyx_v_pylist = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_val = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum CUjit_option_enum __pyx_t_2;
  unsigned int __pyx_t_3;
  float __pyx_t_4;
  char *__pyx_t_5;
  enum CUjit_target_enum __pyx_t_6;
  enum CUjit_fallback_enum __pyx_t_7;
  int __pyx_t_8;
  enum CUjit_cacheMode_enum __pyx_t_9;
  std::vector<char *>  __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 365, 0, __PYX_ERR(0, 365, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":366
 * cdef class HelperCUjit_option:
 *     def __cinit__(self, attr, init_value):
 *         self._attr = attr.value             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUjit_option_enum.CU_JIT_MAX_REGISTERS,
 *                           ccuda.CUjit_option_enum.CU_JIT_THREADS_PER_BLOCK,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum CUjit_option_enum)__Pyx_PyInt_As_enum__CUjit_option_enum(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_attr = __pyx_t_2;

  /* "cuda/_lib/utils.pyx":367
 *     def __cinit__(self, attr, init_value):
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUjit_option_enum.CU_JIT_MAX_REGISTERS,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_THREADS_PER_BLOCK,
 *                           ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
 */
  switch (__pyx_v_self->_attr) {
    case CU_JIT_MAX_REGISTERS:
    case CU_JIT_THREADS_PER_BLOCK:

    /* "cuda/_lib/utils.pyx":368
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUjit_option_enum.CU_JIT_MAX_REGISTERS,
 *                           ccuda.CUjit_option_enum.CU_JIT_THREADS_PER_BLOCK,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
 *                           ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
 */
    case CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES:

    /* "cuda/_lib/utils.pyx":369
 *         if self._attr in (ccuda.CUjit_option_enum.CU_JIT_MAX_REGISTERS,
 *                           ccuda.CUjit_option_enum.CU_JIT_THREADS_PER_BLOCK,
 *                           ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
 *                           ccuda.CUjit_option_enum.CU_JIT_OPTIMIZATION_LEVEL,
 */
    case CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES:

    /* "cuda/_lib/utils.pyx":370
 *                           ccuda.CUjit_option_enum.CU_JIT_THREADS_PER_BLOCK,
 *                           ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
 *                           ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_OPTIMIZATION_LEVEL,
 *                           ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_COUNT,
 */
    case CU_JIT_OPTIMIZATION_LEVEL:

    /* "cuda/_lib/utils.pyx":371
 *                           ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
 *                           ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
 *                           ccuda.CUjit_option_enum.CU_JIT_OPTIMIZATION_LEVEL,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_COUNT,
 *                           ccuda.CUjit_option_enum.CU_JIT_TARGET_FROM_CUCONTEXT,
 */
    case CU_JIT_GLOBAL_SYMBOL_COUNT:

    /* "cuda/_lib/utils.pyx":372
 *                           ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
 *                           ccuda.CUjit_option_enum.CU_JIT_OPTIMIZATION_LEVEL,
 *                           ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_COUNT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_TARGET_FROM_CUCONTEXT,
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_COUNT,
 */
    case CU_JIT_TARGET_FROM_CUCONTEXT:

    /* "cuda/_lib/utils.pyx":373
 *                           ccuda.CUjit_option_enum.CU_JIT_OPTIMIZATION_LEVEL,
 *                           ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_COUNT,
 *                           ccuda.CUjit_option_enum.CU_JIT_TARGET_FROM_CUCONTEXT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_COUNT,
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_COUNT,
 */
    case CU_JIT_REFERENCED_KERNEL_COUNT:

    /* "cuda/_lib/utils.pyx":374
 *                           ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_COUNT,
 *                           ccuda.CUjit_option_enum.CU_JIT_TARGET_FROM_CUCONTEXT,
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_COUNT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_COUNT,
 *                           ccuda.CUjit_option_enum.CU_JIT_MIN_CTA_PER_SM,):
 */
    case CU_JIT_REFERENCED_VARIABLE_COUNT:

    /* "cuda/_lib/utils.pyx":375
 *                           ccuda.CUjit_option_enum.CU_JIT_TARGET_FROM_CUCONTEXT,
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_COUNT,
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_COUNT,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_MIN_CTA_PER_SM,):
 *             self._uint = init_value
 */
    case CU_JIT_MIN_CTA_PER_SM:

    /* "cuda/_lib/utils.pyx":377
 *                           ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_COUNT,
 *                           ccuda.CUjit_option_enum.CU_JIT_MIN_CTA_PER_SM,):
 *             self._uint = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._uint
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_WALL_TIME,):
 */
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_init_value); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L1_error)
    __pyx_v_self->_uint = __pyx_t_3;

    /* "cuda/_lib/utils.pyx":378
 *                           ccuda.CUjit_option_enum.CU_JIT_MIN_CTA_PER_SM,):
 *             self._uint = init_value
 *             self._cptr = <void*><void_ptr>self._uint             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_WALL_TIME,):
 *             self._float = init_value
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_uint));

    /* "cuda/_lib/utils.pyx":367
 *     def __cinit__(self, attr, init_value):
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUjit_option_enum.CU_JIT_MAX_REGISTERS,             # <<<<<<<<<<<<<<
 *                           ccuda.CUjit_option_enum.CU_JIT_THREADS_PER_BLOCK,
 *                           ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
 */
    break;
    case CU_JIT_WALL_TIME:

    /* "cuda/_lib/utils.pyx":380
 *             self._cptr = <void*><void_ptr>self._uint
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_WALL_TIME,):
 *             self._float = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._float
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER,
 */
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_init_value); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L1_error)
    __pyx_v_self->_float = __pyx_t_4;

    /* "cuda/_lib/utils.pyx":381
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_WALL_TIME,):
 *             self._float = init_value
 *             self._cptr = <void*><void_ptr>self._float             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER,
 *                             ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER):
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_float));

    /* "cuda/_lib/utils.pyx":379
 *             self._uint = init_value
 *             self._cptr = <void*><void_ptr>self._uint
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_WALL_TIME,):             # <<<<<<<<<<<<<<
 *             self._float = init_value
 *             self._cptr = <void*><void_ptr>self._float
 */
    break;
    case CU_JIT_INFO_LOG_BUFFER:

    /* "cuda/_lib/utils.pyx":382
 *             self._float = init_value
 *             self._cptr = <void*><void_ptr>self._float
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER):
 *             self._charstar = init_value
 */
    case CU_JIT_ERROR_LOG_BUFFER:

    /* "cuda/_lib/utils.pyx":384
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER,
 *                             ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER):
 *             self._charstar = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._charstar
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_TARGET,):
 */
    __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_init_value); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L1_error)
    __pyx_v_self->_charstar = __pyx_t_5;

    /* "cuda/_lib/utils.pyx":385
 *                             ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER):
 *             self._charstar = init_value
 *             self._cptr = <void*><void_ptr>self._charstar             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_TARGET,):
 *             self._target = init_value.value
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_charstar));

    /* "cuda/_lib/utils.pyx":382
 *             self._float = init_value
 *             self._cptr = <void*><void_ptr>self._float
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_INFO_LOG_BUFFER,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_ERROR_LOG_BUFFER):
 *             self._charstar = init_value
 */
    break;
    case CU_JIT_TARGET:

    /* "cuda/_lib/utils.pyx":387
 *             self._cptr = <void*><void_ptr>self._charstar
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_TARGET,):
 *             self._target = init_value.value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._target
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_FALLBACK_STRATEGY,):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = ((enum CUjit_target_enum)__Pyx_PyInt_As_enum__CUjit_target_enum(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->_target = __pyx_t_6;

    /* "cuda/_lib/utils.pyx":388
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_TARGET,):
 *             self._target = init_value.value
 *             self._cptr = <void*><void_ptr>self._target             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_FALLBACK_STRATEGY,):
 *             self._fallback = init_value.value
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_target));

    /* "cuda/_lib/utils.pyx":386
 *             self._charstar = init_value
 *             self._cptr = <void*><void_ptr>self._charstar
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_TARGET,):             # <<<<<<<<<<<<<<
 *             self._target = init_value.value
 *             self._cptr = <void*><void_ptr>self._target
 */
    break;
    case CU_JIT_FALLBACK_STRATEGY:

    /* "cuda/_lib/utils.pyx":390
 *             self._cptr = <void*><void_ptr>self._target
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_FALLBACK_STRATEGY,):
 *             self._fallback = init_value.value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._fallback
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GENERATE_DEBUG_INFO,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = ((enum CUjit_fallback_enum)__Pyx_PyInt_As_enum__CUjit_fallback_enum(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->_fallback = __pyx_t_7;

    /* "cuda/_lib/utils.pyx":391
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_FALLBACK_STRATEGY,):
 *             self._fallback = init_value.value
 *             self._cptr = <void*><void_ptr>self._fallback             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GENERATE_DEBUG_INFO,
 *                             ccuda.CUjit_option_enum.CU_JIT_LOG_VERBOSE,
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_fallback));

    /* "cuda/_lib/utils.pyx":389
 *             self._target = init_value.value
 *             self._cptr = <void*><void_ptr>self._target
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_FALLBACK_STRATEGY,):             # <<<<<<<<<<<<<<
 *             self._fallback = init_value.value
 *             self._cptr = <void*><void_ptr>self._fallback
 */
    break;
    case CU_JIT_GENERATE_DEBUG_INFO:

    /* "cuda/_lib/utils.pyx":392
 *             self._fallback = init_value.value
 *             self._cptr = <void*><void_ptr>self._fallback
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GENERATE_DEBUG_INFO,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_LOG_VERBOSE,
 *                             ccuda.CUjit_option_enum.CU_JIT_GENERATE_LINE_INFO,
 */
    case CU_JIT_LOG_VERBOSE:

    /* "cuda/_lib/utils.pyx":393
 *             self._cptr = <void*><void_ptr>self._fallback
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GENERATE_DEBUG_INFO,
 *                             ccuda.CUjit_option_enum.CU_JIT_LOG_VERBOSE,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_GENERATE_LINE_INFO,
 *                             ccuda.CUjit_option_enum.CU_JIT_LTO,
 */
    case CU_JIT_GENERATE_LINE_INFO:

    /* "cuda/_lib/utils.pyx":394
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GENERATE_DEBUG_INFO,
 *                             ccuda.CUjit_option_enum.CU_JIT_LOG_VERBOSE,
 *                             ccuda.CUjit_option_enum.CU_JIT_GENERATE_LINE_INFO,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_LTO,
 *                             ccuda.CUjit_option_enum.CU_JIT_FTZ,
 */
    case CU_JIT_LTO:

    /* "cuda/_lib/utils.pyx":395
 *                             ccuda.CUjit_option_enum.CU_JIT_LOG_VERBOSE,
 *                             ccuda.CUjit_option_enum.CU_JIT_GENERATE_LINE_INFO,
 *                             ccuda.CUjit_option_enum.CU_JIT_LTO,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_FTZ,
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_DIV,
 */
    case CU_JIT_FTZ:

    /* "cuda/_lib/utils.pyx":396
 *                             ccuda.CUjit_option_enum.CU_JIT_GENERATE_LINE_INFO,
 *                             ccuda.CUjit_option_enum.CU_JIT_LTO,
 *                             ccuda.CUjit_option_enum.CU_JIT_FTZ,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_DIV,
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_SQRT,
 */
    case CU_JIT_PREC_DIV:

    /* "cuda/_lib/utils.pyx":397
 *                             ccuda.CUjit_option_enum.CU_JIT_LTO,
 *                             ccuda.CUjit_option_enum.CU_JIT_FTZ,
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_DIV,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_SQRT,
 *                             ccuda.CUjit_option_enum.CU_JIT_FMA,
 */
    case CU_JIT_PREC_SQRT:

    /* "cuda/_lib/utils.pyx":398
 *                             ccuda.CUjit_option_enum.CU_JIT_FTZ,
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_DIV,
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_SQRT,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_FMA,
 *                             ccuda.CUjit_option_enum.CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES,):
 */
    case CU_JIT_FMA:

    /* "cuda/_lib/utils.pyx":399
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_DIV,
 *                             ccuda.CUjit_option_enum.CU_JIT_PREC_SQRT,
 *                             ccuda.CUjit_option_enum.CU_JIT_FMA,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES,):
 *             self._int = init_value
 */
    case CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES:

    /* "cuda/_lib/utils.pyx":401
 *                             ccuda.CUjit_option_enum.CU_JIT_FMA,
 *                             ccuda.CUjit_option_enum.CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES,):
 *             self._int = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._int
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_CACHE_MODE,):
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_init_value); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 401, __pyx_L1_error)
    __pyx_v_self->_int = __pyx_t_8;

    /* "cuda/_lib/utils.pyx":402
 *                             ccuda.CUjit_option_enum.CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES,):
 *             self._int = init_value
 *             self._cptr = <void*><void_ptr>self._int             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_CACHE_MODE,):
 *             self._cacheMode = init_value.value
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_int));

    /* "cuda/_lib/utils.pyx":392
 *             self._fallback = init_value.value
 *             self._cptr = <void*><void_ptr>self._fallback
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GENERATE_DEBUG_INFO,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_LOG_VERBOSE,
 *                             ccuda.CUjit_option_enum.CU_JIT_GENERATE_LINE_INFO,
 */
    break;
    case CU_JIT_CACHE_MODE:

    /* "cuda/_lib/utils.pyx":404
 *             self._cptr = <void*><void_ptr>self._int
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_CACHE_MODE,):
 *             self._cacheMode = init_value.value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._cacheMode
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_NAMES,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = ((enum CUjit_cacheMode_enum)__Pyx_PyInt_As_enum__CUjit_cacheMode_enum(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->_cacheMode = __pyx_t_9;

    /* "cuda/_lib/utils.pyx":405
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_CACHE_MODE,):
 *             self._cacheMode = init_value.value
 *             self._cptr = <void*><void_ptr>self._cacheMode             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_NAMES,
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_NAMES,
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cacheMode));

    /* "cuda/_lib/utils.pyx":403
 *             self._int = init_value
 *             self._cptr = <void*><void_ptr>self._int
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_CACHE_MODE,):             # <<<<<<<<<<<<<<
 *             self._cacheMode = init_value.value
 *             self._cptr = <void*><void_ptr>self._cacheMode
 */
    break;
    case CU_JIT_GLOBAL_SYMBOL_NAMES:

    /* "cuda/_lib/utils.pyx":406
 *             self._cacheMode = init_value.value
 *             self._cptr = <void*><void_ptr>self._cacheMode
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_NAMES,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_NAMES,
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_NAMES,):
 */
    case CU_JIT_REFERENCED_KERNEL_NAMES:

    /* "cuda/_lib/utils.pyx":407
 *             self._cptr = <void*><void_ptr>self._cacheMode
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_NAMES,
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_NAMES,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_NAMES,):
 *             self._charstarstar = init_value
 */
    case CU_JIT_REFERENCED_VARIABLE_NAMES:

    /* "cuda/_lib/utils.pyx":409
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_NAMES,
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_NAMES,):
 *             self._charstarstar = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._charstarstar[0]
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_ADDRESSES,):
 */
    __pyx_t_10 = __pyx_convert_vector_from_py_char___2a_(__pyx_v_init_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L1_error)
    __pyx_v_self->_charstarstar = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_10);

    /* "cuda/_lib/utils.pyx":410
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_NAMES,):
 *             self._charstarstar = init_value
 *             self._cptr = <void*>&self._charstarstar[0]             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_ADDRESSES,):
 *             pylist = [HelperInputVoidPtr(val) for val in init_value]
 */
    __pyx_v_self->_cptr = ((void *)(&(__pyx_v_self->_charstarstar[0])));

    /* "cuda/_lib/utils.pyx":406
 *             self._cacheMode = init_value.value
 *             self._cptr = <void*><void_ptr>self._cacheMode
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_NAMES,             # <<<<<<<<<<<<<<
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_KERNEL_NAMES,
 *                             ccuda.CUjit_option_enum.CU_JIT_REFERENCED_VARIABLE_NAMES,):
 */
    break;
    case CU_JIT_GLOBAL_SYMBOL_ADDRESSES:

    /* "cuda/_lib/utils.pyx":412
 *             self._cptr = <void*>&self._charstarstar[0]
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_ADDRESSES,):
 *             pylist = [HelperInputVoidPtr(val) for val in init_value]             # <<<<<<<<<<<<<<
 *             self._voidstarstar = InputVoidPtrPtrHelper(pylist)
 *             self._cptr = <void*><void_ptr>self._voidstarstar.cptr
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_v_init_value)) || PyTuple_CheckExact(__pyx_v_init_value)) {
        __pyx_t_11 = __pyx_v_init_value; __Pyx_INCREF(__pyx_t_11);
        __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_init_value); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 412, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 412, __pyx_L5_error)
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_11))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 412, __pyx_L5_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_14 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 412, __pyx_L5_error)
            #else
            __pyx_t_14 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 412, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 412, __pyx_L5_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 412, __pyx_L5_error)
            #else
            __pyx_t_14 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 412, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          }
        } else {
          __pyx_t_14 = __pyx_t_13(__pyx_t_11);
          if (unlikely(!__pyx_t_14)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 412, __pyx_L5_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_14);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_val, __pyx_t_14);
        __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr), __pyx_8genexpr1__pyx_v_val); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 412, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 412, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_v_pylist = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cuda/_lib/utils.pyx":413
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_ADDRESSES,):
 *             pylist = [HelperInputVoidPtr(val) for val in init_value]
 *             self._voidstarstar = InputVoidPtrPtrHelper(pylist)             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._voidstarstar.cptr
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper), __pyx_v_pylist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->_voidstarstar);
    __Pyx_DECREF((PyObject *)__pyx_v_self->_voidstarstar);
    __pyx_v_self->_voidstarstar = ((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cuda/_lib/utils.pyx":414
 *             pylist = [HelperInputVoidPtr(val) for val in init_value]
 *             self._voidstarstar = InputVoidPtrPtrHelper(pylist)
 *             self._cptr = <void*><void_ptr>self._voidstarstar.cptr             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_voidstarstar), __pyx_n_s_cptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_15 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_15));

    /* "cuda/_lib/utils.pyx":411
 *             self._charstarstar = init_value
 *             self._cptr = <void*>&self._charstarstar[0]
 *         elif self._attr in (ccuda.CUjit_option_enum.CU_JIT_GLOBAL_SYMBOL_ADDRESSES,):             # <<<<<<<<<<<<<<
 *             pylist = [HelperInputVoidPtr(val) for val in init_value]
 *             self._voidstarstar = InputVoidPtrPtrHelper(pylist)
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":416
 *             self._cptr = <void*><void_ptr>self._voidstarstar.cptr
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_16 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_14};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_11, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __PYX_ERR(0, 416, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":365
 * 
 * cdef class HelperCUjit_option:
 *     def __cinit__(self, attr, init_value):             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if self._attr in (ccuda.CUjit_option_enum.CU_JIT_MAX_REGISTERS,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUjit_option.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pylist);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":418
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 418, 0, __PYX_ERR(0, 418, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUjit_option.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":421
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 421, 0, __PYX_ERR(0, 421, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":423
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUlibraryOption:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":421
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUjit_option.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_18HelperCUjit_option_4__reduce_cython__, "HelperCUjit_option.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_18HelperCUjit_option_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperCUjit_option_4__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_4__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__21)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUjit_option.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_18HelperCUjit_option_6__setstate_cython__, "HelperCUjit_option.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_18HelperCUjit_option_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperCUjit_option_6__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUjit_option.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_6__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_18HelperCUjit_option_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__22)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUjit_option.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":426
 * 
 * cdef class HelperCUlibraryOption:
 *     def __cinit__(self, attr, init_value):             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if False:
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  PyObject *__pyx_v_init_value = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,&__pyx_n_s_init_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 426, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 426, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_attr = values[0];
    __pyx_v_init_value = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 426, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUlibraryOption.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *)__pyx_v_self), __pyx_v_attr, __pyx_v_init_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum CUlibraryOption_enum __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_6;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 426, 0, __PYX_ERR(0, 426, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":427
 * cdef class HelperCUlibraryOption:
 *     def __cinit__(self, attr, init_value):
 *         self._attr = attr.value             # <<<<<<<<<<<<<<
 *         if False:
 *             pass
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum CUlibraryOption_enum)__Pyx_PyInt_As_enum__CUlibraryOption_enum(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_attr = __pyx_t_2;

  /* "cuda/_lib/utils.pyx":428
 *     def __cinit__(self, attr, init_value):
 *         self._attr = attr.value
 *         if False:             # <<<<<<<<<<<<<<
 *             pass
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_HOST_UNIVERSAL_FUNCTION_AND_DATA_TABLE,):
 */
  switch (__pyx_v_self->_attr) {
    case CU_LIBRARY_HOST_UNIVERSAL_FUNCTION_AND_DATA_TABLE:

    /* "cuda/_lib/utils.pyx":431
 *             pass
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_HOST_UNIVERSAL_FUNCTION_AND_DATA_TABLE,):
 *             self._cptr = <void*><void_ptr>init_value.getPtr()             # <<<<<<<<<<<<<<
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_BINARY_IS_PRESERVED,):
 *             self._uint = init_value
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_init_value, __pyx_n_s_getPtr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_6));

    /* "cuda/_lib/utils.pyx":430
 *         if False:
 *             pass
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_HOST_UNIVERSAL_FUNCTION_AND_DATA_TABLE,):             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_BINARY_IS_PRESERVED,):
 */
    break;
    case CU_LIBRARY_BINARY_IS_PRESERVED:

    /* "cuda/_lib/utils.pyx":433
 *             self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_BINARY_IS_PRESERVED,):
 *             self._uint = init_value             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._uint
 *         else:
 */
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_init_value); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L1_error)
    __pyx_v_self->_uint = __pyx_t_7;

    /* "cuda/_lib/utils.pyx":434
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_BINARY_IS_PRESERVED,):
 *             self._uint = init_value
 *             self._cptr = <void*><void_ptr>self._uint             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_uint));

    /* "cuda/_lib/utils.pyx":432
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_HOST_UNIVERSAL_FUNCTION_AND_DATA_TABLE,):
 *             self._cptr = <void*><void_ptr>init_value.getPtr()
 *         elif self._attr in (ccuda.CUlibraryOption_enum.CU_LIBRARY_BINARY_IS_PRESERVED,):             # <<<<<<<<<<<<<<
 *             self._uint = init_value
 *             self._cptr = <void*><void_ptr>self._uint
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":436
 *             self._cptr = <void*><void_ptr>self._uint
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 436, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":426
 * 
 * cdef class HelperCUlibraryOption:
 *     def __cinit__(self, attr, init_value):             # <<<<<<<<<<<<<<
 *         self._attr = attr.value
 *         if False:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUlibraryOption.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":438
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 438, 0, __PYX_ERR(0, 438, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUlibraryOption.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":441
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 441, 0, __PYX_ERR(0, 441, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":443
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUmemAllocationHandleType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":441
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUlibraryOption.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_21HelperCUlibraryOption_4__reduce_cython__, "HelperCUlibraryOption.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_21HelperCUlibraryOption_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21HelperCUlibraryOption_4__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_4__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__23)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUlibraryOption.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_21HelperCUlibraryOption_6__setstate_cython__, "HelperCUlibraryOption.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_21HelperCUlibraryOption_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21HelperCUlibraryOption_6__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUlibraryOption.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_6__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_21HelperCUlibraryOption_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__24)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUlibraryOption.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":446
 * 
 * cdef class HelperCUmemAllocationHandleType:
 *     def __cinit__(self, attr):             # <<<<<<<<<<<<<<
 *         self._type = attr.value
 *         if False:
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 446, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_attr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 446, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemAllocationHandleType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)__pyx_v_self), __pyx_v_attr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self, PyObject *__pyx_v_attr) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum CUmemAllocationHandleType_enum __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 446, 0, __PYX_ERR(0, 446, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":447
 * cdef class HelperCUmemAllocationHandleType:
 *     def __cinit__(self, attr):
 *         self._type = attr.value             # <<<<<<<<<<<<<<
 *         if False:
 *             pass
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum CUmemAllocationHandleType_enum)__Pyx_PyInt_As_enum__CUmemAllocationHandleType_enum(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_type = __pyx_t_2;

  /* "cuda/_lib/utils.pyx":448
 *     def __cinit__(self, attr):
 *         self._type = attr.value
 *         if False:             # <<<<<<<<<<<<<<
 *             pass
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):
 */
  switch (__pyx_v_self->_type) {
    case CU_MEM_HANDLE_TYPE_NONE:

    /* "cuda/_lib/utils.pyx":451
 *             pass
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):
 *             self._cptr = <void*>&self._int             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 *             self._cptr = <void*>&self._int
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_int));

    /* "cuda/_lib/utils.pyx":450
 *         if False:
 *             pass
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR:

    /* "cuda/_lib/utils.pyx":453
 *             self._cptr = <void*>&self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 *             self._cptr = <void*>&self._int             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 *             self._cptr = <void*>&self._handle
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_int));

    /* "cuda/_lib/utils.pyx":452
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):
 *             self._cptr = <void*>&self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_WIN32:

    /* "cuda/_lib/utils.pyx":455
 *             self._cptr = <void*>&self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 *             self._cptr = <void*>&self._handle             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 *             self._cptr = <void*>&self._d3dkmt_handle
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_handle));

    /* "cuda/_lib/utils.pyx":454
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 *             self._cptr = <void*>&self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_WIN32_KMT:

    /* "cuda/_lib/utils.pyx":457
 *             self._cptr = <void*>&self._handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 *             self._cptr = <void*>&self._d3dkmt_handle             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):
 *             self._mem_fabric_handle = cuda.CUmemFabricHandle()
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_d3dkmt_handle));

    /* "cuda/_lib/utils.pyx":456
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 *             self._cptr = <void*>&self._handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):             # <<<<<<<<<<<<<<
 *             self._cptr = <void*>&self._d3dkmt_handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_FABRIC:

    /* "cuda/_lib/utils.pyx":459
 *             self._cptr = <void*>&self._d3dkmt_handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):
 *             self._mem_fabric_handle = cuda.CUmemFabricHandle()             # <<<<<<<<<<<<<<
 *             self._cptr = <void*><void_ptr>self._mem_fabric_handle.getPtr()
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cuda_4cuda_CUmemFabricHandle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->_mem_fabric_handle);
    __Pyx_DECREF((PyObject *)__pyx_v_self->_mem_fabric_handle);
    __pyx_v_self->_mem_fabric_handle = ((struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cuda/_lib/utils.pyx":460
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):
 *             self._mem_fabric_handle = cuda.CUmemFabricHandle()
 *             self._cptr = <void*><void_ptr>self._mem_fabric_handle.getPtr()             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_mem_fabric_handle), __pyx_n_s_getPtr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_6 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_6));

    /* "cuda/_lib/utils.pyx":458
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 *             self._cptr = <void*>&self._d3dkmt_handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):             # <<<<<<<<<<<<<<
 *             self._mem_fabric_handle = cuda.CUmemFabricHandle()
 *             self._cptr = <void*><void_ptr>self._mem_fabric_handle.getPtr()
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":462
 *             self._cptr = <void*><void_ptr>self._mem_fabric_handle.getPtr()
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 462, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":446
 * 
 * cdef class HelperCUmemAllocationHandleType:
 *     def __cinit__(self, attr):             # <<<<<<<<<<<<<<
 *         self._type = attr.value
 *         if False:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemAllocationHandleType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":464
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 464, 0, __PYX_ERR(0, 464, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUmemAllocationHandleType.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":467
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 467, 0, __PYX_ERR(0, 467, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":469
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 *     def pyObj(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":467
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemAllocationHandleType.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":471
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if False:
 *             pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4pyObj, "HelperCUmemAllocationHandleType.pyObj(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_5pyObj = {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4pyObj};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_5pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyObj (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("pyObj", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "pyObj", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4pyObj(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__25)
  __Pyx_RefNannySetupContext("pyObj", 1);
  __Pyx_TraceCall("pyObj", __pyx_f[0], 471, 0, __PYX_ERR(0, 471, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":472
 * 
 *     def pyObj(self):
 *         if False:             # <<<<<<<<<<<<<<
 *             pass
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):
 */
  switch (__pyx_v_self->_type) {
    case CU_MEM_HANDLE_TYPE_NONE:

    /* "cuda/_lib/utils.pyx":475
 *             pass
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):
 *             return self._int             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 *             return self._int
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":474
 *         if False:
 *             pass
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):             # <<<<<<<<<<<<<<
 *             return self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR:

    /* "cuda/_lib/utils.pyx":477
 *             return self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 *             return self._int             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 *             return <void_ptr>self._handle
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":476
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_NONE,):
 *             return self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):             # <<<<<<<<<<<<<<
 *             return self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_WIN32:

    /* "cuda/_lib/utils.pyx":479
 *             return self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 *             return <void_ptr>self._handle             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 *             return self._d3dkmt_handle
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_handle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":478
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR,):
 *             return self._int
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):             # <<<<<<<<<<<<<<
 *             return <void_ptr>self._handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_WIN32_KMT:

    /* "cuda/_lib/utils.pyx":481
 *             return <void_ptr>self._handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 *             return self._d3dkmt_handle             # <<<<<<<<<<<<<<
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):
 *             return self._mem_fabric_handle
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_d3dkmt_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":480
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32,):
 *             return <void_ptr>self._handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):             # <<<<<<<<<<<<<<
 *             return self._d3dkmt_handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):
 */
    break;
    case CU_MEM_HANDLE_TYPE_FABRIC:

    /* "cuda/_lib/utils.pyx":483
 *             return self._d3dkmt_handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):
 *             return self._mem_fabric_handle             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(self._type))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self->_mem_fabric_handle);
    __pyx_r = ((PyObject *)__pyx_v_self->_mem_fabric_handle);
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":482
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_WIN32_KMT,):
 *             return self._d3dkmt_handle
 *         elif self._type in (ccuda.CUmemAllocationHandleType_enum.CU_MEM_HANDLE_TYPE_FABRIC,):             # <<<<<<<<<<<<<<
 *             return self._mem_fabric_handle
 *         else:
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":485
 *             return self._mem_fabric_handle
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(self._type))             # <<<<<<<<<<<<<<
 * 
 * cdef class InputVoidPtrPtrHelper:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_enum__CUmemAllocationHandleType_enum(__pyx_v_self->_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 485, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":471
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if False:
 *             pass
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemAllocationHandleType.pyObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_6__reduce_cython__, "HelperCUmemAllocationHandleType.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_6__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_6__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__26)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemAllocationHandleType.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_8__setstate_cython__, "HelperCUmemAllocationHandleType.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_8__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemAllocationHandleType.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_8__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__27)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUmemAllocationHandleType.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":488
 * 
 * cdef class InputVoidPtrPtrHelper:
 *     def __cinit__(self, lst):             # <<<<<<<<<<<<<<
 *         self._cptr = <void**>callocWrapper(len(lst), sizeof(void*))
 *         for idx in range(len(lst)):
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lst = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lst,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lst)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 488, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_lst = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 488, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.InputVoidPtrPtrHelper.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)__pyx_v_self), __pyx_v_lst);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self, PyObject *__pyx_v_lst) {
  Py_ssize_t __pyx_v_idx;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  void *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __pyx_t_4cuda_4_lib_5utils_void_ptr __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 488, 0, __PYX_ERR(0, 488, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":489
 * cdef class InputVoidPtrPtrHelper:
 *     def __cinit__(self, lst):
 *         self._cptr = <void**>callocWrapper(len(lst), sizeof(void*))             # <<<<<<<<<<<<<<
 *         for idx in range(len(lst)):
 *             self._cptr[idx] = <void*><void_ptr>lst[idx].cptr
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_lst); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(void *))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_4cuda_4_lib_5utils_callocWrapper(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_4 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->_cptr = ((void **)__pyx_t_4);

  /* "cuda/_lib/utils.pyx":490
 *     def __cinit__(self, lst):
 *         self._cptr = <void**>callocWrapper(len(lst), sizeof(void*))
 *         for idx in range(len(lst)):             # <<<<<<<<<<<<<<
 *             self._cptr[idx] = <void*><void_ptr>lst[idx].cptr
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_lst); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_t_5 = __pyx_t_1;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_idx = __pyx_t_6;

    /* "cuda/_lib/utils.pyx":491
 *         self._cptr = <void**>callocWrapper(len(lst), sizeof(void*))
 *         for idx in range(len(lst)):
 *             self._cptr[idx] = <void*><void_ptr>lst[idx].cptr             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_lst, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_self->_cptr[__pyx_v_idx]) = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_t_7));
  }

  /* "cuda/_lib/utils.pyx":488
 * 
 * cdef class InputVoidPtrPtrHelper:
 *     def __cinit__(self, lst):             # <<<<<<<<<<<<<<
 *         self._cptr = <void**>callocWrapper(len(lst), sizeof(void*))
 *         for idx in range(len(lst)):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cuda._lib.utils.InputVoidPtrPtrHelper.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":493
 *             self._cptr[idx] = <void*><void_ptr>lst[idx].cptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self._cptr)
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_2__dealloc__(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 493, 0, __PYX_ERR(0, 493, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":494
 * 
 *     def __dealloc__(self):
 *         free(self._cptr)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  free(__pyx_v_self->_cptr);

  /* "cuda/_lib/utils.pyx":493
 *             self._cptr[idx] = <void*><void_ptr>lst[idx].cptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self._cptr)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.InputVoidPtrPtrHelper.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":496
 *         free(self._cptr)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 496, 0, __PYX_ERR(0, 496, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":498
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 * cdef class HelperCUcoredumpSettings:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":496
 *         free(self._cptr)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.InputVoidPtrPtrHelper.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4__reduce_cython__, "InputVoidPtrPtrHelper.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.InputVoidPtrPtrHelper.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_6__setstate_cython__, "InputVoidPtrPtrHelper.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_6__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.InputVoidPtrPtrHelper.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_6__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__29)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.InputVoidPtrPtrHelper.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":501
 * 
 * cdef class HelperCUcoredumpSettings:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attrib = attr.value
 */

/* Python wrapper */
static int __pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  PyObject *__pyx_v_init_value = 0;
  PyObject *__pyx_v_is_getter = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,&__pyx_n_s_init_value,&__pyx_n_s_is_getter,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_attr)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_init_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 501, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_getter);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 501, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_attr = values[0];
    __pyx_v_init_value = values[1];
    __pyx_v_is_getter = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 501, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings___cinit__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *)__pyx_v_self), __pyx_v_attr, __pyx_v_init_value, __pyx_v_is_getter);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings___cinit__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self, PyObject *__pyx_v_attr, PyObject *__pyx_v_init_value, PyObject *__pyx_v_is_getter) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  enum CUcoredumpSettings_enum __pyx_t_3;
  void *__pyx_t_4;
  char *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 501, 0, __PYX_ERR(0, 501, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":502
 * cdef class HelperCUcoredumpSettings:
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter             # <<<<<<<<<<<<<<
 *         self._attrib = attr.value
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_getter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 502, __pyx_L1_error)
  __pyx_v_self->_is_getter = __pyx_t_1;

  /* "cuda/_lib/utils.pyx":503
 *     def __cinit__(self, attr, init_value, is_getter=False):
 *         self._is_getter = is_getter
 *         self._attrib = attr.value             # <<<<<<<<<<<<<<
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((enum CUcoredumpSettings_enum)__Pyx_PyInt_As_enum__CUcoredumpSettings_enum(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->_attrib = __pyx_t_3;

  /* "cuda/_lib/utils.pyx":504
 *         self._is_getter = is_getter
 *         self._attrib = attr.value
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,             # <<<<<<<<<<<<<<
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             if self._is_getter:
 */
  switch (__pyx_v_self->_attrib) {
    case CU_COREDUMP_FILE:
    case CU_COREDUMP_PIPE:

    /* "cuda/_lib/utils.pyx":506
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._charstar = <char*>callocWrapper(1024, 1)
 *                 self._cptr = <void*><void_ptr>self._charstar
 */
    if (__pyx_v_self->_is_getter) {

      /* "cuda/_lib/utils.pyx":507
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             if self._is_getter:
 *                 self._charstar = <char*>callocWrapper(1024, 1)             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._charstar
 *                 self._size = 1024
 */
      __pyx_t_4 = __pyx_f_4cuda_4_lib_5utils_callocWrapper(__pyx_int_1024, __pyx_int_1); if (unlikely(__pyx_t_4 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L1_error)
      __pyx_v_self->_charstar = ((char *)__pyx_t_4);

      /* "cuda/_lib/utils.pyx":508
 *             if self._is_getter:
 *                 self._charstar = <char*>callocWrapper(1024, 1)
 *                 self._cptr = <void*><void_ptr>self._charstar             # <<<<<<<<<<<<<<
 *                 self._size = 1024
 *             else:
 */
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_charstar));

      /* "cuda/_lib/utils.pyx":509
 *                 self._charstar = <char*>callocWrapper(1024, 1)
 *                 self._cptr = <void*><void_ptr>self._charstar
 *                 self._size = 1024             # <<<<<<<<<<<<<<
 *             else:
 *                 self._charstar = init_value
 */
      __pyx_v_self->_size = 0x400;

      /* "cuda/_lib/utils.pyx":506
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             if self._is_getter:             # <<<<<<<<<<<<<<
 *                 self._charstar = <char*>callocWrapper(1024, 1)
 *                 self._cptr = <void*><void_ptr>self._charstar
 */
      goto __pyx_L3;
    }

    /* "cuda/_lib/utils.pyx":511
 *                 self._size = 1024
 *             else:
 *                 self._charstar = init_value             # <<<<<<<<<<<<<<
 *                 self._cptr = <void*><void_ptr>self._charstar
 *                 self._size = len(init_value)
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_init_value); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L1_error)
      __pyx_v_self->_charstar = __pyx_t_5;

      /* "cuda/_lib/utils.pyx":512
 *             else:
 *                 self._charstar = init_value
 *                 self._cptr = <void*><void_ptr>self._charstar             # <<<<<<<<<<<<<<
 *                 self._size = len(init_value)
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,
 */
      __pyx_v_self->_cptr = ((void *)((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_charstar));

      /* "cuda/_lib/utils.pyx":513
 *                 self._charstar = init_value
 *                 self._cptr = <void*><void_ptr>self._charstar
 *                 self._size = len(init_value)             # <<<<<<<<<<<<<<
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_init_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 513, __pyx_L1_error)
      __pyx_v_self->_size = __pyx_t_6;
    }
    __pyx_L3:;

    /* "cuda/_lib/utils.pyx":504
 *         self._is_getter = is_getter
 *         self._attrib = attr.value
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,             # <<<<<<<<<<<<<<
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             if self._is_getter:
 */
    break;
    case CU_COREDUMP_ENABLE_ON_EXCEPTION:

    /* "cuda/_lib/utils.pyx":514
 *                 self._cptr = <void*><void_ptr>self._charstar
 *                 self._size = len(init_value)
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 */
    case CU_COREDUMP_TRIGGER_HOST:

    /* "cuda/_lib/utils.pyx":515
 *                 self._size = len(init_value)
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 */
    case CU_COREDUMP_LIGHTWEIGHT:

    /* "cuda/_lib/utils.pyx":516
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 *             if self._is_getter == False:
 */
    case CU_COREDUMP_ENABLE_USER_TRIGGER:

    /* "cuda/_lib/utils.pyx":518
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 *             if self._is_getter == False:             # <<<<<<<<<<<<<<
 *                 self._bool = init_value
 * 
 */
    __pyx_t_1 = (__pyx_v_self->_is_getter == 0);
    if (__pyx_t_1) {

      /* "cuda/_lib/utils.pyx":519
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 *             if self._is_getter == False:
 *                 self._bool = init_value             # <<<<<<<<<<<<<<
 * 
 *             self._cptr = <void*>&self._bool
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_init_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L1_error)
      __pyx_v_self->_bool = __pyx_t_1;

      /* "cuda/_lib/utils.pyx":518
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 *             if self._is_getter == False:             # <<<<<<<<<<<<<<
 *                 self._bool = init_value
 * 
 */
    }

    /* "cuda/_lib/utils.pyx":521
 *                 self._bool = init_value
 * 
 *             self._cptr = <void*>&self._bool             # <<<<<<<<<<<<<<
 *             self._size = 1
 *         else:
 */
    __pyx_v_self->_cptr = ((void *)(&__pyx_v_self->_bool));

    /* "cuda/_lib/utils.pyx":522
 * 
 *             self._cptr = <void*>&self._bool
 *             self._size = 1             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 */
    __pyx_v_self->_size = 1;

    /* "cuda/_lib/utils.pyx":514
 *                 self._cptr = <void*><void_ptr>self._charstar
 *                 self._size = len(init_value)
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":524
 *             self._size = 1
 *         else:
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_attr, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_10 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 524, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":501
 * 
 * cdef class HelperCUcoredumpSettings:
 *     def __cinit__(self, attr, init_value, is_getter=False):             # <<<<<<<<<<<<<<
 *         self._is_getter = is_getter
 *         self._attrib = attr.value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":526
 *             raise TypeError('Unsupported attribute: {}'.format(attr.name))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_2__dealloc__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self) {
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 526, 0, __PYX_ERR(0, 526, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cuda._lib.utils.HelperCUcoredumpSettings.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
}

/* "cuda/_lib/utils.pyx":529
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4cptr_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4cptr___get__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4cptr___get__(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_TraceCall("__get__", __pyx_f[0], 529, 0, __PYX_ERR(0, 529, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":531
 *     @property
 *     def cptr(self):
 *         return <void_ptr>self._cptr             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((__pyx_t_4cuda_4_lib_5utils_void_ptr)__pyx_v_self->_cptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":529
 *         pass
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def cptr(self):
 *         return <void_ptr>self._cptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":533
 *         return <void_ptr>self._cptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self._size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_5size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4size, "HelperCUcoredumpSettings.size(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_5size = {"size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_5size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4size};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_5size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "size", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4size(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4size(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__30)
  __Pyx_RefNannySetupContext("size", 1);
  __Pyx_TraceCall("size", __pyx_f[0], 533, 0, __PYX_ERR(0, 533, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":534
 * 
 *     def size(self):
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def pyObj(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cuda/_lib/utils.pyx":533
 *         return <void_ptr>self._cptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self._size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cuda/_lib/utils.pyx":536
 *         return self._size
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_7pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_6pyObj, "HelperCUcoredumpSettings.pyObj(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_7pyObj = {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_7pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_6pyObj};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_7pyObj(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyObj (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("pyObj", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "pyObj", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_6pyObj(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_6pyObj(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__31)
  __Pyx_RefNannySetupContext("pyObj", 1);
  __Pyx_TraceCall("pyObj", __pyx_f[0], 536, 0, __PYX_ERR(0, 536, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":537
 * 
 *     def pyObj(self):
 *         assert(self._is_getter == True)             # <<<<<<<<<<<<<<
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_self->_is_getter == 1);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 537, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 537, __pyx_L1_error)
  #endif

  /* "cuda/_lib/utils.pyx":538
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,             # <<<<<<<<<<<<<<
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             return self._charstar
 */
  switch (__pyx_v_self->_attrib) {
    case CU_COREDUMP_FILE:
    case CU_COREDUMP_PIPE:

    /* "cuda/_lib/utils.pyx":540
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             return self._charstar             # <<<<<<<<<<<<<<
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_self->_charstar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":538
 *     def pyObj(self):
 *         assert(self._is_getter == True)
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,             # <<<<<<<<<<<<<<
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             return self._charstar
 */
    break;
    case CU_COREDUMP_ENABLE_ON_EXCEPTION:

    /* "cuda/_lib/utils.pyx":541
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             return self._charstar
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 */
    case CU_COREDUMP_TRIGGER_HOST:

    /* "cuda/_lib/utils.pyx":542
 *             return self._charstar
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 */
    case CU_COREDUMP_LIGHTWEIGHT:

    /* "cuda/_lib/utils.pyx":543
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 *             return self._bool
 */
    case CU_COREDUMP_ENABLE_USER_TRIGGER:

    /* "cuda/_lib/utils.pyx":545
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_USER_TRIGGER,):
 *             return self._bool             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attrib))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->_bool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cuda/_lib/utils.pyx":541
 *                           ccuda.CUcoredumpSettings_enum.CU_COREDUMP_PIPE,):
 *             return self._charstar
 *         elif self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_ENABLE_ON_EXCEPTION,             # <<<<<<<<<<<<<<
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_TRIGGER_HOST,
 *                             ccuda.CUcoredumpSettings_enum.CU_COREDUMP_LIGHTWEIGHT,
 */
    break;
    default:

    /* "cuda/_lib/utils.pyx":547
 *             return self._bool
 *         else:
 *             raise TypeError('Unsupported attribute value: {}'.format(self._attrib))             # <<<<<<<<<<<<<<
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unsupported_attribute_value, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_enum__CUcoredumpSettings_enum(__pyx_v_self->_attrib); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 547, __pyx_L1_error)
    break;
  }

  /* "cuda/_lib/utils.pyx":536
 *         return self._size
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.pyObj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_8__reduce_cython__, "HelperCUcoredumpSettings.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_8__reduce_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_8__reduce_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__32)
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_10__setstate_cython__, "HelperCUcoredumpSettings.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_10__setstate_cython__};
static PyObject *__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_10__setstate_cython__(((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__33)
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cuda._lib.utils.HelperCUcoredumpSettings.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperKernelParams(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams *)o);
  p->_pybuffer.obj = NULL;
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperKernelParams(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperKernelParams) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_18HelperKernelParams_ckernelParams(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_13ckernelParams_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperKernelParams[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_6__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperKernelParams_5__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperKernelParams_8__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperKernelParams_7__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperKernelParams[] = {
  {(char *)"ckernelParams", __pyx_getprop_4cuda_4_lib_5utils_18HelperKernelParams_ckernelParams, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperKernelParams_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperKernelParams},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperKernelParams},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperKernelParams},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperKernelParams},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperKernelParams_spec = {
  "cuda._lib.utils.HelperKernelParams",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_4cuda_4_lib_5utils_HelperKernelParams_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperKernelParams = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperKernelParams", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperKernelParams), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperKernelParams, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperKernelParams, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperKernelParams, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperKernelParams, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperInputVoidPtr(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr *)o);
  p->_pybuffer.obj = NULL;
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperInputVoidPtr(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperInputVoidPtr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_18HelperInputVoidPtr_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperInputVoidPtr[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperInputVoidPtr_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperInputVoidPtr_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperInputVoidPtr_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperInputVoidPtr[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_18HelperInputVoidPtr_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperInputVoidPtr},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperInputVoidPtr},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperInputVoidPtr},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperInputVoidPtr},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr_spec = {
  "cuda._lib.utils.HelperInputVoidPtr",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperInputVoidPtr", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperInputVoidPtr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperInputVoidPtr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperInputVoidPtr, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperInputVoidPtr, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperInputVoidPtr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemPool_attribute(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)o);
  p->_cuuint64_t_val = ((struct __pyx_obj_4cuda_4cuda_cuuint64_t *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemPool_attribute(PyObject *o) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemPool_attribute) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_cuuint64_t_val);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUmemPool_attribute(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)o;
  if (p->_cuuint64_t_val) {
    e = (*v)(((PyObject *)p->_cuuint64_t_val), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUmemPool_attribute(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute *)o;
  tmp = ((PyObject*)p->_cuuint64_t_val);
  p->_cuuint64_t_val = ((struct __pyx_obj_4cuda_4cuda_cuuint64_t *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUmemPool_attribute[] = {
  {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_4pyObj},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUmemPool_attribute[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemPool_attribute},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUmemPool_attribute},
  {Py_tp_clear, (void *)__pyx_tp_clear_4cuda_4_lib_5utils_HelperCUmemPool_attribute},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUmemPool_attribute},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUmemPool_attribute},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemPool_attribute},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute_spec = {
  "cuda._lib.utils.HelperCUmemPool_attribute",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUmemPool_attribute", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemPool_attribute), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemPool_attribute, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUmemPool_attribute, /*tp_traverse*/
  __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUmemPool_attribute, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUmemPool_attribute, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUmemPool_attribute, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemPool_attribute, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmem_range_attribute(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmem_range_attribute(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmem_range_attribute) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUmem_range_attribute[] = {
  {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_4pyObj},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUmem_range_attribute[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmem_range_attribute},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUmem_range_attribute},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUmem_range_attribute},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmem_range_attribute},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute_spec = {
  "cuda._lib.utils.HelperCUmem_range_attribute",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUmem_range_attribute", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmem_range_attribute), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmem_range_attribute, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUmem_range_attribute, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUmem_range_attribute, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUmem_range_attribute, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUpointer_attribute(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)o);
  p->_ctx = ((struct __pyx_obj_4cuda_4cuda_CUcontext *)Py_None); Py_INCREF(Py_None);
  p->_devptr = ((struct __pyx_obj_4cuda_4cuda_CUdeviceptr *)Py_None); Py_INCREF(Py_None);
  p->_token = ((struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS *)Py_None); Py_INCREF(Py_None);
  p->_mempool = ((struct __pyx_obj_4cuda_4cuda_CUmemoryPool *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUpointer_attribute(PyObject *o) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUpointer_attribute) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_ctx);
  Py_CLEAR(p->_devptr);
  Py_CLEAR(p->_token);
  Py_CLEAR(p->_mempool);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUpointer_attribute(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)o;
  if (p->_ctx) {
    e = (*v)(((PyObject *)p->_ctx), a); if (e) return e;
  }
  if (p->_devptr) {
    e = (*v)(((PyObject *)p->_devptr), a); if (e) return e;
  }
  if (p->_token) {
    e = (*v)(((PyObject *)p->_token), a); if (e) return e;
  }
  if (p->_mempool) {
    e = (*v)(((PyObject *)p->_mempool), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUpointer_attribute(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute *)o;
  tmp = ((PyObject*)p->_ctx);
  p->_ctx = ((struct __pyx_obj_4cuda_4cuda_CUcontext *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_devptr);
  p->_devptr = ((struct __pyx_obj_4cuda_4cuda_CUdeviceptr *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_token);
  p->_token = ((struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_mempool);
  p->_mempool = ((struct __pyx_obj_4cuda_4cuda_CUmemoryPool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_25HelperCUpointer_attribute_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUpointer_attribute[] = {
  {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_4pyObj},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_25HelperCUpointer_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_25HelperCUpointer_attribute_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUpointer_attribute[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_25HelperCUpointer_attribute_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUpointer_attribute},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUpointer_attribute},
  {Py_tp_clear, (void *)__pyx_tp_clear_4cuda_4_lib_5utils_HelperCUpointer_attribute},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUpointer_attribute},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUpointer_attribute},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUpointer_attribute},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute_spec = {
  "cuda._lib.utils.HelperCUpointer_attribute",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUpointer_attribute", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUpointer_attribute), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUpointer_attribute, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUpointer_attribute, /*tp_traverse*/
  __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUpointer_attribute, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUpointer_attribute, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUpointer_attribute, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUpointer_attribute, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUgraphMem_attribute(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)o);
  p->_cuuint64_t_val = ((struct __pyx_obj_4cuda_4cuda_cuuint64_t *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUgraphMem_attribute(PyObject *o) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUgraphMem_attribute) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_cuuint64_t_val);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUgraphMem_attribute(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)o;
  if (p->_cuuint64_t_val) {
    e = (*v)(((PyObject *)p->_cuuint64_t_val), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUgraphMem_attribute(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute *)o;
  tmp = ((PyObject*)p->_cuuint64_t_val);
  p->_cuuint64_t_val = ((struct __pyx_obj_4cuda_4cuda_cuuint64_t *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUgraphMem_attribute[] = {
  {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_4pyObj},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUgraphMem_attribute[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUgraphMem_attribute},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUgraphMem_attribute},
  {Py_tp_clear, (void *)__pyx_tp_clear_4cuda_4_lib_5utils_HelperCUgraphMem_attribute},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUgraphMem_attribute},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUgraphMem_attribute},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUgraphMem_attribute},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute_spec = {
  "cuda._lib.utils.HelperCUgraphMem_attribute",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUgraphMem_attribute", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUgraphMem_attribute), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUgraphMem_attribute, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUgraphMem_attribute, /*tp_traverse*/
  __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUgraphMem_attribute, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUgraphMem_attribute, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUgraphMem_attribute, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUgraphMem_attribute, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUjit_option(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)o);
  new((void*)&(p->_charstarstar)) std::vector<char *> ();
  p->_voidstarstar = ((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUjit_option(PyObject *o) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUjit_option) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->_charstarstar);
  Py_CLEAR(p->_voidstarstar);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUjit_option(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)o;
  if (p->_voidstarstar) {
    e = (*v)(((PyObject *)p->_voidstarstar), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUjit_option(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option *)o;
  tmp = ((PyObject*)p->_voidstarstar);
  p->_voidstarstar = ((struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_18HelperCUjit_option_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUjit_option[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperCUjit_option_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_18HelperCUjit_option_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_18HelperCUjit_option_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUjit_option[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_18HelperCUjit_option_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUjit_option_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUjit_option},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUjit_option},
  {Py_tp_clear, (void *)__pyx_tp_clear_4cuda_4_lib_5utils_HelperCUjit_option},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUjit_option},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUjit_option},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUjit_option},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUjit_option_spec = {
  "cuda._lib.utils.HelperCUjit_option",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4cuda_4_lib_5utils_HelperCUjit_option_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUjit_option = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUjit_option", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUjit_option), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUjit_option, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUjit_option, /*tp_traverse*/
  __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUjit_option, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUjit_option, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUjit_option, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUjit_option, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUlibraryOption(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUlibraryOption(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUlibraryOption) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_21HelperCUlibraryOption_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUlibraryOption[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21HelperCUlibraryOption_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21HelperCUlibraryOption_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21HelperCUlibraryOption_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUlibraryOption[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_21HelperCUlibraryOption_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUlibraryOption},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUlibraryOption},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUlibraryOption},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUlibraryOption},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption_spec = {
  "cuda._lib.utils.HelperCUlibraryOption",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUlibraryOption", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUlibraryOption), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUlibraryOption, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUlibraryOption, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUlibraryOption, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUlibraryOption, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)o);
  p->_mem_fabric_handle = ((struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType(PyObject *o) {
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_mem_fabric_handle);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)o;
  if (p->_mem_fabric_handle) {
    e = (*v)(((PyObject *)p->_mem_fabric_handle), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *p = (struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType *)o;
  tmp = ((PyObject*)p->_mem_fabric_handle);
  p->_mem_fabric_handle = ((struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType[] = {
  {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_5pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_4pyObj},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType},
  {Py_tp_clear, (void *)__pyx_tp_clear_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType_spec = {
  "cuda._lib.utils.HelperCUmemAllocationHandleType",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUmemAllocationHandleType", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType, /*tp_traverse*/
  __pyx_tp_clear_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_InputVoidPtrPtrHelper(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_InputVoidPtrPtrHelper(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_InputVoidPtrPtrHelper) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_InputVoidPtrPtrHelper[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_InputVoidPtrPtrHelper[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_InputVoidPtrPtrHelper},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_InputVoidPtrPtrHelper},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_InputVoidPtrPtrHelper},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_InputVoidPtrPtrHelper},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper_spec = {
  "cuda._lib.utils.InputVoidPtrPtrHelper",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""InputVoidPtrPtrHelper", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_InputVoidPtrPtrHelper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_InputVoidPtrPtrHelper, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_InputVoidPtrPtrHelper, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_InputVoidPtrPtrHelper, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_InputVoidPtrPtrHelper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_4cuda_4_lib_5utils_HelperCUcoredumpSettings(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUcoredumpSettings(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUcoredumpSettings) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_4cuda_4_lib_5utils_HelperCUcoredumpSettings[] = {
  {"size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_5size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_4size},
  {"pyObj", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_7pyObj, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_6pyObj},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cuda_4_lib_5utils_HelperCUcoredumpSettings[] = {
  {(char *)"cptr", __pyx_getprop_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUcoredumpSettings},
  {Py_tp_methods, (void *)__pyx_methods_4cuda_4_lib_5utils_HelperCUcoredumpSettings},
  {Py_tp_getset, (void *)__pyx_getsets_4cuda_4_lib_5utils_HelperCUcoredumpSettings},
  {Py_tp_new, (void *)__pyx_tp_new_4cuda_4_lib_5utils_HelperCUcoredumpSettings},
  {0, 0},
};
static PyType_Spec __pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings_spec = {
  "cuda._lib.utils.HelperCUcoredumpSettings",
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings_slots,
};
#else

static PyTypeObject __pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings = {
  PyVarObject_HEAD_INIT(0, 0)
  "cuda._lib.utils.""HelperCUcoredumpSettings", /*tp_name*/
  sizeof(struct __pyx_obj_4cuda_4_lib_5utils_HelperCUcoredumpSettings), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cuda_4_lib_5utils_HelperCUcoredumpSettings, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cuda_4_lib_5utils_HelperCUcoredumpSettings, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cuda_4_lib_5utils_HelperCUcoredumpSettings, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cuda_4_lib_5utils_HelperCUcoredumpSettings, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_Argument_kernelParams_failed_to, __pyx_k_Argument_kernelParams_failed_to, sizeof(__pyx_k_Argument_kernelParams_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_Argument_kernelParams_has_tuples, __pyx_k_Argument_kernelParams_has_tuples, sizeof(__pyx_k_Argument_kernelParams_has_tuples), 0, 1, 0, 0},
    {&__pyx_kp_u_Argument_kernelParams_is_not_a_v, __pyx_k_Argument_kernelParams_is_not_a_v, sizeof(__pyx_k_Argument_kernelParams_is_not_a_v), 0, 1, 0, 0},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
    {&__pyx_kp_u_Failed_to_allocated_length_x_siz, __pyx_k_Failed_to_allocated_length_x_siz, sizeof(__pyx_k_Failed_to_allocated_length_x_siz), 0, 1, 0, 0},
    {&__pyx_kp_u_Failed_to_retrieve_buffer_throug, __pyx_k_Failed_to_retrieve_buffer_throug, sizeof(__pyx_k_Failed_to_retrieve_buffer_throug), 0, 1, 0, 0},
    {&__pyx_n_s_HelperCUcoredumpSettings, __pyx_k_HelperCUcoredumpSettings, sizeof(__pyx_k_HelperCUcoredumpSettings), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUcoredumpSettings___reduc, __pyx_k_HelperCUcoredumpSettings___reduc, sizeof(__pyx_k_HelperCUcoredumpSettings___reduc), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUcoredumpSettings___setst, __pyx_k_HelperCUcoredumpSettings___setst, sizeof(__pyx_k_HelperCUcoredumpSettings___setst), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUcoredumpSettings_pyObj, __pyx_k_HelperCUcoredumpSettings_pyObj, sizeof(__pyx_k_HelperCUcoredumpSettings_pyObj), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUcoredumpSettings_size, __pyx_k_HelperCUcoredumpSettings_size, sizeof(__pyx_k_HelperCUcoredumpSettings_size), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUgraphMem_attribute, __pyx_k_HelperCUgraphMem_attribute, sizeof(__pyx_k_HelperCUgraphMem_attribute), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUgraphMem_attribute___red, __pyx_k_HelperCUgraphMem_attribute___red, sizeof(__pyx_k_HelperCUgraphMem_attribute___red), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUgraphMem_attribute___set, __pyx_k_HelperCUgraphMem_attribute___set, sizeof(__pyx_k_HelperCUgraphMem_attribute___set), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUgraphMem_attribute_pyObj, __pyx_k_HelperCUgraphMem_attribute_pyObj, sizeof(__pyx_k_HelperCUgraphMem_attribute_pyObj), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUjit_option, __pyx_k_HelperCUjit_option, sizeof(__pyx_k_HelperCUjit_option), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUjit_option___reduce_cyth, __pyx_k_HelperCUjit_option___reduce_cyth, sizeof(__pyx_k_HelperCUjit_option___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUjit_option___setstate_cy, __pyx_k_HelperCUjit_option___setstate_cy, sizeof(__pyx_k_HelperCUjit_option___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUlibraryOption, __pyx_k_HelperCUlibraryOption, sizeof(__pyx_k_HelperCUlibraryOption), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUlibraryOption___reduce_c, __pyx_k_HelperCUlibraryOption___reduce_c, sizeof(__pyx_k_HelperCUlibraryOption___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUlibraryOption___setstate, __pyx_k_HelperCUlibraryOption___setstate, sizeof(__pyx_k_HelperCUlibraryOption___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemAllocationHandleType, __pyx_k_HelperCUmemAllocationHandleType, sizeof(__pyx_k_HelperCUmemAllocationHandleType), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemAllocationHandleType_2, __pyx_k_HelperCUmemAllocationHandleType_2, sizeof(__pyx_k_HelperCUmemAllocationHandleType_2), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemAllocationHandleType_3, __pyx_k_HelperCUmemAllocationHandleType_3, sizeof(__pyx_k_HelperCUmemAllocationHandleType_3), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemAllocationHandleType_4, __pyx_k_HelperCUmemAllocationHandleType_4, sizeof(__pyx_k_HelperCUmemAllocationHandleType_4), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemPool_attribute, __pyx_k_HelperCUmemPool_attribute, sizeof(__pyx_k_HelperCUmemPool_attribute), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemPool_attribute___redu, __pyx_k_HelperCUmemPool_attribute___redu, sizeof(__pyx_k_HelperCUmemPool_attribute___redu), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemPool_attribute___sets, __pyx_k_HelperCUmemPool_attribute___sets, sizeof(__pyx_k_HelperCUmemPool_attribute___sets), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmemPool_attribute_pyObj, __pyx_k_HelperCUmemPool_attribute_pyObj, sizeof(__pyx_k_HelperCUmemPool_attribute_pyObj), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmem_range_attribute, __pyx_k_HelperCUmem_range_attribute, sizeof(__pyx_k_HelperCUmem_range_attribute), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmem_range_attribute___re, __pyx_k_HelperCUmem_range_attribute___re, sizeof(__pyx_k_HelperCUmem_range_attribute___re), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmem_range_attribute___se, __pyx_k_HelperCUmem_range_attribute___se, sizeof(__pyx_k_HelperCUmem_range_attribute___se), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUmem_range_attribute_pyOb, __pyx_k_HelperCUmem_range_attribute_pyOb, sizeof(__pyx_k_HelperCUmem_range_attribute_pyOb), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUpointer_attribute, __pyx_k_HelperCUpointer_attribute, sizeof(__pyx_k_HelperCUpointer_attribute), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUpointer_attribute___redu, __pyx_k_HelperCUpointer_attribute___redu, sizeof(__pyx_k_HelperCUpointer_attribute___redu), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUpointer_attribute___sets, __pyx_k_HelperCUpointer_attribute___sets, sizeof(__pyx_k_HelperCUpointer_attribute___sets), 0, 0, 1, 1},
    {&__pyx_n_s_HelperCUpointer_attribute_pyObj, __pyx_k_HelperCUpointer_attribute_pyObj, sizeof(__pyx_k_HelperCUpointer_attribute_pyObj), 0, 0, 1, 1},
    {&__pyx_n_s_HelperInputVoidPtr, __pyx_k_HelperInputVoidPtr, sizeof(__pyx_k_HelperInputVoidPtr), 0, 0, 1, 1},
    {&__pyx_n_s_HelperInputVoidPtr___reduce_cyth, __pyx_k_HelperInputVoidPtr___reduce_cyth, sizeof(__pyx_k_HelperInputVoidPtr___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_HelperInputVoidPtr___setstate_cy, __pyx_k_HelperInputVoidPtr___setstate_cy, sizeof(__pyx_k_HelperInputVoidPtr___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_HelperKernelParams, __pyx_k_HelperKernelParams, sizeof(__pyx_k_HelperKernelParams), 0, 0, 1, 1},
    {&__pyx_n_s_HelperKernelParams___reduce_cyth, __pyx_k_HelperKernelParams___reduce_cyth, sizeof(__pyx_k_HelperKernelParams___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_HelperKernelParams___setstate_cy, __pyx_k_HelperKernelParams___setstate_cy, sizeof(__pyx_k_HelperKernelParams___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_HelperKernelParams_lambda, __pyx_k_HelperKernelParams_lambda, sizeof(__pyx_k_HelperKernelParams_lambda), 0, 0, 1, 1},
    {&__pyx_n_s_InputVoidPtrPtrHelper, __pyx_k_InputVoidPtrPtrHelper, sizeof(__pyx_k_InputVoidPtrPtrHelper), 0, 0, 1, 1},
    {&__pyx_n_s_InputVoidPtrPtrHelper___reduce_c, __pyx_k_InputVoidPtrPtrHelper___reduce_c, sizeof(__pyx_k_InputVoidPtrPtrHelper___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_InputVoidPtrPtrHelper___setstate, __pyx_k_InputVoidPtrPtrHelper___setstate, sizeof(__pyx_k_InputVoidPtrPtrHelper___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_kp_u_Provided_argument_is_of_type_but, __pyx_k_Provided_argument_is_of_type_but, sizeof(__pyx_k_Provided_argument_is_of_type_but), 0, 1, 0, 0},
    {&__pyx_kp_u_Provided_argument_is_of_type_but_2, __pyx_k_Provided_argument_is_of_type_but_2, sizeof(__pyx_k_Provided_argument_is_of_type_but_2), 0, 1, 0, 0},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s_Structure, __pyx_k_Structure, sizeof(__pyx_k_Structure), 0, 0, 1, 1},
    {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_u_Unsupported_attribute, __pyx_k_Unsupported_attribute, sizeof(__pyx_k_Unsupported_attribute), 0, 1, 0, 0},
    {&__pyx_kp_u_Unsupported_attribute_value, __pyx_k_Unsupported_attribute_value, sizeof(__pyx_k_Unsupported_attribute_value), 0, 1, 0, 0},
    {&__pyx_kp_u_Unsupported_type, __pyx_k_Unsupported_type, sizeof(__pyx_k_Unsupported_type), 0, 1, 0, 0},
    {&__pyx_kp_u__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 1, 0, 0},
    {&__pyx_n_s__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 1},
    {&__pyx_n_s__40, __pyx_k__40, sizeof(__pyx_k__40), 0, 0, 1, 1},
    {&__pyx_n_s_addressof, __pyx_k_addressof, sizeof(__pyx_k_addressof), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_attr, __pyx_k_attr, sizeof(__pyx_k_attr), 0, 0, 1, 1},
    {&__pyx_n_s_c_bool, __pyx_k_c_bool, sizeof(__pyx_k_c_bool), 0, 0, 1, 1},
    {&__pyx_n_s_c_byte, __pyx_k_c_byte, sizeof(__pyx_k_c_byte), 0, 0, 1, 1},
    {&__pyx_n_s_c_char, __pyx_k_c_char, sizeof(__pyx_k_c_char), 0, 0, 1, 1},
    {&__pyx_n_s_c_double, __pyx_k_c_double, sizeof(__pyx_k_c_double), 0, 0, 1, 1},
    {&__pyx_n_s_c_float, __pyx_k_c_float, sizeof(__pyx_k_c_float), 0, 0, 1, 1},
    {&__pyx_n_s_c_int, __pyx_k_c_int, sizeof(__pyx_k_c_int), 0, 0, 1, 1},
    {&__pyx_n_s_c_long, __pyx_k_c_long, sizeof(__pyx_k_c_long), 0, 0, 1, 1},
    {&__pyx_n_s_c_longlong, __pyx_k_c_longlong, sizeof(__pyx_k_c_longlong), 0, 0, 1, 1},
    {&__pyx_n_s_c_short, __pyx_k_c_short, sizeof(__pyx_k_c_short), 0, 0, 1, 1},
    {&__pyx_n_s_c_size_t, __pyx_k_c_size_t, sizeof(__pyx_k_c_size_t), 0, 0, 1, 1},
    {&__pyx_n_s_c_ubyte, __pyx_k_c_ubyte, sizeof(__pyx_k_c_ubyte), 0, 0, 1, 1},
    {&__pyx_n_s_c_uint, __pyx_k_c_uint, sizeof(__pyx_k_c_uint), 0, 0, 1, 1},
    {&__pyx_n_s_c_ulong, __pyx_k_c_ulong, sizeof(__pyx_k_c_ulong), 0, 0, 1, 1},
    {&__pyx_n_s_c_ulonglong, __pyx_k_c_ulonglong, sizeof(__pyx_k_c_ulonglong), 0, 0, 1, 1},
    {&__pyx_n_s_c_ushort, __pyx_k_c_ushort, sizeof(__pyx_k_c_ushort), 0, 0, 1, 1},
    {&__pyx_n_s_c_void_p, __pyx_k_c_void_p, sizeof(__pyx_k_c_void_p), 0, 0, 1, 1},
    {&__pyx_n_s_c_wchar, __pyx_k_c_wchar, sizeof(__pyx_k_c_wchar), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_cptr, __pyx_k_cptr, sizeof(__pyx_k_cptr), 0, 0, 1, 1},
    {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
    {&__pyx_n_s_cuda, __pyx_k_cuda, sizeof(__pyx_k_cuda), 0, 0, 1, 1},
    {&__pyx_n_s_cuda__lib_utils, __pyx_k_cuda__lib_utils, sizeof(__pyx_k_cuda__lib_utils), 0, 0, 1, 1},
    {&__pyx_kp_s_cuda__lib_utils_pyx, __pyx_k_cuda__lib_utils_pyx, sizeof(__pyx_k_cuda__lib_utils_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_cuda_cuda, __pyx_k_cuda_cuda, sizeof(__pyx_k_cuda_cuda), 0, 0, 1, 1},
    {&__pyx_n_s_data_size, __pyx_k_data_size, sizeof(__pyx_k_data_size), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_getPtr, __pyx_k_getPtr, sizeof(__pyx_k_getPtr), 0, 0, 1, 1},
    {&__pyx_n_u_getPtr, __pyx_k_getPtr, sizeof(__pyx_k_getPtr), 0, 1, 0, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_init_value, __pyx_k_init_value, sizeof(__pyx_k_init_value), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_getter, __pyx_k_is_getter, sizeof(__pyx_k_is_getter), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_kernelParams, __pyx_k_kernelParams, sizeof(__pyx_k_kernelParams), 0, 0, 1, 1},
    {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_n_s_lst, __pyx_k_lst, sizeof(__pyx_k_lst), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
    {&__pyx_n_s_max_param_size, __pyx_k_max_param_size, sizeof(__pyx_k_max_param_size), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
    {&__pyx_n_s_pyObj, __pyx_k_pyObj, sizeof(__pyx_k_pyObj), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_sizeof, __pyx_k_sizeof, sizeof(__pyx_k_sizeof), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_supported_types, __pyx_k_supported_types, sizeof(__pyx_k_supported_types), 0, 0, 1, 1},
    {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 193, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 235, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cuda/_lib/utils.pyx":62
 *             err_buffer = PyObject_GetBuffer(kernelParams, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:
 *                 raise RuntimeError("Argument 'kernelParams' failed to retrieve buffer through Buffer Protocol")             # <<<<<<<<<<<<<<
 *             self._pyobj_acquired = True
 *             self._ckernelParams = <void**><void_ptr>self._pybuffer.buf
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Argument_kernelParams_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cuda/_lib/utils.pyx":68
 *             # Hard run, construct and fill out contigues memory using provided kernel values and types based
 *             if len(kernelParams[0]) != len(kernelParams[1]):
 *                 raise TypeError("Argument 'kernelParams' has tuples with different length")             # <<<<<<<<<<<<<<
 *             if len(kernelParams[0]) != 0:
 *                 self._length = len(kernelParams[0])
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Argument_kernelParams_has_tuples); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cuda/_lib/utils.pyx":124
 *                 idx += 1
 *         else:
 *             raise TypeError("Argument 'kernelParams' is not a valid type: Tuple[Tuple[Any, ...], Tuple[Any, ...]] or PyObject implimenting Buffer Protocol or Int")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Argument_kernelParams_is_not_a_v); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cuda/_lib/utils.pyx":149
 *             err_buffer = PyObject_GetBuffer(ptr, &self._pybuffer, PyBUF_SIMPLE | PyBUF_ANY_CONTIGUOUS)
 *             if err_buffer == -1:
 *                 raise RuntimeError("Failed to retrieve buffer through Buffer Protocol")             # <<<<<<<<<<<<<<
 *             self._pyobj_acquired = True
 *             self._cptr = <void*><void_ptr>self._pybuffer.buf
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Failed_to_retrieve_buffer_throug); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "cuda/_lib/utils.pyx":17
 * import ctypes
 * cimport cuda.ccuda as ccuda
 * import cuda.cuda as cuda             # <<<<<<<<<<<<<<
 * cimport cuda._lib.param_packer as param_packer
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_s_cuda, __pyx_n_s_cuda); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cuda/_lib/utils.pyx":192
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 */
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cuda__lib_utils_pyx, __pyx_n_s_pyObj, 192, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 192, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cuda/_lib/utils.pyx":229
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 */
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_idx); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cuda__lib_utils_pyx, __pyx_n_s_pyObj, 229, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 229, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cuda/_lib/utils.pyx":300
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 */
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cuda__lib_utils_pyx, __pyx_n_s_pyObj, 300, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 300, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cuda/_lib/utils.pyx":354
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 */
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cuda__lib_utils_pyx, __pyx_n_s_pyObj, 354, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 354, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cuda/_lib/utils.pyx":471
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if False:
 *             pass
 */
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cuda__lib_utils_pyx, __pyx_n_s_pyObj, 471, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 471, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cuda/_lib/utils.pyx":533
 *         return <void_ptr>self._cptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self._size
 * 
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cuda__lib_utils_pyx, __pyx_n_s_size, 533, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 533, __pyx_L1_error)

  /* "cuda/_lib/utils.pyx":536
 *         return self._size
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cuda__lib_utils_pyx, __pyx_n_s_pyObj, 536, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 536, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1024 = PyInt_FromLong(1024); if (unlikely(!__pyx_int_1024)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperKernelParams_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams)) __PYX_ERR(0, 28, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperKernelParams_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams = &__pyx_type_4cuda_4_lib_5utils_HelperKernelParams;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperKernelParams, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr)) __PYX_ERR(0, 137, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr = &__pyx_type_4cuda_4_lib_5utils_HelperInputVoidPtr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperInputVoidPtr, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperInputVoidPtr) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute)) __PYX_ERR(0, 163, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute = &__pyx_type_4cuda_4_lib_5utils_HelperCUmemPool_attribute;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUmemPool_attribute, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute)) __PYX_ERR(0, 207, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute = &__pyx_type_4cuda_4_lib_5utils_HelperCUmem_range_attribute;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUmem_range_attribute, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute)) __PYX_ERR(0, 239, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute = &__pyx_type_4cuda_4_lib_5utils_HelperCUpointer_attribute;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUpointer_attribute, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute)) __PYX_ERR(0, 331, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute = &__pyx_type_4cuda_4_lib_5utils_HelperCUgraphMem_attribute;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUgraphMem_attribute, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUjit_option_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option)) __PYX_ERR(0, 364, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUjit_option_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option = &__pyx_type_4cuda_4_lib_5utils_HelperCUjit_option;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUjit_option, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUjit_option) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption)) __PYX_ERR(0, 425, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption = &__pyx_type_4cuda_4_lib_5utils_HelperCUlibraryOption;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUlibraryOption, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUlibraryOption) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType)) __PYX_ERR(0, 445, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType = &__pyx_type_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUmemAllocationHandleType, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper)) __PYX_ERR(0, 487, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper_spec, __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper = &__pyx_type_4cuda_4_lib_5utils_InputVoidPtrPtrHelper;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_InputVoidPtrPtrHelper, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_InputVoidPtrPtrHelper) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings_spec, NULL); if (unlikely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings)) __PYX_ERR(0, 500, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings_spec, __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  #else
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings = &__pyx_type_4cuda_4_lib_5utils_HelperCUcoredumpSettings;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings->tp_dictoffset && __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HelperCUcoredumpSettings, (PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cuda.cuda"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cuda_4cuda_CUcontext = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUcontext", sizeof(struct __pyx_obj_4cuda_4cuda_CUcontext), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUcontext),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUcontext) __PYX_ERR(2, 11, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmodule = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmodule", sizeof(struct __pyx_obj_4cuda_4cuda_CUmodule), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmodule),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmodule) __PYX_ERR(2, 25, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUfunction = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUfunction", sizeof(struct __pyx_obj_4cuda_4cuda_CUfunction), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUfunction),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUfunction) __PYX_ERR(2, 39, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlibrary = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlibrary", sizeof(struct __pyx_obj_4cuda_4cuda_CUlibrary), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlibrary),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlibrary) __PYX_ERR(2, 53, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUkernel = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUkernel", sizeof(struct __pyx_obj_4cuda_4cuda_CUkernel), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUkernel),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUkernel) __PYX_ERR(2, 67, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUarray = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUarray", sizeof(struct __pyx_obj_4cuda_4cuda_CUarray), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUarray),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUarray) __PYX_ERR(2, 81, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmipmappedArray = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmipmappedArray", sizeof(struct __pyx_obj_4cuda_4cuda_CUmipmappedArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmipmappedArray),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmipmappedArray) __PYX_ERR(2, 95, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUtexref = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUtexref", sizeof(struct __pyx_obj_4cuda_4cuda_CUtexref), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUtexref),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUtexref) __PYX_ERR(2, 109, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUsurfref = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUsurfref", sizeof(struct __pyx_obj_4cuda_4cuda_CUsurfref), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUsurfref),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUsurfref) __PYX_ERR(2, 123, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUevent = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUevent", sizeof(struct __pyx_obj_4cuda_4cuda_CUevent), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUevent),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUevent) __PYX_ERR(2, 137, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstream = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstream", sizeof(struct __pyx_obj_4cuda_4cuda_CUstream), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstream),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstream) __PYX_ERR(2, 151, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphicsResource = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphicsResource", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphicsResource), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphicsResource),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphicsResource) __PYX_ERR(2, 165, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexternalMemory = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexternalMemory", sizeof(struct __pyx_obj_4cuda_4cuda_CUexternalMemory), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexternalMemory),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexternalMemory) __PYX_ERR(2, 179, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexternalSemaphore = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexternalSemaphore", sizeof(struct __pyx_obj_4cuda_4cuda_CUexternalSemaphore), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexternalSemaphore),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexternalSemaphore) __PYX_ERR(2, 193, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraph = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraph", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraph), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraph),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraph) __PYX_ERR(2, 207, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphNode = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphNode", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphNode), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphNode),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphNode) __PYX_ERR(2, 221, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphExec = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphExec", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphExec), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphExec),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphExec) __PYX_ERR(2, 235, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemoryPool = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemoryPool", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemoryPool), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemoryPool),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemoryPool) __PYX_ERR(2, 249, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUuserObject = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUuserObject", sizeof(struct __pyx_obj_4cuda_4cuda_CUuserObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUuserObject),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUuserObject) __PYX_ERR(2, 263, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlinkState = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlinkState", sizeof(struct __pyx_obj_4cuda_4cuda_CUlinkState), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlinkState),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlinkState) __PYX_ERR(2, 277, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUeglStreamConnection = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUeglStreamConnection", sizeof(struct __pyx_obj_4cuda_4cuda_CUeglStreamConnection), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUeglStreamConnection),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUeglStreamConnection) __PYX_ERR(2, 290, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_EGLImageKHR = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "EGLImageKHR", sizeof(struct __pyx_obj_4cuda_4cuda_EGLImageKHR), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_EGLImageKHR),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_EGLImageKHR) __PYX_ERR(2, 304, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_EGLStreamKHR = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "EGLStreamKHR", sizeof(struct __pyx_obj_4cuda_4cuda_EGLStreamKHR), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_EGLStreamKHR),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_EGLStreamKHR) __PYX_ERR(2, 316, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_EGLSyncKHR = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "EGLSyncKHR", sizeof(struct __pyx_obj_4cuda_4cuda_EGLSyncKHR), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_EGLSyncKHR),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_EGLSyncKHR) __PYX_ERR(2, 328, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUhostFn = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUhostFn", sizeof(struct __pyx_obj_4cuda_4cuda_CUhostFn), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUhostFn),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUhostFn) __PYX_ERR(2, 340, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamCallback = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamCallback", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamCallback), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamCallback),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamCallback) __PYX_ERR(2, 352, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUoccupancyB2DSize = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUoccupancyB2DSize", sizeof(struct __pyx_obj_4cuda_4cuda_CUoccupancyB2DSize), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUoccupancyB2DSize),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUoccupancyB2DSize) __PYX_ERR(2, 364, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUuuid_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUuuid_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUuuid_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUuuid_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUuuid_st) __PYX_ERR(2, 376, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemFabricHandle_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemFabricHandle_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_st) __PYX_ERR(2, 392, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUipcEventHandle_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUipcEventHandle_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUipcEventHandle_st) __PYX_ERR(2, 412, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUipcMemHandle_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUipcMemHandle_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUipcMemHandle_st) __PYX_ERR(2, 430, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamMemOpWaitValueParams_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamMemOpWaitValueParams_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWaitValueParams_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWaitValueParams_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamMemOpWaitValueParams_st) __PYX_ERR(2, 448, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamMemOpWriteValueParams_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamMemOpWriteValueParams_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWriteValueParams_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpWriteValueParams_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamMemOpWriteValueParams_st) __PYX_ERR(2, 477, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamMemOpFlushRemoteWritesParams_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamMemOpFlushRemoteWritesParams_st) __PYX_ERR(2, 506, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamMemOpMemoryBarrierParams_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamMemOpMemoryBarrierParams_st) __PYX_ERR(2, 523, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_union = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamBatchMemOpParams_union", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_union), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_union),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_union) __PYX_ERR(2, 540, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st) __PYX_ERR(2, 572, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st) __PYX_ERR(2, 597, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUdevprop_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUdevprop_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUdevprop_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUdevprop_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUdevprop_st) __PYX_ERR(2, 624, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUaccessPolicyWindow_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_st) __PYX_ERR(2, 660, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_KERNEL_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_st) __PYX_ERR(2, 698, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_KERNEL_NODE_PARAMS_v2_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2_st) __PYX_ERR(2, 736, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_KERNEL_NODE_PARAMS_v3_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3_st) __PYX_ERR(2, 782, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMSET_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_st) __PYX_ERR(2, 828, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMSET_NODE_PARAMS_v2_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2_st) __PYX_ERR(2, 857, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_HOST_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_st) __PYX_ERR(2, 889, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_HOST_NODE_PARAMS_v2_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2_st) __PYX_ERR(2, 910, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_CONDITIONAL_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_CONDITIONAL_NODE_PARAMS) __PYX_ERR(2, 931, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphEdgeData_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphEdgeData_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphEdgeData_st) __PYX_ERR(2, 973, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_GRAPH_INSTANTIATE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS_st) __PYX_ERR(2, 1016, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchMemSyncDomainMap_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap_st) __PYX_ERR(2, 1043, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct0 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct0", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct0), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct0),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct0) __PYX_ERR(2, 1069, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct1", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct1) __PYX_ERR(2, 1088, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct2", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct2) __PYX_ERR(2, 1108, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue_union = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchAttributeValue_union", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue_union), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue_union),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue_union) __PYX_ERR(2, 1126, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchAttribute_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchAttribute_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchAttribute_st) __PYX_ERR(2, 1187, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchConfig_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchConfig_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchConfig_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchConfig_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchConfig_st) __PYX_ERR(2, 1208, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexecAffinitySmCount_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_st) __PYX_ERR(2, 1247, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union2", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union2) __PYX_ERR(2, 1265, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexecAffinityParam_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexecAffinityParam_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_st) __PYX_ERR(2, 1281, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlibraryHostUniversalFunctionAndDataTable_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable_st) __PYX_ERR(2, 1302, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY2D_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_st) __PYX_ERR(2, 1324, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY3D_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_st) __PYX_ERR(2, 1376, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY3D_PEER_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_st) __PYX_ERR(2, 1447, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS_st) __PYX_ERR(2, 1521, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_DESCRIPTOR_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_st) __PYX_ERR(2, 1547, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY3D_DESCRIPTOR_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_st) __PYX_ERR(2, 1571, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct3 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct3", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct3), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct3),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct3) __PYX_ERR(2, 1599, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_SPARSE_PROPERTIES_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_st) __PYX_ERR(2, 1618, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_MEMORY_REQUIREMENTS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_st) __PYX_ERR(2, 1646, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct4 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct4", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct4), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct4),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct4) __PYX_ERR(2, 1668, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct5 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct5", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct5), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct5),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct5) __PYX_ERR(2, 1684, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct6 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct6", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct6), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct6),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct6) __PYX_ERR(2, 1700, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct7 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct7", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct7), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct7),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct7) __PYX_ERR(2, 1722, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct8 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct8", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct8), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct8),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct8) __PYX_ERR(2, 1748, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union3 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union3", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union3), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union3),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union3) __PYX_ERR(2, 1763, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_RESOURCE_DESC_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_st) __PYX_ERR(2, 1791, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_TEXTURE_DESC_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_st) __PYX_ERR(2, 1814, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_RESOURCE_VIEW_DESC_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_st) __PYX_ERR(2, 1850, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUtensorMap_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUtensorMap_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUtensorMap_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUtensorMap_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUtensorMap_st) __PYX_ERR(2, 1884, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st) __PYX_ERR(2, 1903, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_LAUNCH_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_st) __PYX_ERR(2, 1923, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct9 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct9", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct9), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct9),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct9) __PYX_ERR(2, 1962, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union4 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union4", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union4), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union4),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union4) __PYX_ERR(2, 1979, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st) __PYX_ERR(2, 1999, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st) __PYX_ERR(2, 2026, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st) __PYX_ERR(2, 2050, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct10 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct10", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct10), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct10),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct10) __PYX_ERR(2, 2076, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union5 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union5", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union5), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union5),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union5) __PYX_ERR(2, 2093, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st) __PYX_ERR(2, 2113, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct11 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct11", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct11), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct11),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct11) __PYX_ERR(2, 2138, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union6 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union6", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union6), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union6),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union6) __PYX_ERR(2, 2153, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct12 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct12", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct12), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct12),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct12) __PYX_ERR(2, 2170, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct13 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct13", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct13), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct13),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct13) __PYX_ERR(2, 2185, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st) __PYX_ERR(2, 2209, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct14 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct14", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct14), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct14),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct14) __PYX_ERR(2, 2239, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union7 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union7", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union7), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union7),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union7) __PYX_ERR(2, 2254, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct15 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct15", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct15), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct15),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct15) __PYX_ERR(2, 2271, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct16 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct16", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct16), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct16),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct16) __PYX_ERR(2, 2288, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st) __PYX_ERR(2, 2312, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st) __PYX_ERR(2, 2342, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st) __PYX_ERR(2, 2370, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_WAIT_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st) __PYX_ERR(2, 2398, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st) __PYX_ERR(2, 2426, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union8 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union8", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union8), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union8),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union8) __PYX_ERR(2, 2454, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct17 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct17", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct17), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct17),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct17) __PYX_ERR(2, 2473, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct18 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct18", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct18), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct18),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct18) __PYX_ERR(2, 2502, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union9 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union9", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union9), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union9),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union9) __PYX_ERR(2, 2521, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union10 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union10", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union10), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union10),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union10) __PYX_ERR(2, 2540, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUarrayMapInfo_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUarrayMapInfo_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_st) __PYX_ERR(2, 2556, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemLocation_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemLocation_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemLocation_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemLocation_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemLocation_st) __PYX_ERR(2, 2598, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_struct19 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_struct19", sizeof(struct __pyx_obj_4cuda_4cuda_anon_struct19), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_struct19),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_struct19) __PYX_ERR(2, 2618, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemAllocationProp_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemAllocationProp_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_st) __PYX_ERR(2, 2639, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmulticastObjectProp_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_st) __PYX_ERR(2, 2671, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemAccessDesc_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemAccessDesc_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_st) __PYX_ERR(2, 2698, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphExecUpdateResultInfo_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_st) __PYX_ERR(2, 2719, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemPoolProps_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemPoolProps_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemPoolProps_st) __PYX_ERR(2, 2746, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemPoolPtrExportData_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_st) __PYX_ERR(2, 2781, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEM_ALLOC_NODE_PARAMS_v1_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st) __PYX_ERR(2, 2799, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEM_ALLOC_NODE_PARAMS_v2_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st) __PYX_ERR(2, 2834, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEM_FREE_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS_st) __PYX_ERR(2, 2869, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_CHILD_GRAPH_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS_st) __PYX_ERR(2, 2888, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EVENT_RECORD_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS_st) __PYX_ERR(2, 2908, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EVENT_WAIT_NODE_PARAMS_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS_st) __PYX_ERR(2, 2927, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphNodeParams_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphNodeParams_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphNodeParams_st) __PYX_ERR(2, 2946, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_anon_union12 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "anon_union12", sizeof(struct __pyx_obj_4cuda_4cuda_anon_union12), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_anon_union12),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_anon_union12) __PYX_ERR(2, 3009, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUeglFrame_st = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUeglFrame_st", sizeof(struct __pyx_obj_4cuda_4cuda_CUeglFrame_st), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUeglFrame_st),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUeglFrame_st) __PYX_ERR(2, 3026, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUdeviceptr = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUdeviceptr", sizeof(struct __pyx_obj_4cuda_4cuda_CUdeviceptr), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUdeviceptr),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUdeviceptr) __PYX_ERR(2, 3065, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUdevice = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUdevice", sizeof(struct __pyx_obj_4cuda_4cuda_CUdevice), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUdevice),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUdevice) __PYX_ERR(2, 3079, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUtexObject = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUtexObject", sizeof(struct __pyx_obj_4cuda_4cuda_CUtexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUtexObject),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUtexObject) __PYX_ERR(2, 3093, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUsurfObject = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUsurfObject", sizeof(struct __pyx_obj_4cuda_4cuda_CUsurfObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUsurfObject),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUsurfObject) __PYX_ERR(2, 3107, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphConditionalHandle = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphConditionalHandle", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphConditionalHandle), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphConditionalHandle),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphConditionalHandle) __PYX_ERR(2, 3121, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUuuid = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUuuid", sizeof(struct __pyx_obj_4cuda_4cuda_CUuuid), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUuuid),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUuuid) __PYX_ERR(2, 3133, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemFabricHandle_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemFabricHandle_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemFabricHandle_v1) __PYX_ERR(2, 3148, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemFabricHandle = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemFabricHandle", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemFabricHandle),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemFabricHandle) __PYX_ERR(2, 3167, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUipcEventHandle_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUipcEventHandle_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUipcEventHandle_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUipcEventHandle_v1) __PYX_ERR(2, 3186, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUipcEventHandle = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUipcEventHandle", sizeof(struct __pyx_obj_4cuda_4cuda_CUipcEventHandle), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUipcEventHandle),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUipcEventHandle) __PYX_ERR(2, 3203, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUipcMemHandle_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUipcMemHandle_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUipcMemHandle_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUipcMemHandle_v1) __PYX_ERR(2, 3220, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUipcMemHandle = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUipcMemHandle", sizeof(struct __pyx_obj_4cuda_4cuda_CUipcMemHandle), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUipcMemHandle),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUipcMemHandle) __PYX_ERR(2, 3237, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamBatchMemOpParams_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams_v1) __PYX_ERR(2, 3254, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamBatchMemOpParams", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamBatchMemOpParams),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamBatchMemOpParams) __PYX_ERR(2, 3281, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_BATCH_MEM_OP_NODE_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1) __PYX_ERR(2, 3308, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_BATCH_MEM_OP_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS) __PYX_ERR(2, 3329, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_BATCH_MEM_OP_NODE_PARAMS_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2) __PYX_ERR(2, 3350, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUdevprop_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUdevprop_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUdevprop_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUdevprop_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUdevprop_v1) __PYX_ERR(2, 3373, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUdevprop = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUdevprop", sizeof(struct __pyx_obj_4cuda_4cuda_CUdevprop), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUdevprop),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUdevprop) __PYX_ERR(2, 3408, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUaccessPolicyWindow_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow_v1) __PYX_ERR(2, 3443, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUaccessPolicyWindow", sizeof(struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUaccessPolicyWindow),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUaccessPolicyWindow) __PYX_ERR(2, 3480, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_KERNEL_NODE_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v1) __PYX_ERR(2, 3517, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_KERNEL_NODE_PARAMS_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v2) __PYX_ERR(2, 3552, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_KERNEL_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS) __PYX_ERR(2, 3593, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_KERNEL_NODE_PARAMS_v3", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_KERNEL_NODE_PARAMS_v3) __PYX_ERR(2, 3634, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMSET_NODE_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v1) __PYX_ERR(2, 3675, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMSET_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS) __PYX_ERR(2, 3702, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMSET_NODE_PARAMS_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMSET_NODE_PARAMS_v2) __PYX_ERR(2, 3729, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_HOST_NODE_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v1) __PYX_ERR(2, 3758, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_HOST_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS) __PYX_ERR(2, 3777, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_HOST_NODE_PARAMS_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_HOST_NODE_PARAMS_v2) __PYX_ERR(2, 3796, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphEdgeData = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphEdgeData", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphEdgeData),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphEdgeData) __PYX_ERR(2, 3815, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_GRAPH_INSTANTIATE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_GRAPH_INSTANTIATE_PARAMS) __PYX_ERR(2, 3857, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchMemSyncDomainMap", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchMemSyncDomainMap),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchMemSyncDomainMap) __PYX_ERR(2, 3880, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchAttributeValue", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchAttributeValue),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchAttributeValue) __PYX_ERR(2, 3905, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchAttribute = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchAttribute", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchAttribute) __PYX_ERR(2, 3960, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlaunchConfig = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlaunchConfig", sizeof(struct __pyx_obj_4cuda_4cuda_CUlaunchConfig), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlaunchConfig),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlaunchConfig) __PYX_ERR(2, 3979, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUkernelNodeAttrValue_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue_v1) __PYX_ERR(2, 4014, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUkernelNodeAttrValue", sizeof(struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUkernelNodeAttrValue),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUkernelNodeAttrValue) __PYX_ERR(2, 4069, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamAttrValue_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamAttrValue_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamAttrValue_v1) __PYX_ERR(2, 4124, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUstreamAttrValue = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUstreamAttrValue", sizeof(struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUstreamAttrValue),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUstreamAttrValue) __PYX_ERR(2, 4179, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexecAffinitySmCount_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount_v1) __PYX_ERR(2, 4234, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexecAffinitySmCount", sizeof(struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexecAffinitySmCount),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexecAffinitySmCount) __PYX_ERR(2, 4251, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexecAffinityParam_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexecAffinityParam_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexecAffinityParam_v1) __PYX_ERR(2, 4268, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUexecAffinityParam = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUexecAffinityParam", sizeof(struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUexecAffinityParam),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUexecAffinityParam) __PYX_ERR(2, 4287, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUlibraryHostUniversalFunctionAndDataTable", sizeof(struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUlibraryHostUniversalFunctionAndDataTable) __PYX_ERR(2, 4306, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY2D_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D_v2) __PYX_ERR(2, 4327, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY2D", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY2D),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY2D) __PYX_ERR(2, 4374, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY3D_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_v2) __PYX_ERR(2, 4421, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY3D", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D) __PYX_ERR(2, 4487, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY3D_PEER_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER_v1) __PYX_ERR(2, 4553, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY3D_PEER", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY3D_PEER),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY3D_PEER) __PYX_ERR(2, 4620, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEMCPY_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEMCPY_NODE_PARAMS) __PYX_ERR(2, 4687, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_DESCRIPTOR_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR_v2) __PYX_ERR(2, 4710, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_DESCRIPTOR", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_DESCRIPTOR) __PYX_ERR(2, 4733, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY3D_DESCRIPTOR_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR_v2) __PYX_ERR(2, 4756, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY3D_DESCRIPTOR", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY3D_DESCRIPTOR) __PYX_ERR(2, 4783, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_SPARSE_PROPERTIES_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES_v1) __PYX_ERR(2, 4810, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_SPARSE_PROPERTIES", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_SPARSE_PROPERTIES) __PYX_ERR(2, 4836, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_MEMORY_REQUIREMENTS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS_v1) __PYX_ERR(2, 4862, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_ARRAY_MEMORY_REQUIREMENTS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_ARRAY_MEMORY_REQUIREMENTS) __PYX_ERR(2, 4883, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_RESOURCE_DESC_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC_v1) __PYX_ERR(2, 4904, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_RESOURCE_DESC", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_DESC),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_DESC) __PYX_ERR(2, 4925, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_TEXTURE_DESC_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC_v1) __PYX_ERR(2, 4946, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_TEXTURE_DESC", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_TEXTURE_DESC),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_TEXTURE_DESC) __PYX_ERR(2, 4981, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_RESOURCE_VIEW_DESC_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC_v1) __PYX_ERR(2, 5016, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_RESOURCE_VIEW_DESC", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_RESOURCE_VIEW_DESC) __PYX_ERR(2, 5049, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUtensorMap = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUtensorMap", sizeof(struct __pyx_obj_4cuda_4cuda_CUtensorMap), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUtensorMap),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUtensorMap) __PYX_ERR(2, 5082, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1) __PYX_ERR(2, 5100, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_POINTER_ATTRIBUTE_P2P_TOKENS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS) __PYX_ERR(2, 5119, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_LAUNCH_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS_v1) __PYX_ERR(2, 5138, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_LAUNCH_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_LAUNCH_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_LAUNCH_PARAMS) __PYX_ERR(2, 5173, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1) __PYX_ERR(2, 5208, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_HANDLE_DESC", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_HANDLE_DESC) __PYX_ERR(2, 5233, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1) __PYX_ERR(2, 5258, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_BUFFER_DESC", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_BUFFER_DESC) __PYX_ERR(2, 5281, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1) __PYX_ERR(2, 5304, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC) __PYX_ERR(2, 5328, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1) __PYX_ERR(2, 5352, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC) __PYX_ERR(2, 5375, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1) __PYX_ERR(2, 5398, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS) __PYX_ERR(2, 5426, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1) __PYX_ERR(2, 5454, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS) __PYX_ERR(2, 5482, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1) __PYX_ERR(2, 5510, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_SIGNAL_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS) __PYX_ERR(2, 5532, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2) __PYX_ERR(2, 5554, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1) __PYX_ERR(2, 5576, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_WAIT_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS) __PYX_ERR(2, 5598, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2) __PYX_ERR(2, 5620, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemGenericAllocationHandle", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle) __PYX_ERR(2, 5642, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUarrayMapInfo_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUarrayMapInfo_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUarrayMapInfo_v1) __PYX_ERR(2, 5654, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUarrayMapInfo = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUarrayMapInfo", sizeof(struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUarrayMapInfo),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUarrayMapInfo) __PYX_ERR(2, 5692, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemLocation_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemLocation_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemLocation_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemLocation_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemLocation_v1) __PYX_ERR(2, 5730, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemLocation = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemLocation", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemLocation), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemLocation),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemLocation) __PYX_ERR(2, 5749, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemAllocationProp_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemAllocationProp_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemAllocationProp_v1) __PYX_ERR(2, 5768, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemAllocationProp = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemAllocationProp", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemAllocationProp),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemAllocationProp) __PYX_ERR(2, 5797, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmulticastObjectProp_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp_v1) __PYX_ERR(2, 5826, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmulticastObjectProp = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmulticastObjectProp", sizeof(struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmulticastObjectProp),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmulticastObjectProp) __PYX_ERR(2, 5852, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemAccessDesc_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemAccessDesc_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemAccessDesc_v1) __PYX_ERR(2, 5878, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemAccessDesc = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemAccessDesc", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemAccessDesc),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemAccessDesc) __PYX_ERR(2, 5897, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphExecUpdateResultInfo_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo_v1) __PYX_ERR(2, 5916, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphExecUpdateResultInfo", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphExecUpdateResultInfo),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphExecUpdateResultInfo) __PYX_ERR(2, 5940, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemPoolProps_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemPoolProps_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemPoolProps_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemPoolProps_v1) __PYX_ERR(2, 5964, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemPoolProps = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemPoolProps", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemPoolProps), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemPoolProps),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemPoolProps) __PYX_ERR(2, 5997, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemPoolPtrExportData_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData_v1) __PYX_ERR(2, 6030, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemPoolPtrExportData", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemPoolPtrExportData),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemPoolPtrExportData) __PYX_ERR(2, 6047, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEM_ALLOC_NODE_PARAMS_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v1) __PYX_ERR(2, 6064, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEM_ALLOC_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS) __PYX_ERR(2, 6093, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEM_ALLOC_NODE_PARAMS_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEM_ALLOC_NODE_PARAMS_v2) __PYX_ERR(2, 6122, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_MEM_FREE_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_MEM_FREE_NODE_PARAMS) __PYX_ERR(2, 6151, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_CHILD_GRAPH_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_CHILD_GRAPH_NODE_PARAMS) __PYX_ERR(2, 6168, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EVENT_RECORD_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EVENT_RECORD_NODE_PARAMS) __PYX_ERR(2, 6186, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUDA_EVENT_WAIT_NODE_PARAMS", sizeof(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUDA_EVENT_WAIT_NODE_PARAMS) __PYX_ERR(2, 6203, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUgraphNodeParams = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUgraphNodeParams", sizeof(struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUgraphNodeParams),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUgraphNodeParams) __PYX_ERR(2, 6220, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUeglFrame_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUeglFrame_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUeglFrame_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUeglFrame_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUeglFrame_v1) __PYX_ERR(2, 6269, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUeglFrame = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUeglFrame", sizeof(struct __pyx_obj_4cuda_4cuda_CUeglFrame), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUeglFrame),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUeglFrame) __PYX_ERR(2, 6306, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_cuuint32_t = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "cuuint32_t", sizeof(struct __pyx_obj_4cuda_4cuda_cuuint32_t), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_cuuint32_t),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_cuuint32_t) __PYX_ERR(2, 6343, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_cuuint64_t = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "cuuint64_t", sizeof(struct __pyx_obj_4cuda_4cuda_cuuint64_t), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_cuuint64_t),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_cuuint64_t) __PYX_ERR(2, 6355, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUdeviceptr_v2 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUdeviceptr_v2", sizeof(struct __pyx_obj_4cuda_4cuda_CUdeviceptr_v2), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUdeviceptr_v2),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUdeviceptr_v2) __PYX_ERR(2, 6367, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUdevice_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUdevice_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUdevice_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUdevice_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUdevice_v1) __PYX_ERR(2, 6381, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUtexObject_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUtexObject_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUtexObject_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUtexObject_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUtexObject_v1) __PYX_ERR(2, 6395, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUsurfObject_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUsurfObject_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUsurfObject_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUsurfObject_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUsurfObject_v1) __PYX_ERR(2, 6409, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle_v1 = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "CUmemGenericAllocationHandle_v1", sizeof(struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle_v1), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_CUmemGenericAllocationHandle_v1),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_CUmemGenericAllocationHandle_v1) __PYX_ERR(2, 6423, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_GLenum = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "GLenum", sizeof(struct __pyx_obj_4cuda_4cuda_GLenum), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_GLenum),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_GLenum) __PYX_ERR(2, 6435, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_GLuint = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "GLuint", sizeof(struct __pyx_obj_4cuda_4cuda_GLuint), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_GLuint),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_GLuint) __PYX_ERR(2, 6447, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_EGLint = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "EGLint", sizeof(struct __pyx_obj_4cuda_4cuda_EGLint), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_EGLint),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_EGLint) __PYX_ERR(2, 6459, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_VdpDevice = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "VdpDevice", sizeof(struct __pyx_obj_4cuda_4cuda_VdpDevice), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_VdpDevice),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_VdpDevice) __PYX_ERR(2, 6471, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_VdpGetProcAddress = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "VdpGetProcAddress", sizeof(struct __pyx_obj_4cuda_4cuda_VdpGetProcAddress), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_VdpGetProcAddress),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_VdpGetProcAddress) __PYX_ERR(2, 6483, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_VdpVideoSurface = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "VdpVideoSurface", sizeof(struct __pyx_obj_4cuda_4cuda_VdpVideoSurface), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_VdpVideoSurface),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_VdpVideoSurface) __PYX_ERR(2, 6495, __pyx_L1_error)
  __pyx_ptype_4cuda_4cuda_VdpOutputSurface = __Pyx_ImportType_3_0_3(__pyx_t_1, "cuda.cuda", "VdpOutputSurface", sizeof(struct __pyx_obj_4cuda_4cuda_VdpOutputSurface), __PYX_GET_STRUCT_ALIGNMENT_3_0_3(struct __pyx_obj_4cuda_4cuda_VdpOutputSurface),__Pyx_ImportType_CheckSize_Warn_3_0_3); if (!__pyx_ptype_4cuda_4cuda_VdpOutputSurface) __PYX_ERR(2, 6507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_utils(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_utils},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "utils",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initutils(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initutils(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_utils(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_utils(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_utils(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  size_t __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'utils' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("utils", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to utils pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_utils(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cuda___lib__utils) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cuda._lib.utils")) {
      if (unlikely((PyDict_SetItemString(modules, "cuda._lib.utils", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_utils(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "cuda/_lib/utils.pyx":13
 * from libc.stddef cimport wchar_t
 * from libc.string cimport memcpy
 * from enum import Enum             # <<<<<<<<<<<<<<
 * from typing import List, Tuple
 * import ctypes
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Enum);
  __Pyx_GIVEREF(__pyx_n_s_Enum);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Enum)) __PYX_ERR(0, 13, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_enum, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Enum, __pyx_t_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cuda/_lib/utils.pyx":14
 * from libc.string cimport memcpy
 * from enum import Enum
 * from typing import List, Tuple             # <<<<<<<<<<<<<<
 * import ctypes
 * cimport cuda.ccuda as ccuda
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_List)) __PYX_ERR(0, 14, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_Tuple)) __PYX_ERR(0, 14, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_3) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_3) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":15
 * from enum import Enum
 * from typing import List, Tuple
 * import ctypes             # <<<<<<<<<<<<<<
 * cimport cuda.ccuda as ccuda
 * import cuda.cuda as cuda
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_ctypes, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":17
 * import ctypes
 * cimport cuda.ccuda as ccuda
 * import cuda.cuda as cuda             # <<<<<<<<<<<<<<
 * cimport cuda._lib.param_packer as param_packer
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_cuda_cuda, __pyx_tuple__36); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cuda, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":30
 * cdef class HelperKernelParams:
 *     supported_types = { # excluding void_p and None, which are handled specially
 *         ctypes.c_bool,             # <<<<<<<<<<<<<<
 *         ctypes.c_char,
 *         ctypes.c_wchar,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_bool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":31
 *     supported_types = { # excluding void_p and None, which are handled specially
 *         ctypes.c_bool,
 *         ctypes.c_char,             # <<<<<<<<<<<<<<
 *         ctypes.c_wchar,
 *         ctypes.c_byte,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_char); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":32
 *         ctypes.c_bool,
 *         ctypes.c_char,
 *         ctypes.c_wchar,             # <<<<<<<<<<<<<<
 *         ctypes.c_byte,
 *         ctypes.c_ubyte,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_wchar); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":33
 *         ctypes.c_char,
 *         ctypes.c_wchar,
 *         ctypes.c_byte,             # <<<<<<<<<<<<<<
 *         ctypes.c_ubyte,
 *         ctypes.c_short,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_byte); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":34
 *         ctypes.c_wchar,
 *         ctypes.c_byte,
 *         ctypes.c_ubyte,             # <<<<<<<<<<<<<<
 *         ctypes.c_short,
 *         ctypes.c_ushort,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_ubyte); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":35
 *         ctypes.c_byte,
 *         ctypes.c_ubyte,
 *         ctypes.c_short,             # <<<<<<<<<<<<<<
 *         ctypes.c_ushort,
 *         ctypes.c_int,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_short); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":36
 *         ctypes.c_ubyte,
 *         ctypes.c_short,
 *         ctypes.c_ushort,             # <<<<<<<<<<<<<<
 *         ctypes.c_int,
 *         ctypes.c_uint,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_ushort); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":37
 *         ctypes.c_short,
 *         ctypes.c_ushort,
 *         ctypes.c_int,             # <<<<<<<<<<<<<<
 *         ctypes.c_uint,
 *         ctypes.c_long,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_int); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":38
 *         ctypes.c_ushort,
 *         ctypes.c_int,
 *         ctypes.c_uint,             # <<<<<<<<<<<<<<
 *         ctypes.c_long,
 *         ctypes.c_ulong,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_uint); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":39
 *         ctypes.c_int,
 *         ctypes.c_uint,
 *         ctypes.c_long,             # <<<<<<<<<<<<<<
 *         ctypes.c_ulong,
 *         ctypes.c_longlong,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_long); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":40
 *         ctypes.c_uint,
 *         ctypes.c_long,
 *         ctypes.c_ulong,             # <<<<<<<<<<<<<<
 *         ctypes.c_longlong,
 *         ctypes.c_ulonglong,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_ulong); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":41
 *         ctypes.c_long,
 *         ctypes.c_ulong,
 *         ctypes.c_longlong,             # <<<<<<<<<<<<<<
 *         ctypes.c_ulonglong,
 *         ctypes.c_size_t,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_longlong); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":42
 *         ctypes.c_ulong,
 *         ctypes.c_longlong,
 *         ctypes.c_ulonglong,             # <<<<<<<<<<<<<<
 *         ctypes.c_size_t,
 *         ctypes.c_float,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_ulonglong); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":43
 *         ctypes.c_longlong,
 *         ctypes.c_ulonglong,
 *         ctypes.c_size_t,             # <<<<<<<<<<<<<<
 *         ctypes.c_float,
 *         ctypes.c_double
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_size_t); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":44
 *         ctypes.c_ulonglong,
 *         ctypes.c_size_t,
 *         ctypes.c_float,             # <<<<<<<<<<<<<<
 *         ctypes.c_double
 *     }
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_float); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":45
 *         ctypes.c_size_t,
 *         ctypes.c_float,
 *         ctypes.c_double             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_double); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PySet_Add(__pyx_t_2, __pyx_t_3) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_4) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_5) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_6) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_7) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_8) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_9) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_10) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_11) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_12) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_13) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_14) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_15) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_16) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_17) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PySet_Add(__pyx_t_2, __pyx_t_18) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams, __pyx_n_s_supported_types, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams);

  /* "cuda/_lib/utils.pyx":48
 *     }
 * 
 *     max_param_size = max(ctypes.sizeof(max(HelperKernelParams.supported_types, key=lambda t:ctypes.sizeof(t))), sizeof(void_ptr))             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, kernelParams):
 */
  __pyx_t_19 = (sizeof(__pyx_t_4cuda_4_lib_5utils_void_ptr));
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_sizeof); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams), __pyx_n_s_supported_types); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_16 = PyTuple_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_18)) __PYX_ERR(0, 48, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_18HelperKernelParams_4lambda, 0, __pyx_n_s_HelperKernelParams_lambda, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_key, __pyx_t_15) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_16, __pyx_t_18); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  __pyx_t_20 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_17))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_17, function);
      __pyx_t_20 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_t_15};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_20, 1+__pyx_t_20);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }
  __pyx_t_15 = __Pyx_PyInt_FromSize_t(__pyx_t_19); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_18 = PyObject_RichCompare(__pyx_t_15, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (__pyx_t_21) {
    __pyx_t_18 = __Pyx_PyInt_FromSize_t(__pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = __pyx_t_18;
    __pyx_t_18 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_17 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_17;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams, __pyx_n_s_max_param_size, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperKernelParams);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_18HelperKernelParams_6__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperKernelParams___reduce_cyth, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_18HelperKernelParams_8__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperKernelParams___setstate_cy, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_18HelperInputVoidPtr_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperInputVoidPtr___reduce_cyth, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_18HelperInputVoidPtr_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperInputVoidPtr___setstate_cy, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":192
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUmemPool_attribute_enum.CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_5pyObj, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmemPool_attribute_pyObj, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute, __pyx_n_s_pyObj, __pyx_t_2) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemPool_attribute);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmemPool_attribute___redu, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_25HelperCUmemPool_attribute_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmemPool_attribute___sets, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":229
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if self._attr in (ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY,
 *                           ccuda.CUmem_range_attribute_enum.CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_5pyObj, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmem_range_attribute_pyOb, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute, __pyx_n_s_pyObj, __pyx_t_2) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperCUmem_range_attribute);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmem_range_attribute___re, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_27HelperCUmem_range_attribute_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmem_range_attribute___se, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":300
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT,):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_25HelperCUpointer_attribute_5pyObj, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUpointer_attribute_pyObj, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute, __pyx_n_s_pyObj, __pyx_t_2) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperCUpointer_attribute);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_25HelperCUpointer_attribute_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUpointer_attribute___redu, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_25HelperCUpointer_attribute_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUpointer_attribute___sets, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":354
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attr in (ccuda.CUgraphMem_attribute_enum.CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_5pyObj, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUgraphMem_attribute_pyObj, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute, __pyx_n_s_pyObj, __pyx_t_2) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperCUgraphMem_attribute);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUgraphMem_attribute___red, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_26HelperCUgraphMem_attribute_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUgraphMem_attribute___set, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_18HelperCUjit_option_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUjit_option___reduce_cyth, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_18HelperCUjit_option_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUjit_option___setstate_cy, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_21HelperCUlibraryOption_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUlibraryOption___reduce_c, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_21HelperCUlibraryOption_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUlibraryOption___setstate, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":471
 *         return <void_ptr>self._cptr
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         if False:
 *             pass
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_5pyObj, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmemAllocationHandleType_2, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType, __pyx_n_s_pyObj, __pyx_t_2) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperCUmemAllocationHandleType);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmemAllocationHandleType_3, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_31HelperCUmemAllocationHandleType_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUmemAllocationHandleType_4, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_InputVoidPtrPtrHelper___reduce_c, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_21InputVoidPtrPtrHelper_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_InputVoidPtrPtrHelper___setstate, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":533
 *         return <void_ptr>self._cptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self._size
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_5size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUcoredumpSettings_size, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings, __pyx_n_s_size, __pyx_t_2) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings);

  /* "cuda/_lib/utils.pyx":536
 *         return self._size
 * 
 *     def pyObj(self):             # <<<<<<<<<<<<<<
 *         assert(self._is_getter == True)
 *         if self._attrib in (ccuda.CUcoredumpSettings_enum.CU_COREDUMP_FILE,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_7pyObj, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUcoredumpSettings_pyObj, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings, __pyx_n_s_pyObj, __pyx_t_2) < 0) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cuda_4_lib_5utils_HelperCUcoredumpSettings);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUcoredumpSettings___reduc, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4cuda_4_lib_5utils_24HelperCUcoredumpSettings_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HelperCUcoredumpSettings___setst, NULL, __pyx_n_s_cuda__lib_utils, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cuda/_lib/utils.pyx":1
 * # Copyright 2021-2023 NVIDIA Corporation.  All rights reserved.             # <<<<<<<<<<<<<<
 * #
 * # Please refer to the NVIDIA end user license agreement (EULA) associated
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init cuda._lib.utils", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cuda._lib.utils");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if Py_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value); // transfer ownership of value to values
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;  // ownership transferred to values
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL; // ownership transferred to values
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    PyObject* exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
#endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#if !CYTHON_USE_TYPE_SLOTS
        if (dictoffset == 0) {
            PyErr_Format(PyExc_TypeError,
                "extension type '%s.200s': "
                "unable to validate whether bases have a __dict__ "
                "when CYTHON_USE_TYPE_SLOTS is off "
                "(likely because you are building in the limited API). "
                "Therefore, all extension types with multiple bases "
                "must add 'cdef dict __dict__' in this compilation mode",
                type_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#else
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_3
#define __PYX_HAVE_RT_ImportType_3_0_3
static PyTypeObject *__Pyx_ImportType_3_0_3(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_3 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_3 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_3 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__34);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__35;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (unlikely(!abi_module)) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    PyErr_Clear();
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned PY_LONG_LONG) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned PY_LONG_LONG) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned PY_LONG_LONG) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned PY_LONG_LONG) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned PY_LONG_LONG) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned PY_LONG_LONG) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned PY_LONG_LONG) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned PY_LONG_LONG) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned PY_LONG_LONG) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned PY_LONG_LONG) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned PY_LONG_LONG) 1) << (sizeof(unsigned PY_LONG_LONG) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned PY_LONG_LONG) -1;
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned PY_LONG_LONG));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum CUmemPool_attribute_enum __Pyx_PyInt_As_enum__CUmemPool_attribute_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUmemPool_attribute_enum neg_one = (enum CUmemPool_attribute_enum) -1, const_zero = (enum CUmemPool_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUmemPool_attribute_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUmemPool_attribute_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) (((((enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) (((((((enum CUmemPool_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) (((((((((enum CUmemPool_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUmemPool_attribute_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUmemPool_attribute_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemPool_attribute_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUmemPool_attribute_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemPool_attribute_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) (((enum CUmemPool_attribute_enum)-1)*(((((enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) ((((((enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) (((enum CUmemPool_attribute_enum)-1)*(((((((enum CUmemPool_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) ((((((((enum CUmemPool_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) (((enum CUmemPool_attribute_enum)-1)*(((((((((enum CUmemPool_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUmemPool_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemPool_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemPool_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUmemPool_attribute_enum) ((((((((((enum CUmemPool_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemPool_attribute_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUmemPool_attribute_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemPool_attribute_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUmemPool_attribute_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemPool_attribute_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUmemPool_attribute_enum) -1;
    } else {
        enum CUmemPool_attribute_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUmemPool_attribute_enum) -1;
        val = __Pyx_PyInt_As_enum__CUmemPool_attribute_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUmemPool_attribute_enum");
    return (enum CUmemPool_attribute_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUmemPool_attribute_enum");
    return (enum CUmemPool_attribute_enum) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUmemPool_attribute_enum(enum CUmemPool_attribute_enum value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUmemPool_attribute_enum neg_one = (enum CUmemPool_attribute_enum) -1, const_zero = (enum CUmemPool_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum CUmemPool_attribute_enum) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum CUmemPool_attribute_enum) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUmemPool_attribute_enum) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum CUmemPool_attribute_enum) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUmemPool_attribute_enum) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(enum CUmemPool_attribute_enum),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum CUmemPool_attribute_enum));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum CUmem_range_attribute_enum __Pyx_PyInt_As_enum__CUmem_range_attribute_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUmem_range_attribute_enum neg_one = (enum CUmem_range_attribute_enum) -1, const_zero = (enum CUmem_range_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUmem_range_attribute_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUmem_range_attribute_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) (((((enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) (((((((enum CUmem_range_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) (((((((((enum CUmem_range_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUmem_range_attribute_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUmem_range_attribute_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmem_range_attribute_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUmem_range_attribute_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmem_range_attribute_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) (((enum CUmem_range_attribute_enum)-1)*(((((enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) ((((((enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) (((enum CUmem_range_attribute_enum)-1)*(((((((enum CUmem_range_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) ((((((((enum CUmem_range_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) (((enum CUmem_range_attribute_enum)-1)*(((((((((enum CUmem_range_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUmem_range_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmem_range_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmem_range_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUmem_range_attribute_enum) ((((((((((enum CUmem_range_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUmem_range_attribute_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUmem_range_attribute_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmem_range_attribute_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUmem_range_attribute_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmem_range_attribute_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUmem_range_attribute_enum) -1;
    } else {
        enum CUmem_range_attribute_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUmem_range_attribute_enum) -1;
        val = __Pyx_PyInt_As_enum__CUmem_range_attribute_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUmem_range_attribute_enum");
    return (enum CUmem_range_attribute_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUmem_range_attribute_enum");
    return (enum CUmem_range_attribute_enum) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUmem_range_attribute_enum(enum CUmem_range_attribute_enum value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUmem_range_attribute_enum neg_one = (enum CUmem_range_attribute_enum) -1, const_zero = (enum CUmem_range_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum CUmem_range_attribute_enum) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum CUmem_range_attribute_enum) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUmem_range_attribute_enum) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum CUmem_range_attribute_enum) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUmem_range_attribute_enum) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(enum CUmem_range_attribute_enum),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum CUmem_range_attribute_enum));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum CUpointer_attribute_enum __Pyx_PyInt_As_enum__CUpointer_attribute_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUpointer_attribute_enum neg_one = (enum CUpointer_attribute_enum) -1, const_zero = (enum CUpointer_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUpointer_attribute_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUpointer_attribute_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) (((((enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) (((((((enum CUpointer_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) (((((((((enum CUpointer_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUpointer_attribute_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUpointer_attribute_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUpointer_attribute_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUpointer_attribute_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUpointer_attribute_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) (((enum CUpointer_attribute_enum)-1)*(((((enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) ((((((enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) (((enum CUpointer_attribute_enum)-1)*(((((((enum CUpointer_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) ((((((((enum CUpointer_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) (((enum CUpointer_attribute_enum)-1)*(((((((((enum CUpointer_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUpointer_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUpointer_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUpointer_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUpointer_attribute_enum) ((((((((((enum CUpointer_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUpointer_attribute_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUpointer_attribute_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUpointer_attribute_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUpointer_attribute_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUpointer_attribute_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUpointer_attribute_enum) -1;
    } else {
        enum CUpointer_attribute_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUpointer_attribute_enum) -1;
        val = __Pyx_PyInt_As_enum__CUpointer_attribute_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUpointer_attribute_enum");
    return (enum CUpointer_attribute_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUpointer_attribute_enum");
    return (enum CUpointer_attribute_enum) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUpointer_attribute_enum(enum CUpointer_attribute_enum value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUpointer_attribute_enum neg_one = (enum CUpointer_attribute_enum) -1, const_zero = (enum CUpointer_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum CUpointer_attribute_enum) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum CUpointer_attribute_enum) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUpointer_attribute_enum) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum CUpointer_attribute_enum) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUpointer_attribute_enum) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(enum CUpointer_attribute_enum),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum CUpointer_attribute_enum));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum CUgraphMem_attribute_enum __Pyx_PyInt_As_enum__CUgraphMem_attribute_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUgraphMem_attribute_enum neg_one = (enum CUgraphMem_attribute_enum) -1, const_zero = (enum CUgraphMem_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUgraphMem_attribute_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUgraphMem_attribute_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) (((((enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) (((((((enum CUgraphMem_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) (((((((((enum CUgraphMem_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUgraphMem_attribute_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUgraphMem_attribute_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUgraphMem_attribute_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUgraphMem_attribute_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUgraphMem_attribute_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) (((enum CUgraphMem_attribute_enum)-1)*(((((enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) ((((((enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) (((enum CUgraphMem_attribute_enum)-1)*(((((((enum CUgraphMem_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) ((((((((enum CUgraphMem_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) (((enum CUgraphMem_attribute_enum)-1)*(((((((((enum CUgraphMem_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUgraphMem_attribute_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUgraphMem_attribute_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUgraphMem_attribute_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUgraphMem_attribute_enum) ((((((((((enum CUgraphMem_attribute_enum)digits[3]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[2]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[1]) << PyLong_SHIFT) | (enum CUgraphMem_attribute_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUgraphMem_attribute_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUgraphMem_attribute_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUgraphMem_attribute_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUgraphMem_attribute_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUgraphMem_attribute_enum) -1;
    } else {
        enum CUgraphMem_attribute_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUgraphMem_attribute_enum) -1;
        val = __Pyx_PyInt_As_enum__CUgraphMem_attribute_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUgraphMem_attribute_enum");
    return (enum CUgraphMem_attribute_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUgraphMem_attribute_enum");
    return (enum CUgraphMem_attribute_enum) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUgraphMem_attribute_enum(enum CUgraphMem_attribute_enum value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUgraphMem_attribute_enum neg_one = (enum CUgraphMem_attribute_enum) -1, const_zero = (enum CUgraphMem_attribute_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum CUgraphMem_attribute_enum) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum CUgraphMem_attribute_enum) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUgraphMem_attribute_enum) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum CUgraphMem_attribute_enum) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUgraphMem_attribute_enum) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(enum CUgraphMem_attribute_enum),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum CUgraphMem_attribute_enum));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum CUjit_option_enum __Pyx_PyInt_As_enum__CUjit_option_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUjit_option_enum neg_one = (enum CUjit_option_enum) -1, const_zero = (enum CUjit_option_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUjit_option_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUjit_option_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUjit_option_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) (((((enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_option_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) (((((((enum CUjit_option_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_option_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) (((((((((enum CUjit_option_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUjit_option_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUjit_option_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_option_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_option_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_option_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUjit_option_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) (((enum CUjit_option_enum)-1)*(((((enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUjit_option_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) ((((((enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUjit_option_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) (((enum CUjit_option_enum)-1)*(((((((enum CUjit_option_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_option_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) ((((((((enum CUjit_option_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUjit_option_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) (((enum CUjit_option_enum)-1)*(((((((((enum CUjit_option_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_option_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_option_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_option_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_option_enum) ((((((((((enum CUjit_option_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_option_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUjit_option_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_option_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_option_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_option_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUjit_option_enum) -1;
    } else {
        enum CUjit_option_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUjit_option_enum) -1;
        val = __Pyx_PyInt_As_enum__CUjit_option_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUjit_option_enum");
    return (enum CUjit_option_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUjit_option_enum");
    return (enum CUjit_option_enum) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum CUjit_target_enum __Pyx_PyInt_As_enum__CUjit_target_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUjit_target_enum neg_one = (enum CUjit_target_enum) -1, const_zero = (enum CUjit_target_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUjit_target_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUjit_target_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUjit_target_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) (((((enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_target_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) (((((((enum CUjit_target_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_target_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) (((((((((enum CUjit_target_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUjit_target_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUjit_target_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_target_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_target_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_target_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUjit_target_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) (((enum CUjit_target_enum)-1)*(((((enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUjit_target_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) ((((((enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUjit_target_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) (((enum CUjit_target_enum)-1)*(((((((enum CUjit_target_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_target_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) ((((((((enum CUjit_target_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUjit_target_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) (((enum CUjit_target_enum)-1)*(((((((((enum CUjit_target_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_target_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_target_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_target_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_target_enum) ((((((((((enum CUjit_target_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_target_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUjit_target_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_target_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_target_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_target_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUjit_target_enum) -1;
    } else {
        enum CUjit_target_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUjit_target_enum) -1;
        val = __Pyx_PyInt_As_enum__CUjit_target_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUjit_target_enum");
    return (enum CUjit_target_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUjit_target_enum");
    return (enum CUjit_target_enum) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum CUjit_fallback_enum __Pyx_PyInt_As_enum__CUjit_fallback_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUjit_fallback_enum neg_one = (enum CUjit_fallback_enum) -1, const_zero = (enum CUjit_fallback_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUjit_fallback_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUjit_fallback_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUjit_fallback_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) (((((enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_fallback_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) (((((((enum CUjit_fallback_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_fallback_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) (((((((((enum CUjit_fallback_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUjit_fallback_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUjit_fallback_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_fallback_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_fallback_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_fallback_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) (((enum CUjit_fallback_enum)-1)*(((((enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUjit_fallback_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) ((((((enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) (((enum CUjit_fallback_enum)-1)*(((((((enum CUjit_fallback_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_fallback_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) ((((((((enum CUjit_fallback_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) (((enum CUjit_fallback_enum)-1)*(((((((((enum CUjit_fallback_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_fallback_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_fallback_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_fallback_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_fallback_enum) ((((((((((enum CUjit_fallback_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_fallback_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUjit_fallback_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_fallback_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_fallback_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_fallback_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUjit_fallback_enum) -1;
    } else {
        enum CUjit_fallback_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUjit_fallback_enum) -1;
        val = __Pyx_PyInt_As_enum__CUjit_fallback_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUjit_fallback_enum");
    return (enum CUjit_fallback_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUjit_fallback_enum");
    return (enum CUjit_fallback_enum) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum CUjit_cacheMode_enum __Pyx_PyInt_As_enum__CUjit_cacheMode_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUjit_cacheMode_enum neg_one = (enum CUjit_cacheMode_enum) -1, const_zero = (enum CUjit_cacheMode_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUjit_cacheMode_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUjit_cacheMode_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) (((((enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) (((((((enum CUjit_cacheMode_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) (((((((((enum CUjit_cacheMode_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUjit_cacheMode_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUjit_cacheMode_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_cacheMode_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_cacheMode_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_cacheMode_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) (((enum CUjit_cacheMode_enum)-1)*(((((enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) ((((((enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) (((enum CUjit_cacheMode_enum)-1)*(((((((enum CUjit_cacheMode_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) ((((((((enum CUjit_cacheMode_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) (((enum CUjit_cacheMode_enum)-1)*(((((((((enum CUjit_cacheMode_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUjit_cacheMode_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUjit_cacheMode_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUjit_cacheMode_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUjit_cacheMode_enum) ((((((((((enum CUjit_cacheMode_enum)digits[3]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[2]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[1]) << PyLong_SHIFT) | (enum CUjit_cacheMode_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUjit_cacheMode_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_cacheMode_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUjit_cacheMode_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUjit_cacheMode_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUjit_cacheMode_enum) -1;
    } else {
        enum CUjit_cacheMode_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUjit_cacheMode_enum) -1;
        val = __Pyx_PyInt_As_enum__CUjit_cacheMode_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUjit_cacheMode_enum");
    return (enum CUjit_cacheMode_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUjit_cacheMode_enum");
    return (enum CUjit_cacheMode_enum) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum CUlibraryOption_enum __Pyx_PyInt_As_enum__CUlibraryOption_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUlibraryOption_enum neg_one = (enum CUlibraryOption_enum) -1, const_zero = (enum CUlibraryOption_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUlibraryOption_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUlibraryOption_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUlibraryOption_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) (((((enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUlibraryOption_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) (((((((enum CUlibraryOption_enum)digits[2]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUlibraryOption_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) (((((((((enum CUlibraryOption_enum)digits[3]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[2]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUlibraryOption_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUlibraryOption_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUlibraryOption_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUlibraryOption_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUlibraryOption_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) (((enum CUlibraryOption_enum)-1)*(((((enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUlibraryOption_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) ((((((enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) (((enum CUlibraryOption_enum)-1)*(((((((enum CUlibraryOption_enum)digits[2]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUlibraryOption_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) ((((((((enum CUlibraryOption_enum)digits[2]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) (((enum CUlibraryOption_enum)-1)*(((((((((enum CUlibraryOption_enum)digits[3]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[2]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUlibraryOption_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUlibraryOption_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUlibraryOption_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUlibraryOption_enum) ((((((((((enum CUlibraryOption_enum)digits[3]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[2]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[1]) << PyLong_SHIFT) | (enum CUlibraryOption_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUlibraryOption_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUlibraryOption_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUlibraryOption_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUlibraryOption_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUlibraryOption_enum) -1;
    } else {
        enum CUlibraryOption_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUlibraryOption_enum) -1;
        val = __Pyx_PyInt_As_enum__CUlibraryOption_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUlibraryOption_enum");
    return (enum CUlibraryOption_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUlibraryOption_enum");
    return (enum CUlibraryOption_enum) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum CUmemAllocationHandleType_enum __Pyx_PyInt_As_enum__CUmemAllocationHandleType_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUmemAllocationHandleType_enum neg_one = (enum CUmemAllocationHandleType_enum) -1, const_zero = (enum CUmemAllocationHandleType_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUmemAllocationHandleType_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUmemAllocationHandleType_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) (((((enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) (((((((enum CUmemAllocationHandleType_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) (((((((((enum CUmemAllocationHandleType_enum)digits[3]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUmemAllocationHandleType_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemAllocationHandleType_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemAllocationHandleType_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) (((enum CUmemAllocationHandleType_enum)-1)*(((((enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) ((((((enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) (((enum CUmemAllocationHandleType_enum)-1)*(((((((enum CUmemAllocationHandleType_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) ((((((((enum CUmemAllocationHandleType_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) (((enum CUmemAllocationHandleType_enum)-1)*(((((((((enum CUmemAllocationHandleType_enum)digits[3]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUmemAllocationHandleType_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUmemAllocationHandleType_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUmemAllocationHandleType_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUmemAllocationHandleType_enum) ((((((((((enum CUmemAllocationHandleType_enum)digits[3]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[2]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[1]) << PyLong_SHIFT) | (enum CUmemAllocationHandleType_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemAllocationHandleType_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUmemAllocationHandleType_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUmemAllocationHandleType_enum) -1;
    } else {
        enum CUmemAllocationHandleType_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUmemAllocationHandleType_enum) -1;
        val = __Pyx_PyInt_As_enum__CUmemAllocationHandleType_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUmemAllocationHandleType_enum");
    return (enum CUmemAllocationHandleType_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUmemAllocationHandleType_enum");
    return (enum CUmemAllocationHandleType_enum) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUmemAllocationHandleType_enum(enum CUmemAllocationHandleType_enum value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUmemAllocationHandleType_enum neg_one = (enum CUmemAllocationHandleType_enum) -1, const_zero = (enum CUmemAllocationHandleType_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum CUmemAllocationHandleType_enum) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUmemAllocationHandleType_enum) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(enum CUmemAllocationHandleType_enum),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum CUmemAllocationHandleType_enum));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum CUcoredumpSettings_enum __Pyx_PyInt_As_enum__CUcoredumpSettings_enum(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUcoredumpSettings_enum neg_one = (enum CUcoredumpSettings_enum) -1, const_zero = (enum CUcoredumpSettings_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum CUcoredumpSettings_enum) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum CUcoredumpSettings_enum) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) >= 2 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) (((((enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) >= 3 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) (((((((enum CUcoredumpSettings_enum)digits[2]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) >= 4 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) (((((((((enum CUcoredumpSettings_enum)digits[3]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[2]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum CUcoredumpSettings_enum) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum CUcoredumpSettings_enum) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUcoredumpSettings_enum, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUcoredumpSettings_enum) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUcoredumpSettings_enum, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) (((enum CUcoredumpSettings_enum)-1)*(((((enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) ((((((enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) (((enum CUcoredumpSettings_enum)-1)*(((((((enum CUcoredumpSettings_enum)digits[2]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) ((((((((enum CUcoredumpSettings_enum)digits[2]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) (((enum CUcoredumpSettings_enum)-1)*(((((((((enum CUcoredumpSettings_enum)digits[3]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[2]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum CUcoredumpSettings_enum) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum CUcoredumpSettings_enum, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum CUcoredumpSettings_enum) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum CUcoredumpSettings_enum) ((((((((((enum CUcoredumpSettings_enum)digits[3]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[2]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[1]) << PyLong_SHIFT) | (enum CUcoredumpSettings_enum)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum CUcoredumpSettings_enum) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUcoredumpSettings_enum, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum CUcoredumpSettings_enum) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum CUcoredumpSettings_enum, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum CUcoredumpSettings_enum) -1;
    } else {
        enum CUcoredumpSettings_enum val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum CUcoredumpSettings_enum) -1;
        val = __Pyx_PyInt_As_enum__CUcoredumpSettings_enum(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum CUcoredumpSettings_enum");
    return (enum CUcoredumpSettings_enum) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum CUcoredumpSettings_enum");
    return (enum CUcoredumpSettings_enum) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__CUcoredumpSettings_enum(enum CUcoredumpSettings_enum value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum CUcoredumpSettings_enum neg_one = (enum CUcoredumpSettings_enum) -1, const_zero = (enum CUcoredumpSettings_enum) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum CUcoredumpSettings_enum) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum CUcoredumpSettings_enum) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUcoredumpSettings_enum) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum CUcoredumpSettings_enum) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum CUcoredumpSettings_enum) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(enum CUcoredumpSettings_enum),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum CUcoredumpSettings_enum));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__40);
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version() {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
